
stallings:     formato del fichero elf64-x86-64


Desensamblado de la sección .init:

0000000000401000 <_init>:
  401000:	f3 0f 1e fa          	endbr64 
  401004:	48 83 ec 08          	sub    $0x8,%rsp
  401008:	48 8b 05 d9 4f 00 00 	mov    0x4fd9(%rip),%rax        # 405fe8 <__gmon_start__>
  40100f:	48 85 c0             	test   %rax,%rax
  401012:	74 02                	je     401016 <_init+0x16>
  401014:	ff d0                	callq  *%rax
  401016:	48 83 c4 08          	add    $0x8,%rsp
  40101a:	c3                   	retq   

Desensamblado de la sección .plt:

0000000000401020 <.plt>:
  401020:	ff 35 e2 4f 00 00    	pushq  0x4fe2(%rip)        # 406008 <_GLOBAL_OFFSET_TABLE_+0x8>
  401026:	ff 25 e4 4f 00 00    	jmpq   *0x4fe4(%rip)        # 406010 <_GLOBAL_OFFSET_TABLE_+0x10>
  40102c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000401030 <__errno_location@plt>:
  401030:	ff 25 e2 4f 00 00    	jmpq   *0x4fe2(%rip)        # 406018 <__errno_location@GLIBC_2.2.5>
  401036:	68 00 00 00 00       	pushq  $0x0
  40103b:	e9 e0 ff ff ff       	jmpq   401020 <.plt>

0000000000401040 <std::terminate()@plt>:
  401040:	ff 25 da 4f 00 00    	jmpq   *0x4fda(%rip)        # 406020 <std::terminate()@GLIBCXX_3.4>
  401046:	68 01 00 00 00       	pushq  $0x1
  40104b:	e9 d0 ff ff ff       	jmpq   401020 <.plt>

0000000000401050 <nanosleep@plt>:
  401050:	ff 25 d2 4f 00 00    	jmpq   *0x4fd2(%rip)        # 406028 <nanosleep@GLIBC_2.2.5>
  401056:	68 02 00 00 00       	pushq  $0x2
  40105b:	e9 c0 ff ff ff       	jmpq   401020 <.plt>

0000000000401060 <std::thread::_State::~_State()@plt>:
  401060:	ff 25 ca 4f 00 00    	jmpq   *0x4fca(%rip)        # 406030 <std::thread::_State::~_State()@GLIBCXX_3.4.22>
  401066:	68 03 00 00 00       	pushq  $0x3
  40106b:	e9 b0 ff ff ff       	jmpq   401020 <.plt>

0000000000401070 <std::basic_ostream<char, std::char_traits<char> >& std::endl<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&)@plt>:
  401070:	ff 25 c2 4f 00 00    	jmpq   *0x4fc2(%rip)        # 406038 <std::basic_ostream<char, std::char_traits<char> >& std::endl<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&)@GLIBCXX_3.4>
  401076:	68 04 00 00 00       	pushq  $0x4
  40107b:	e9 a0 ff ff ff       	jmpq   401020 <.plt>

0000000000401080 <pthread_create@plt>:
  401080:	ff 25 ba 4f 00 00    	jmpq   *0x4fba(%rip)        # 406040 <pthread_create@GLIBC_2.2.5>
  401086:	68 05 00 00 00       	pushq  $0x5
  40108b:	e9 90 ff ff ff       	jmpq   401020 <.plt>

0000000000401090 <std::__throw_system_error(int)@plt>:
  401090:	ff 25 b2 4f 00 00    	jmpq   *0x4fb2(%rip)        # 406048 <std::__throw_system_error(int)@GLIBCXX_3.4.11>
  401096:	68 06 00 00 00       	pushq  $0x6
  40109b:	e9 80 ff ff ff       	jmpq   401020 <.plt>

00000000004010a0 <pthread_mutex_unlock@plt>:
  4010a0:	ff 25 aa 4f 00 00    	jmpq   *0x4faa(%rip)        # 406050 <pthread_mutex_unlock@GLIBC_2.2.5>
  4010a6:	68 07 00 00 00       	pushq  $0x7
  4010ab:	e9 70 ff ff ff       	jmpq   401020 <.plt>

00000000004010b0 <__cxa_atexit@plt>:
  4010b0:	ff 25 a2 4f 00 00    	jmpq   *0x4fa2(%rip)        # 406058 <__cxa_atexit@GLIBC_2.2.5>
  4010b6:	68 08 00 00 00       	pushq  $0x8
  4010bb:	e9 60 ff ff ff       	jmpq   401020 <.plt>

00000000004010c0 <std::thread::_M_start_thread(std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> >, void (*)())@plt>:
  4010c0:	ff 25 9a 4f 00 00    	jmpq   *0x4f9a(%rip)        # 406060 <std::thread::_M_start_thread(std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> >, void (*)())@GLIBCXX_3.4.22>
  4010c6:	68 09 00 00 00       	pushq  $0x9
  4010cb:	e9 50 ff ff ff       	jmpq   401020 <.plt>

00000000004010d0 <operator new(unsigned long)@plt>:
  4010d0:	ff 25 92 4f 00 00    	jmpq   *0x4f92(%rip)        # 406068 <operator new(unsigned long)@GLIBCXX_3.4>
  4010d6:	68 0a 00 00 00       	pushq  $0xa
  4010db:	e9 40 ff ff ff       	jmpq   401020 <.plt>

00000000004010e0 <operator delete(void*, unsigned long)@plt>:
  4010e0:	ff 25 8a 4f 00 00    	jmpq   *0x4f8a(%rip)        # 406070 <operator delete(void*, unsigned long)@CXXABI_1.3.9>
  4010e6:	68 0b 00 00 00       	pushq  $0xb
  4010eb:	e9 30 ff ff ff       	jmpq   401020 <.plt>

00000000004010f0 <std::ostream::operator<<(std::ostream& (*)(std::ostream&))@plt>:
  4010f0:	ff 25 82 4f 00 00    	jmpq   *0x4f82(%rip)        # 406078 <std::ostream::operator<<(std::ostream& (*)(std::ostream&))@GLIBCXX_3.4>
  4010f6:	68 0c 00 00 00       	pushq  $0xc
  4010fb:	e9 20 ff ff ff       	jmpq   401020 <.plt>

0000000000401100 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char)@plt>:
  401100:	ff 25 7a 4f 00 00    	jmpq   *0x4f7a(%rip)        # 406080 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char)@GLIBCXX_3.4>
  401106:	68 0d 00 00 00       	pushq  $0xd
  40110b:	e9 10 ff ff ff       	jmpq   401020 <.plt>

0000000000401110 <pthread_mutex_lock@plt>:
  401110:	ff 25 72 4f 00 00    	jmpq   *0x4f72(%rip)        # 406088 <pthread_mutex_lock@GLIBC_2.2.5>
  401116:	68 0e 00 00 00       	pushq  $0xe
  40111b:	e9 00 ff ff ff       	jmpq   401020 <.plt>

0000000000401120 <std::ios_base::Init::Init()@plt>:
  401120:	ff 25 6a 4f 00 00    	jmpq   *0x4f6a(%rip)        # 406090 <std::ios_base::Init::Init()@GLIBCXX_3.4>
  401126:	68 0f 00 00 00       	pushq  $0xf
  40112b:	e9 f0 fe ff ff       	jmpq   401020 <.plt>

0000000000401130 <__gxx_personality_v0@plt>:
  401130:	ff 25 62 4f 00 00    	jmpq   *0x4f62(%rip)        # 406098 <__gxx_personality_v0@CXXABI_1.3>
  401136:	68 10 00 00 00       	pushq  $0x10
  40113b:	e9 e0 fe ff ff       	jmpq   401020 <.plt>

0000000000401140 <__pthread_key_create@plt>:
  401140:	ff 25 5a 4f 00 00    	jmpq   *0x4f5a(%rip)        # 4060a0 <__pthread_key_create@GLIBC_2.2.5>
  401146:	68 11 00 00 00       	pushq  $0x11
  40114b:	e9 d0 fe ff ff       	jmpq   401020 <.plt>

0000000000401150 <std::thread::join()@plt>:
  401150:	ff 25 52 4f 00 00    	jmpq   *0x4f52(%rip)        # 4060a8 <std::thread::join()@GLIBCXX_3.4.11>
  401156:	68 12 00 00 00       	pushq  $0x12
  40115b:	e9 c0 fe ff ff       	jmpq   401020 <.plt>

0000000000401160 <_Unwind_Resume@plt>:
  401160:	ff 25 4a 4f 00 00    	jmpq   *0x4f4a(%rip)        # 4060b0 <_Unwind_Resume@GCC_3.0>
  401166:	68 13 00 00 00       	pushq  $0x13
  40116b:	e9 b0 fe ff ff       	jmpq   401020 <.plt>

0000000000401170 <std::ios_base::Init::~Init()@plt>:
  401170:	ff 25 42 4f 00 00    	jmpq   *0x4f42(%rip)        # 4060b8 <std::ios_base::Init::~Init()@GLIBCXX_3.4>
  401176:	68 14 00 00 00       	pushq  $0x14
  40117b:	e9 a0 fe ff ff       	jmpq   401020 <.plt>

Desensamblado de la sección .text:

0000000000401180 <std::thread::thread<void (&)(), , void>(void (&)()) [clone .constprop.0] [clone .cold]>:
  401180:	48 8d 7c 24 08       	lea    0x8(%rsp),%rdi
  401185:	c5 f8 77             	vzeroupper 
  401188:	e8 b3 0d 00 00       	callq  401f40 <std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> >::~unique_ptr()>
  40118d:	48 89 ef             	mov    %rbp,%rdi
  401190:	e8 cb ff ff ff       	callq  401160 <_Unwind_Resume@plt>
  401195:	90                   	nop

0000000000401196 <std::thread::thread<void (&)(), , void>(void (&)()) [clone .constprop.1] [clone .cold]>:
  401196:	48 8d 7c 24 08       	lea    0x8(%rsp),%rdi
  40119b:	c5 f8 77             	vzeroupper 
  40119e:	e8 9d 0d 00 00       	callq  401f40 <std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> >::~unique_ptr()>
  4011a3:	48 89 ef             	mov    %rbp,%rdi
  4011a6:	e8 b5 ff ff ff       	callq  401160 <_Unwind_Resume@plt>

00000000004011ab <main.cold>:
  4011ab:	48 8d 9c 24 b0 00 00 	lea    0xb0(%rsp),%rbx
  4011b2:	00 
  4011b3:	c5 f8 77             	vzeroupper 
  4011b6:	48 83 eb 08          	sub    $0x8,%rbx
  4011ba:	48 89 df             	mov    %rbx,%rdi
  4011bd:	e8 ce 06 00 00       	callq  401890 <std::thread::~thread()>
  4011c2:	4c 39 e3             	cmp    %r12,%rbx
  4011c5:	75 ef                	jne    4011b6 <main.cold+0xb>
  4011c7:	48 83 eb 08          	sub    $0x8,%rbx
  4011cb:	48 89 df             	mov    %rbx,%rdi
  4011ce:	e8 bd 06 00 00       	callq  401890 <std::thread::~thread()>
  4011d3:	48 39 eb             	cmp    %rbp,%rbx
  4011d6:	75 ef                	jne    4011c7 <main.cold+0x1c>
  4011d8:	4c 89 ef             	mov    %r13,%rdi
  4011db:	e8 80 ff ff ff       	callq  401160 <_Unwind_Resume@plt>

00000000004011e0 <__static_initialization_and_destruction_0(int, int) [clone .constprop.0]>:
  4011e0:	48 83 ec 08          	sub    $0x8,%rsp
  4011e4:	bf 68 62 40 00       	mov    $0x406268,%edi
  4011e9:	e8 32 ff ff ff       	callq  401120 <std::ios_base::Init::Init()@plt>
  4011ee:	ba 08 30 40 00       	mov    $0x403008,%edx
  4011f3:	be 68 62 40 00       	mov    $0x406268,%esi
  4011f8:	bf 70 11 40 00       	mov    $0x401170,%edi
  4011fd:	48 83 c4 08          	add    $0x8,%rsp
  401201:	e9 aa fe ff ff       	jmpq   4010b0 <__cxa_atexit@plt>
  401206:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  40120d:	00 00 00 

0000000000401210 <main>:
  401210:	41 56                	push   %r14
  401212:	41 55                	push   %r13
  401214:	41 54                	push   %r12
  401216:	55                   	push   %rbp
  401217:	53                   	push   %rbx
  401218:	48 81 ec b0 00 00 00 	sub    $0xb0,%rsp
  40121f:	48 8d 6c 24 30       	lea    0x30(%rsp),%rbp
  401224:	4c 8d 64 24 70       	lea    0x70(%rsp),%r12
  401229:	48 89 eb             	mov    %rbp,%rbx
  40122c:	0f 1f 40 00          	nopl   0x0(%rax)
  401230:	48 89 df             	mov    %rbx,%rdi
  401233:	48 83 c3 08          	add    $0x8,%rbx
  401237:	e8 74 06 00 00       	callq  4018b0 <std::thread::thread()>
  40123c:	4c 39 e3             	cmp    %r12,%rbx
  40123f:	75 ef                	jne    401230 <main+0x20>
  401241:	4c 8d ac 24 b0 00 00 	lea    0xb0(%rsp),%r13
  401248:	00 
  401249:	4c 89 e3             	mov    %r12,%rbx
  40124c:	0f 1f 40 00          	nopl   0x0(%rax)
  401250:	48 89 df             	mov    %rbx,%rdi
  401253:	48 83 c3 08          	add    $0x8,%rbx
  401257:	e8 54 06 00 00       	callq  4018b0 <std::thread::thread()>
  40125c:	4c 39 eb             	cmp    %r13,%rbx
  40125f:	75 ef                	jne    401250 <main+0x40>
  401261:	48 8d 7c 24 08       	lea    0x8(%rsp),%rdi
  401266:	49 89 ee             	mov    %rbp,%r14
  401269:	4c 89 e3             	mov    %r12,%rbx
  40126c:	e8 cf 0a 00 00       	callq  401d40 <std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>::linear_congruential_engine()>
  401271:	eb 54                	jmp    4012c7 <main+0xb7>
  401273:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  401278:	48 8d 7c 24 10       	lea    0x10(%rsp),%rdi
  40127d:	e8 16 05 00 00       	callq  401798 <std::thread::thread<void (&)(), , void>(void (&)()) [clone .constprop.1]>
  401282:	48 8d 74 24 10       	lea    0x10(%rsp),%rsi
  401287:	4c 89 f7             	mov    %r14,%rdi
  40128a:	e8 b1 07 00 00       	callq  401a40 <std::thread::operator=(std::thread&&)>
  40128f:	48 8d 7c 24 10       	lea    0x10(%rsp),%rdi
  401294:	e8 f7 05 00 00       	callq  401890 <std::thread::~thread()>
  401299:	48 8d 7c 24 18       	lea    0x18(%rsp),%rdi
  40129e:	e8 95 04 00 00       	callq  401738 <std::thread::thread<void (&)(), , void>(void (&)()) [clone .constprop.0]>
  4012a3:	48 89 df             	mov    %rbx,%rdi
  4012a6:	48 8d 74 24 18       	lea    0x18(%rsp),%rsi
  4012ab:	48 83 c3 08          	add    $0x8,%rbx
  4012af:	e8 8c 07 00 00       	callq  401a40 <std::thread::operator=(std::thread&&)>
  4012b4:	48 8d 7c 24 18       	lea    0x18(%rsp),%rdi
  4012b9:	49 83 c6 08          	add    $0x8,%r14
  4012bd:	e8 ce 05 00 00       	callq  401890 <std::thread::~thread()>
  4012c2:	4c 39 eb             	cmp    %r13,%rbx
  4012c5:	74 5d                	je     401324 <main+0x114>
  4012c7:	48 8d 7c 24 08       	lea    0x8(%rsp),%rdi
  4012cc:	e8 4f 04 00 00       	callq  401720 <std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>::operator()() [clone .isra.0]>
  4012d1:	a8 01                	test   $0x1,%al
  4012d3:	75 a3                	jne    401278 <main+0x68>
  4012d5:	48 8d 7c 24 20       	lea    0x20(%rsp),%rdi
  4012da:	e8 59 04 00 00       	callq  401738 <std::thread::thread<void (&)(), , void>(void (&)()) [clone .constprop.0]>
  4012df:	48 8d 74 24 20       	lea    0x20(%rsp),%rsi
  4012e4:	48 89 df             	mov    %rbx,%rdi
  4012e7:	e8 54 07 00 00       	callq  401a40 <std::thread::operator=(std::thread&&)>
  4012ec:	48 8d 7c 24 20       	lea    0x20(%rsp),%rdi
  4012f1:	e8 9a 05 00 00       	callq  401890 <std::thread::~thread()>
  4012f6:	48 8d 7c 24 28       	lea    0x28(%rsp),%rdi
  4012fb:	e8 98 04 00 00       	callq  401798 <std::thread::thread<void (&)(), , void>(void (&)()) [clone .constprop.1]>
  401300:	4c 89 f7             	mov    %r14,%rdi
  401303:	48 8d 74 24 28       	lea    0x28(%rsp),%rsi
  401308:	48 83 c3 08          	add    $0x8,%rbx
  40130c:	e8 2f 07 00 00       	callq  401a40 <std::thread::operator=(std::thread&&)>
  401311:	48 8d 7c 24 28       	lea    0x28(%rsp),%rdi
  401316:	49 83 c6 08          	add    $0x8,%r14
  40131a:	e8 71 05 00 00       	callq  401890 <std::thread::~thread()>
  40131f:	4c 39 eb             	cmp    %r13,%rbx
  401322:	75 a3                	jne    4012c7 <main+0xb7>
  401324:	e8 f7 07 00 00       	callq  401b20 <std::chrono::duration<long, std::ratio<1l, 1l> > std::literals::chrono_literals::operator"" s<(char)49>()>
  401329:	48 8d 7c 24 28       	lea    0x28(%rsp),%rdi
  40132e:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  401333:	e8 38 08 00 00       	callq  401b70 <void std::this_thread::sleep_for<long, std::ratio<1l, 1l> >(std::chrono::duration<long, std::ratio<1l, 1l> > const&)>
  401338:	31 f6                	xor    %esi,%esi
  40133a:	bf c4 60 40 00       	mov    $0x4060c4,%edi
  40133f:	48 89 eb             	mov    %rbp,%rbx
  401342:	e8 89 05 00 00       	callq  4018d0 <std::atomic<bool>::operator=(bool)>
  401347:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  40134e:	00 00 
  401350:	48 89 df             	mov    %rbx,%rdi
  401353:	e8 f8 fd ff ff       	callq  401150 <std::thread::join()@plt>
  401358:	48 83 c3 08          	add    $0x8,%rbx
  40135c:	4c 39 e3             	cmp    %r12,%rbx
  40135f:	75 ef                	jne    401350 <main+0x140>
  401361:	4c 89 e3             	mov    %r12,%rbx
  401364:	0f 1f 40 00          	nopl   0x0(%rax)
  401368:	48 89 df             	mov    %rbx,%rdi
  40136b:	e8 e0 fd ff ff       	callq  401150 <std::thread::join()@plt>
  401370:	48 83 c3 08          	add    $0x8,%rbx
  401374:	4c 39 eb             	cmp    %r13,%rbx
  401377:	75 ef                	jne    401368 <main+0x158>
  401379:	48 8d 9c 24 a8 00 00 	lea    0xa8(%rsp),%rbx
  401380:	00 
  401381:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  401388:	48 89 df             	mov    %rbx,%rdi
  40138b:	e8 00 05 00 00       	callq  401890 <std::thread::~thread()>
  401390:	48 89 d8             	mov    %rbx,%rax
  401393:	48 83 eb 08          	sub    $0x8,%rbx
  401397:	4c 39 e0             	cmp    %r12,%rax
  40139a:	75 ec                	jne    401388 <main+0x178>
  40139c:	48 8d 5c 24 68       	lea    0x68(%rsp),%rbx
  4013a1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  4013a8:	48 89 df             	mov    %rbx,%rdi
  4013ab:	e8 e0 04 00 00       	callq  401890 <std::thread::~thread()>
  4013b0:	48 89 d8             	mov    %rbx,%rax
  4013b3:	48 83 eb 08          	sub    $0x8,%rbx
  4013b7:	48 39 e8             	cmp    %rbp,%rax
  4013ba:	75 ec                	jne    4013a8 <main+0x198>
  4013bc:	48 81 c4 b0 00 00 00 	add    $0xb0,%rsp
  4013c3:	31 c0                	xor    %eax,%eax
  4013c5:	5b                   	pop    %rbx
  4013c6:	5d                   	pop    %rbp
  4013c7:	41 5c                	pop    %r12
  4013c9:	41 5d                	pop    %r13
  4013cb:	41 5e                	pop    %r14
  4013cd:	c3                   	retq   
  4013ce:	49 89 c5             	mov    %rax,%r13
  4013d1:	e9 d5 fd ff ff       	jmpq   4011ab <main.cold>
  4013d6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4013dd:	00 00 00 

00000000004013e0 <_GLOBAL__sub_I_run>:
  4013e0:	e9 fb fd ff ff       	jmpq   4011e0 <__static_initialization_and_destruction_0(int, int) [clone .constprop.0]>

00000000004013e5 <.annobin_init.c.hot>:
  4013e5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4013ec:	00 00 00 
  4013ef:	90                   	nop

00000000004013f0 <_start>:
  4013f0:	f3 0f 1e fa          	endbr64 
  4013f4:	31 ed                	xor    %ebp,%ebp
  4013f6:	49 89 d1             	mov    %rdx,%r9
  4013f9:	5e                   	pop    %rsi
  4013fa:	48 89 e2             	mov    %rsp,%rdx
  4013fd:	48 83 e4 f0          	and    $0xfffffffffffffff0,%rsp
  401401:	50                   	push   %rax
  401402:	54                   	push   %rsp
  401403:	49 c7 c0 a0 20 40 00 	mov    $0x4020a0,%r8
  40140a:	48 c7 c1 30 20 40 00 	mov    $0x402030,%rcx
  401411:	48 c7 c7 10 12 40 00 	mov    $0x401210,%rdi
  401418:	ff 15 c2 4b 00 00    	callq  *0x4bc2(%rip)        # 405fe0 <__libc_start_main@GLIBC_2.2.5>
  40141e:	f4                   	hlt    

000000000040141f <.annobin_init.c>:
  40141f:	90                   	nop

0000000000401420 <_dl_relocate_static_pie>:
  401420:	f3 0f 1e fa          	endbr64 
  401424:	c3                   	retq   

0000000000401425 <.annobin_static_reloc.c_end>:
  401425:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  40142c:	00 00 00 
  40142f:	90                   	nop

0000000000401430 <deregister_tm_clones>:
  401430:	b8 c8 60 40 00       	mov    $0x4060c8,%eax
  401435:	48 3d c8 60 40 00    	cmp    $0x4060c8,%rax
  40143b:	74 13                	je     401450 <deregister_tm_clones+0x20>
  40143d:	b8 00 00 00 00       	mov    $0x0,%eax
  401442:	48 85 c0             	test   %rax,%rax
  401445:	74 09                	je     401450 <deregister_tm_clones+0x20>
  401447:	bf c8 60 40 00       	mov    $0x4060c8,%edi
  40144c:	ff e0                	jmpq   *%rax
  40144e:	66 90                	xchg   %ax,%ax
  401450:	c3                   	retq   
  401451:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
  401458:	00 00 00 00 
  40145c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000401460 <register_tm_clones>:
  401460:	be c8 60 40 00       	mov    $0x4060c8,%esi
  401465:	48 81 ee c8 60 40 00 	sub    $0x4060c8,%rsi
  40146c:	48 89 f0             	mov    %rsi,%rax
  40146f:	48 c1 ee 3f          	shr    $0x3f,%rsi
  401473:	48 c1 f8 03          	sar    $0x3,%rax
  401477:	48 01 c6             	add    %rax,%rsi
  40147a:	48 d1 fe             	sar    %rsi
  40147d:	74 11                	je     401490 <register_tm_clones+0x30>
  40147f:	b8 00 00 00 00       	mov    $0x0,%eax
  401484:	48 85 c0             	test   %rax,%rax
  401487:	74 07                	je     401490 <register_tm_clones+0x30>
  401489:	bf c8 60 40 00       	mov    $0x4060c8,%edi
  40148e:	ff e0                	jmpq   *%rax
  401490:	c3                   	retq   
  401491:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
  401498:	00 00 00 00 
  40149c:	0f 1f 40 00          	nopl   0x0(%rax)

00000000004014a0 <__do_global_dtors_aux>:
  4014a0:	f3 0f 1e fa          	endbr64 
  4014a4:	80 3d 45 4d 00 00 00 	cmpb   $0x0,0x4d45(%rip)        # 4061f0 <completed.7383>
  4014ab:	75 13                	jne    4014c0 <__do_global_dtors_aux+0x20>
  4014ad:	55                   	push   %rbp
  4014ae:	48 89 e5             	mov    %rsp,%rbp
  4014b1:	e8 7a ff ff ff       	callq  401430 <deregister_tm_clones>
  4014b6:	c6 05 33 4d 00 00 01 	movb   $0x1,0x4d33(%rip)        # 4061f0 <completed.7383>
  4014bd:	5d                   	pop    %rbp
  4014be:	c3                   	retq   
  4014bf:	90                   	nop
  4014c0:	c3                   	retq   
  4014c1:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
  4014c8:	00 00 00 00 
  4014cc:	0f 1f 40 00          	nopl   0x0(%rax)

00000000004014d0 <frame_dummy>:
  4014d0:	f3 0f 1e fa          	endbr64 
  4014d4:	eb 8a                	jmp    401460 <register_tm_clones>
  4014d6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4014dd:	00 00 00 

00000000004014e0 <__gthread_active_p()>:
  4014e0:	b8 40 11 40 00       	mov    $0x401140,%eax
  4014e5:	48 85 c0             	test   %rax,%rax
  4014e8:	0f 95 c0             	setne  %al
  4014eb:	0f b6 c0             	movzbl %al,%eax
  4014ee:	c3                   	retq   
  4014ef:	90                   	nop

00000000004014f0 <__gthread_mutex_lock(pthread_mutex_t*)>:
  4014f0:	48 83 ec 08          	sub    $0x8,%rsp
  4014f4:	e8 e7 ff ff ff       	callq  4014e0 <__gthread_active_p()>
  4014f9:	85 c0                	test   %eax,%eax
  4014fb:	75 0b                	jne    401508 <__gthread_mutex_lock(pthread_mutex_t*)+0x18>
  4014fd:	31 c0                	xor    %eax,%eax
  4014ff:	48 83 c4 08          	add    $0x8,%rsp
  401503:	c3                   	retq   
  401504:	0f 1f 40 00          	nopl   0x0(%rax)
  401508:	48 83 c4 08          	add    $0x8,%rsp
  40150c:	e9 ff fb ff ff       	jmpq   401110 <pthread_mutex_lock@plt>
  401511:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000401518 <__gthread_mutex_unlock(pthread_mutex_t*)>:
  401518:	48 83 ec 08          	sub    $0x8,%rsp
  40151c:	e8 bf ff ff ff       	callq  4014e0 <__gthread_active_p()>
  401521:	85 c0                	test   %eax,%eax
  401523:	75 0b                	jne    401530 <__gthread_mutex_unlock(pthread_mutex_t*)+0x18>
  401525:	31 c0                	xor    %eax,%eax
  401527:	48 83 c4 08          	add    $0x8,%rsp
  40152b:	c3                   	retq   
  40152c:	0f 1f 40 00          	nopl   0x0(%rax)
  401530:	48 83 c4 08          	add    $0x8,%rsp
  401534:	e9 67 fb ff ff       	jmpq   4010a0 <pthread_mutex_unlock@plt>
  401539:	90                   	nop
  40153a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000401540 <std::chrono::duration<long, std::ratio<1l, 1000000000l> >::count() const [clone .isra.0]>:
  401540:	48 89 f8             	mov    %rdi,%rax
  401543:	c3                   	retq   
  401544:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000401548 <seccion_critica(char) [clone .constprop.0]>:
  401548:	53                   	push   %rbx
  401549:	bb 30 00 00 00       	mov    $0x30,%ebx
  40154e:	66 90                	xchg   %ax,%ax
  401550:	89 de                	mov    %ebx,%esi
  401552:	bf e0 60 40 00       	mov    $0x4060e0,%edi
  401557:	ff c3                	inc    %ebx
  401559:	e8 a2 fb ff ff       	callq  401100 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char)@plt>
  40155e:	83 fb 3a             	cmp    $0x3a,%ebx
  401561:	75 ed                	jne    401550 <seccion_critica(char) [clone .constprop.0]+0x8>
  401563:	be 70 10 40 00       	mov    $0x401070,%esi
  401568:	bf e0 60 40 00       	mov    $0x4060e0,%edi
  40156d:	5b                   	pop    %rbx
  40156e:	e9 7d fb ff ff       	jmpq   4010f0 <std::ostream::operator<<(std::ostream& (*)(std::ostream&))@plt>
  401573:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000401578 <seccion_critica(char) [clone .constprop.1]>:
  401578:	53                   	push   %rbx
  401579:	bb 61 00 00 00       	mov    $0x61,%ebx
  40157e:	66 90                	xchg   %ax,%ax
  401580:	89 de                	mov    %ebx,%esi
  401582:	bf e0 60 40 00       	mov    $0x4060e0,%edi
  401587:	ff c3                	inc    %ebx
  401589:	e8 72 fb ff ff       	callq  401100 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char)@plt>
  40158e:	83 fb 6b             	cmp    $0x6b,%ebx
  401591:	75 ed                	jne    401580 <seccion_critica(char) [clone .constprop.1]+0x8>
  401593:	be 70 10 40 00       	mov    $0x401070,%esi
  401598:	bf e0 60 40 00       	mov    $0x4060e0,%edi
  40159d:	5b                   	pop    %rbx
  40159e:	e9 4d fb ff ff       	jmpq   4010f0 <std::ostream::operator<<(std::ostream& (*)(std::ostream&))@plt>
  4015a3:	90                   	nop
  4015a4:	0f 1f 40 00          	nopl   0x0(%rax)

00000000004015a8 <std::mutex::unlock() [clone .constprop.0]>:
  4015a8:	bf 40 62 40 00       	mov    $0x406240,%edi
  4015ad:	e9 66 ff ff ff       	jmpq   401518 <__gthread_mutex_unlock(pthread_mutex_t*)>
  4015b2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

00000000004015b8 <std::mutex::unlock() [clone .constprop.1]>:
  4015b8:	bf 00 62 40 00       	mov    $0x406200,%edi
  4015bd:	e9 56 ff ff ff       	jmpq   401518 <__gthread_mutex_unlock(pthread_mutex_t*)>
  4015c2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

00000000004015c8 <std::mutex::lock() [clone .constprop.0]>:
  4015c8:	48 83 ec 08          	sub    $0x8,%rsp
  4015cc:	bf 40 62 40 00       	mov    $0x406240,%edi
  4015d1:	e8 1a ff ff ff       	callq  4014f0 <__gthread_mutex_lock(pthread_mutex_t*)>
  4015d6:	85 c0                	test   %eax,%eax
  4015d8:	75 05                	jne    4015df <std::mutex::lock() [clone .constprop.0]+0x17>
  4015da:	48 83 c4 08          	add    $0x8,%rsp
  4015de:	c3                   	retq   
  4015df:	89 c7                	mov    %eax,%edi
  4015e1:	e8 aa fa ff ff       	callq  401090 <std::__throw_system_error(int)@plt>
  4015e6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4015ed:	00 00 00 

00000000004015f0 <std::mutex::lock() [clone .constprop.1]>:
  4015f0:	48 83 ec 08          	sub    $0x8,%rsp
  4015f4:	bf 00 62 40 00       	mov    $0x406200,%edi
  4015f9:	e8 f2 fe ff ff       	callq  4014f0 <__gthread_mutex_lock(pthread_mutex_t*)>
  4015fe:	85 c0                	test   %eax,%eax
  401600:	75 05                	jne    401607 <std::mutex::lock() [clone .constprop.1]+0x17>
  401602:	48 83 c4 08          	add    $0x8,%rsp
  401606:	c3                   	retq   
  401607:	89 c7                	mov    %eax,%edi
  401609:	e8 82 fa ff ff       	callq  401090 <std::__throw_system_error(int)@plt>
  40160e:	66 90                	xchg   %ax,%ax

0000000000401610 <std::atomic<bool>::operator bool() const [clone .constprop.0]>:
  401610:	0f b6 05 ad 4a 00 00 	movzbl 0x4aad(%rip),%eax        # 4060c4 <run>
  401617:	84 c0                	test   %al,%al
  401619:	0f 95 c0             	setne  %al
  40161c:	c3                   	retq   
  40161d:	0f 1f 00             	nopl   (%rax)

0000000000401620 <lector()>:
  401620:	48 83 ec 08          	sub    $0x8,%rsp
  401624:	eb 07                	jmp    40162d <lector()+0xd>
  401626:	66 90                	xchg   %ax,%ax
  401628:	e8 7b ff ff ff       	callq  4015a8 <std::mutex::unlock() [clone .constprop.0]>
  40162d:	e8 de ff ff ff       	callq  401610 <std::atomic<bool>::operator bool() const [clone .constprop.0]>
  401632:	84 c0                	test   %al,%al
  401634:	74 42                	je     401678 <lector()+0x58>
  401636:	e8 8d ff ff ff       	callq  4015c8 <std::mutex::lock() [clone .constprop.0]>
  40163b:	8b 05 e7 4b 00 00    	mov    0x4be7(%rip),%eax        # 406228 <leyendo>
  401641:	ff c0                	inc    %eax
  401643:	89 05 df 4b 00 00    	mov    %eax,0x4bdf(%rip)        # 406228 <leyendo>
  401649:	83 f8 01             	cmp    $0x1,%eax
  40164c:	74 22                	je     401670 <lector()+0x50>
  40164e:	e8 55 ff ff ff       	callq  4015a8 <std::mutex::unlock() [clone .constprop.0]>
  401653:	e8 f0 fe ff ff       	callq  401548 <seccion_critica(char) [clone .constprop.0]>
  401658:	e8 6b ff ff ff       	callq  4015c8 <std::mutex::lock() [clone .constprop.0]>
  40165d:	ff 0d c5 4b 00 00    	decl   0x4bc5(%rip)        # 406228 <leyendo>
  401663:	75 c3                	jne    401628 <lector()+0x8>
  401665:	e8 4e ff ff ff       	callq  4015b8 <std::mutex::unlock() [clone .constprop.1]>
  40166a:	eb bc                	jmp    401628 <lector()+0x8>
  40166c:	0f 1f 40 00          	nopl   0x0(%rax)
  401670:	e8 7b ff ff ff       	callq  4015f0 <std::mutex::lock() [clone .constprop.1]>
  401675:	eb d7                	jmp    40164e <lector()+0x2e>
  401677:	90                   	nop
  401678:	48 83 c4 08          	add    $0x8,%rsp
  40167c:	c3                   	retq   
  40167d:	0f 1f 00             	nopl   (%rax)

0000000000401680 <escritor()>:
  401680:	48 83 ec 08          	sub    $0x8,%rsp
  401684:	eb 11                	jmp    401697 <escritor()+0x17>
  401686:	66 90                	xchg   %ax,%ax
  401688:	e8 63 ff ff ff       	callq  4015f0 <std::mutex::lock() [clone .constprop.1]>
  40168d:	e8 e6 fe ff ff       	callq  401578 <seccion_critica(char) [clone .constprop.1]>
  401692:	e8 21 ff ff ff       	callq  4015b8 <std::mutex::unlock() [clone .constprop.1]>
  401697:	e8 74 ff ff ff       	callq  401610 <std::atomic<bool>::operator bool() const [clone .constprop.0]>
  40169c:	84 c0                	test   %al,%al
  40169e:	75 e8                	jne    401688 <escritor()+0x8>
  4016a0:	48 83 c4 08          	add    $0x8,%rsp
  4016a4:	c3                   	retq   
  4016a5:	90                   	nop
  4016a6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4016ad:	00 00 00 

00000000004016b0 <std::thread::joinable() const [clone .isra.0]>:
  4016b0:	53                   	push   %rbx
  4016b1:	48 89 fb             	mov    %rdi,%rbx
  4016b4:	48 83 ec 10          	sub    $0x10,%rsp
  4016b8:	48 8d 7c 24 08       	lea    0x8(%rsp),%rdi
  4016bd:	e8 ae 01 00 00       	callq  401870 <std::thread::id::id()>
  4016c2:	48 8b 3b             	mov    (%rbx),%rdi
  4016c5:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
  4016ca:	e8 b1 01 00 00       	callq  401880 <std::operator==(std::thread::id, std::thread::id)>
  4016cf:	48 83 c4 10          	add    $0x10,%rsp
  4016d3:	5b                   	pop    %rbx
  4016d4:	83 f0 01             	xor    $0x1,%eax
  4016d7:	c3                   	retq   
  4016d8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  4016df:	00 

00000000004016e0 <seccion_critica(char)>:
  4016e0:	41 54                	push   %r12
  4016e2:	55                   	push   %rbp
  4016e3:	89 fd                	mov    %edi,%ebp
  4016e5:	83 c7 0a             	add    $0xa,%edi
  4016e8:	53                   	push   %rbx
  4016e9:	44 0f b6 e7          	movzbl %dil,%r12d
  4016ed:	0f 1f 00             	nopl   (%rax)
  4016f0:	8d 5d 01             	lea    0x1(%rbp),%ebx
  4016f3:	40 0f be f5          	movsbl %bpl,%esi
  4016f7:	bf e0 60 40 00       	mov    $0x4060e0,%edi
  4016fc:	89 dd                	mov    %ebx,%ebp
  4016fe:	0f b6 db             	movzbl %bl,%ebx
  401701:	e8 fa f9 ff ff       	callq  401100 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char)@plt>
  401706:	66 41 39 dc          	cmp    %bx,%r12w
  40170a:	75 e4                	jne    4016f0 <seccion_critica(char)+0x10>
  40170c:	5b                   	pop    %rbx
  40170d:	be 70 10 40 00       	mov    $0x401070,%esi
  401712:	bf e0 60 40 00       	mov    $0x4060e0,%edi
  401717:	5d                   	pop    %rbp
  401718:	41 5c                	pop    %r12
  40171a:	e9 d1 f9 ff ff       	jmpq   4010f0 <std::ostream::operator<<(std::ostream& (*)(std::ostream&))@plt>
  40171f:	90                   	nop

0000000000401720 <std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>::operator()() [clone .isra.0]>:
  401720:	53                   	push   %rbx
  401721:	48 89 fb             	mov    %rdi,%rbx
  401724:	48 8b 3f             	mov    (%rdi),%rdi
  401727:	e8 34 05 00 00       	callq  401c60 <unsigned long std::__detail::__mod<unsigned long, 2147483647ul, 16807ul, 0ul>(unsigned long)>
  40172c:	48 89 03             	mov    %rax,(%rbx)
  40172f:	5b                   	pop    %rbx
  401730:	c3                   	retq   
  401731:	90                   	nop
  401732:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000401738 <std::thread::thread<void (&)(), , void>(void (&)()) [clone .constprop.0]>:
  401738:	55                   	push   %rbp
  401739:	48 89 fd             	mov    %rdi,%rbp
  40173c:	48 83 ec 10          	sub    $0x10,%rsp
  401740:	e8 2b 01 00 00       	callq  401870 <std::thread::id::id()>
  401745:	bf 80 16 40 00       	mov    $0x401680,%edi
  40174a:	e8 31 03 00 00       	callq  401a80 <void (&std::forward<void (&)()>(std::remove_reference<void (&)()>::type&))()>
  40174f:	48 89 e7             	mov    %rsp,%rdi
  401752:	48 89 c6             	mov    %rax,%rsi
  401755:	e8 66 03 00 00       	callq  401ac0 <std::thread::_Invoker<std::tuple<std::decay<void (&)()>::type> > std::thread::__make_invoker<void (&)()>(void (&)())>
  40175a:	48 89 e6             	mov    %rsp,%rsi
  40175d:	48 8d 7c 24 08       	lea    0x8(%rsp),%rdi
  401762:	e8 99 07 00 00       	callq  401f00 <std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> > std::thread::_S_make_state<std::thread::_Invoker<std::tuple<void (*)()> > >(std::thread::_Invoker<std::tuple<void (*)()> >&&)>
  401767:	ba 80 10 40 00       	mov    $0x401080,%edx
  40176c:	48 8d 74 24 08       	lea    0x8(%rsp),%rsi
  401771:	48 89 ef             	mov    %rbp,%rdi
  401774:	e8 47 f9 ff ff       	callq  4010c0 <std::thread::_M_start_thread(std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> >, void (*)())@plt>
  401779:	48 8d 7c 24 08       	lea    0x8(%rsp),%rdi
  40177e:	e8 bd 07 00 00       	callq  401f40 <std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> >::~unique_ptr()>
  401783:	48 83 c4 10          	add    $0x10,%rsp
  401787:	5d                   	pop    %rbp
  401788:	c3                   	retq   
  401789:	48 89 c5             	mov    %rax,%rbp
  40178c:	e9 ef f9 ff ff       	jmpq   401180 <std::thread::thread<void (&)(), , void>(void (&)()) [clone .constprop.0] [clone .cold]>
  401791:	90                   	nop
  401792:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000401798 <std::thread::thread<void (&)(), , void>(void (&)()) [clone .constprop.1]>:
  401798:	55                   	push   %rbp
  401799:	48 89 fd             	mov    %rdi,%rbp
  40179c:	48 83 ec 10          	sub    $0x10,%rsp
  4017a0:	e8 cb 00 00 00       	callq  401870 <std::thread::id::id()>
  4017a5:	bf 20 16 40 00       	mov    $0x401620,%edi
  4017aa:	e8 d1 02 00 00       	callq  401a80 <void (&std::forward<void (&)()>(std::remove_reference<void (&)()>::type&))()>
  4017af:	48 89 e7             	mov    %rsp,%rdi
  4017b2:	48 89 c6             	mov    %rax,%rsi
  4017b5:	e8 06 03 00 00       	callq  401ac0 <std::thread::_Invoker<std::tuple<std::decay<void (&)()>::type> > std::thread::__make_invoker<void (&)()>(void (&)())>
  4017ba:	48 89 e6             	mov    %rsp,%rsi
  4017bd:	48 8d 7c 24 08       	lea    0x8(%rsp),%rdi
  4017c2:	e8 39 07 00 00       	callq  401f00 <std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> > std::thread::_S_make_state<std::thread::_Invoker<std::tuple<void (*)()> > >(std::thread::_Invoker<std::tuple<void (*)()> >&&)>
  4017c7:	ba 80 10 40 00       	mov    $0x401080,%edx
  4017cc:	48 8d 74 24 08       	lea    0x8(%rsp),%rsi
  4017d1:	48 89 ef             	mov    %rbp,%rdi
  4017d4:	e8 e7 f8 ff ff       	callq  4010c0 <std::thread::_M_start_thread(std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> >, void (*)())@plt>
  4017d9:	48 8d 7c 24 08       	lea    0x8(%rsp),%rdi
  4017de:	e8 5d 07 00 00       	callq  401f40 <std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> >::~unique_ptr()>
  4017e3:	48 83 c4 10          	add    $0x10,%rsp
  4017e7:	5d                   	pop    %rbp
  4017e8:	c3                   	retq   
  4017e9:	48 89 c5             	mov    %rax,%rbp
  4017ec:	e9 a5 f9 ff ff       	jmpq   401196 <std::thread::thread<void (&)(), , void>(void (&)()) [clone .constprop.1] [clone .cold]>
  4017f1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4017f8:	00 00 00 
  4017fb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000401800 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)()> > >::~_State_impl()>:
  401800:	48 c7 07 88 30 40 00 	movq   $0x403088,(%rdi)
  401807:	e9 54 f8 ff ff       	jmpq   401060 <std::thread::_State::~_State()@plt>
  40180c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000401810 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)()> > >::~_State_impl()>:
  401810:	55                   	push   %rbp
  401811:	48 89 fd             	mov    %rdi,%rbp
  401814:	e8 e7 ff ff ff       	callq  401800 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)()> > >::~_State_impl()>
  401819:	48 89 ef             	mov    %rbp,%rdi
  40181c:	be 10 00 00 00       	mov    $0x10,%esi
  401821:	5d                   	pop    %rbp
  401822:	e9 b9 f8 ff ff       	jmpq   4010e0 <operator delete(void*, unsigned long)@plt>
  401827:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  40182e:	00 00 

0000000000401830 <std::chrono::duration<long, std::ratio<1l, 1000000000l> >::duration<long, void>(long const&) [clone .isra.0]>:
  401830:	48 89 37             	mov    %rsi,(%rdi)
  401833:	c3                   	retq   
  401834:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  40183b:	00 00 00 
  40183e:	66 90                	xchg   %ax,%ax

0000000000401840 <std::default_delete<std::thread::_State>::operator()(std::thread::_State*) const [clone .isra.0]>:
  401840:	48 85 ff             	test   %rdi,%rdi
  401843:	74 0b                	je     401850 <std::default_delete<std::thread::_State>::operator()(std::thread::_State*) const [clone .isra.0]+0x10>
  401845:	48 8b 07             	mov    (%rdi),%rax
  401848:	ff 60 08             	jmpq   *0x8(%rax)
  40184b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  401850:	c3                   	retq   
  401851:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  401858:	00 00 00 
  40185b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000401860 <std::chrono::duration_values<long>::zero()>:
  401860:	31 c0                	xor    %eax,%eax
  401862:	c3                   	retq   
  401863:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  40186a:	00 00 00 
  40186d:	0f 1f 00             	nopl   (%rax)

0000000000401870 <std::thread::id::id()>:
  401870:	48 c7 07 00 00 00 00 	movq   $0x0,(%rdi)
  401877:	c3                   	retq   
  401878:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  40187f:	00 

0000000000401880 <std::operator==(std::thread::id, std::thread::id)>:
  401880:	48 39 f7             	cmp    %rsi,%rdi
  401883:	0f 94 c0             	sete   %al
  401886:	c3                   	retq   
  401887:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  40188e:	00 00 

0000000000401890 <std::thread::~thread()>:
  401890:	48 83 ec 08          	sub    $0x8,%rsp
  401894:	e8 17 fe ff ff       	callq  4016b0 <std::thread::joinable() const [clone .isra.0]>
  401899:	84 c0                	test   %al,%al
  40189b:	75 05                	jne    4018a2 <std::thread::~thread()+0x12>
  40189d:	48 83 c4 08          	add    $0x8,%rsp
  4018a1:	c3                   	retq   
  4018a2:	e8 99 f7 ff ff       	callq  401040 <std::terminate()@plt>
  4018a7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  4018ae:	00 00 

00000000004018b0 <std::thread::thread()>:
  4018b0:	e9 bb ff ff ff       	jmpq   401870 <std::thread::id::id()>
  4018b5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4018bc:	00 00 00 
  4018bf:	90                   	nop

00000000004018c0 <std::__atomic_base<bool>::operator=(bool)>:
  4018c0:	40 88 37             	mov    %sil,(%rdi)
  4018c3:	89 f0                	mov    %esi,%eax
  4018c5:	0f ae f0             	mfence 
  4018c8:	c3                   	retq   
  4018c9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

00000000004018d0 <std::atomic<bool>::operator=(bool)>:
  4018d0:	40 0f b6 f6          	movzbl %sil,%esi
  4018d4:	e9 e7 ff ff ff       	jmpq   4018c0 <std::__atomic_base<bool>::operator=(bool)>
  4018d9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

00000000004018e0 <std::chrono::duration<long, std::ratio<1l, 1l> >::duration<long, void>(long const&)>:
  4018e0:	48 8b 06             	mov    (%rsi),%rax
  4018e3:	48 89 07             	mov    %rax,(%rdi)
  4018e6:	c3                   	retq   
  4018e7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  4018ee:	00 00 

00000000004018f0 <std::chrono::duration<long, std::ratio<1l, 1l> >::zero()>:
  4018f0:	48 83 ec 18          	sub    $0x18,%rsp
  4018f4:	e8 67 ff ff ff       	callq  401860 <std::chrono::duration_values<long>::zero()>
  4018f9:	48 89 e6             	mov    %rsp,%rsi
  4018fc:	48 8d 7c 24 08       	lea    0x8(%rsp),%rdi
  401901:	48 89 04 24          	mov    %rax,(%rsp)
  401905:	e8 d6 ff ff ff       	callq  4018e0 <std::chrono::duration<long, std::ratio<1l, 1l> >::duration<long, void>(long const&)>
  40190a:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  40190f:	48 83 c4 18          	add    $0x18,%rsp
  401913:	c3                   	retq   
  401914:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  40191b:	00 00 00 
  40191e:	66 90                	xchg   %ax,%ax

0000000000401920 <bool std::chrono::operator< <long, std::ratio<1l, 1l>, long, std::ratio<1l, 1l> >(std::chrono::duration<long, std::ratio<1l, 1l> > const&, std::chrono::duration<long, std::ratio<1l, 1l> > const&)>:
  401920:	48 8b 3f             	mov    (%rdi),%rdi
  401923:	e8 18 fc ff ff       	callq  401540 <std::chrono::duration<long, std::ratio<1l, 1000000000l> >::count() const [clone .isra.0]>
  401928:	48 8b 3e             	mov    (%rsi),%rdi
  40192b:	48 89 c2             	mov    %rax,%rdx
  40192e:	e8 0d fc ff ff       	callq  401540 <std::chrono::duration<long, std::ratio<1l, 1000000000l> >::count() const [clone .isra.0]>
  401933:	48 39 c2             	cmp    %rax,%rdx
  401936:	0f 9c c0             	setl   %al
  401939:	c3                   	retq   
  40193a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000401940 <bool std::chrono::operator<=<long, std::ratio<1l, 1l>, long, std::ratio<1l, 1l> >(std::chrono::duration<long, std::ratio<1l, 1l> > const&, std::chrono::duration<long, std::ratio<1l, 1l> > const&)>:
  401940:	49 89 f8             	mov    %rdi,%r8
  401943:	48 83 ec 08          	sub    $0x8,%rsp
  401947:	48 89 f7             	mov    %rsi,%rdi
  40194a:	4c 89 c6             	mov    %r8,%rsi
  40194d:	e8 ce ff ff ff       	callq  401920 <bool std::chrono::operator< <long, std::ratio<1l, 1l>, long, std::ratio<1l, 1l> >(std::chrono::duration<long, std::ratio<1l, 1l> > const&, std::chrono::duration<long, std::ratio<1l, 1l> > const&)>
  401952:	48 83 c4 08          	add    $0x8,%rsp
  401956:	83 f0 01             	xor    $0x1,%eax
  401959:	c3                   	retq   
  40195a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000401960 <std::chrono::duration<long, std::ratio<1l, 1l> > std::chrono::__duration_cast_impl<std::chrono::duration<long, std::ratio<1l, 1l> >, std::ratio<1l, 1l>, long, true, true>::__cast<long, std::ratio<1l, 1l> >(std::chrono::duration<long, std::ratio<1l, 1l> > const&)>:
  401960:	48 83 ec 18          	sub    $0x18,%rsp
  401964:	48 8b 3f             	mov    (%rdi),%rdi
  401967:	e8 d4 fb ff ff       	callq  401540 <std::chrono::duration<long, std::ratio<1l, 1000000000l> >::count() const [clone .isra.0]>
  40196c:	48 89 e6             	mov    %rsp,%rsi
  40196f:	48 8d 7c 24 08       	lea    0x8(%rsp),%rdi
  401974:	48 89 04 24          	mov    %rax,(%rsp)
  401978:	e8 63 ff ff ff       	callq  4018e0 <std::chrono::duration<long, std::ratio<1l, 1l> >::duration<long, void>(long const&)>
  40197d:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  401982:	48 83 c4 18          	add    $0x18,%rsp
  401986:	c3                   	retq   
  401987:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  40198e:	00 00 

0000000000401990 <std::enable_if<std::chrono::__is_duration<std::chrono::duration<long, std::ratio<1l, 1l> > >::value, std::chrono::duration<long, std::ratio<1l, 1l> > >::type std::chrono::duration_cast<std::chrono::duration<long, std::ratio<1l, 1l> >, long, std::ratio<1l, 1l> >(std::chrono::duration<long, std::ratio<1l, 1l> > const&)>:
  401990:	e9 cb ff ff ff       	jmpq   401960 <std::chrono::duration<long, std::ratio<1l, 1l> > std::chrono::__duration_cast_impl<std::chrono::duration<long, std::ratio<1l, 1l> >, std::ratio<1l, 1l>, long, true, true>::__cast<long, std::ratio<1l, 1l> >(std::chrono::duration<long, std::ratio<1l, 1l> > const&)>
  401995:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  40199c:	00 00 00 
  40199f:	90                   	nop

00000000004019a0 <std::common_type<std::chrono::duration<long, std::ratio<1l, 1l> >, std::chrono::duration<long, std::ratio<1l, 1l> > >::type std::chrono::operator-<long, std::ratio<1l, 1l>, long, std::ratio<1l, 1l> >(std::chrono::duration<long, std::ratio<1l, 1l> > const&, std::chrono::duration<long, std::ratio<1l, 1l> > const&)>:
  4019a0:	48 83 ec 18          	sub    $0x18,%rsp
  4019a4:	48 8b 3f             	mov    (%rdi),%rdi
  4019a7:	e8 94 fb ff ff       	callq  401540 <std::chrono::duration<long, std::ratio<1l, 1000000000l> >::count() const [clone .isra.0]>
  4019ac:	48 8b 3e             	mov    (%rsi),%rdi
  4019af:	48 89 c2             	mov    %rax,%rdx
  4019b2:	e8 89 fb ff ff       	callq  401540 <std::chrono::duration<long, std::ratio<1l, 1000000000l> >::count() const [clone .isra.0]>
  4019b7:	48 89 e6             	mov    %rsp,%rsi
  4019ba:	48 8d 7c 24 08       	lea    0x8(%rsp),%rdi
  4019bf:	48 29 c2             	sub    %rax,%rdx
  4019c2:	48 89 14 24          	mov    %rdx,(%rsp)
  4019c6:	e8 15 ff ff ff       	callq  4018e0 <std::chrono::duration<long, std::ratio<1l, 1l> >::duration<long, void>(long const&)>
  4019cb:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  4019d0:	48 83 c4 18          	add    $0x18,%rsp
  4019d4:	c3                   	retq   
  4019d5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4019dc:	00 00 00 
  4019df:	90                   	nop

00000000004019e0 <std::remove_reference<std::thread::id&>::type&& std::move<std::thread::id&>(std::thread::id&)>:
  4019e0:	48 89 f8             	mov    %rdi,%rax
  4019e3:	c3                   	retq   
  4019e4:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4019eb:	00 00 00 
  4019ee:	66 90                	xchg   %ax,%ax

00000000004019f0 <std::enable_if<std::__and_<std::__not_<std::__is_tuple_like<std::thread::id> >, std::is_move_constructible<std::thread::id>, std::is_move_assignable<std::thread::id> >::value, void>::type std::swap<std::thread::id>(std::thread::id&, std::thread::id&)>:
  4019f0:	55                   	push   %rbp
  4019f1:	53                   	push   %rbx
  4019f2:	48 89 fd             	mov    %rdi,%rbp
  4019f5:	48 89 f3             	mov    %rsi,%rbx
  4019f8:	48 83 ec 18          	sub    $0x18,%rsp
  4019fc:	e8 df ff ff ff       	callq  4019e0 <std::remove_reference<std::thread::id&>::type&& std::move<std::thread::id&>(std::thread::id&)>
  401a01:	48 89 df             	mov    %rbx,%rdi
  401a04:	48 8b 00             	mov    (%rax),%rax
  401a07:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  401a0c:	e8 cf ff ff ff       	callq  4019e0 <std::remove_reference<std::thread::id&>::type&& std::move<std::thread::id&>(std::thread::id&)>
  401a11:	48 8d 7c 24 08       	lea    0x8(%rsp),%rdi
  401a16:	48 8b 00             	mov    (%rax),%rax
  401a19:	48 89 45 00          	mov    %rax,0x0(%rbp)
  401a1d:	e8 be ff ff ff       	callq  4019e0 <std::remove_reference<std::thread::id&>::type&& std::move<std::thread::id&>(std::thread::id&)>
  401a22:	48 8b 00             	mov    (%rax),%rax
  401a25:	48 89 03             	mov    %rax,(%rbx)
  401a28:	48 83 c4 18          	add    $0x18,%rsp
  401a2c:	5b                   	pop    %rbx
  401a2d:	5d                   	pop    %rbp
  401a2e:	c3                   	retq   
  401a2f:	90                   	nop

0000000000401a30 <std::thread::swap(std::thread&)>:
  401a30:	e9 bb ff ff ff       	jmpq   4019f0 <std::enable_if<std::__and_<std::__not_<std::__is_tuple_like<std::thread::id> >, std::is_move_constructible<std::thread::id>, std::is_move_assignable<std::thread::id> >::value, void>::type std::swap<std::thread::id>(std::thread::id&, std::thread::id&)>
  401a35:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  401a3c:	00 00 00 
  401a3f:	90                   	nop

0000000000401a40 <std::thread::operator=(std::thread&&)>:
  401a40:	41 54                	push   %r12
  401a42:	55                   	push   %rbp
  401a43:	49 89 fc             	mov    %rdi,%r12
  401a46:	48 89 f5             	mov    %rsi,%rbp
  401a49:	48 83 ec 08          	sub    $0x8,%rsp
  401a4d:	e8 5e fc ff ff       	callq  4016b0 <std::thread::joinable() const [clone .isra.0]>
  401a52:	84 c0                	test   %al,%al
  401a54:	75 16                	jne    401a6c <std::thread::operator=(std::thread&&)+0x2c>
  401a56:	48 89 ee             	mov    %rbp,%rsi
  401a59:	4c 89 e7             	mov    %r12,%rdi
  401a5c:	e8 cf ff ff ff       	callq  401a30 <std::thread::swap(std::thread&)>
  401a61:	48 83 c4 08          	add    $0x8,%rsp
  401a65:	4c 89 e0             	mov    %r12,%rax
  401a68:	5d                   	pop    %rbp
  401a69:	41 5c                	pop    %r12
  401a6b:	c3                   	retq   
  401a6c:	e8 cf f5 ff ff       	callq  401040 <std::terminate()@plt>
  401a71:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  401a78:	00 00 00 
  401a7b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000401a80 <void (&std::forward<void (&)()>(std::remove_reference<void (&)()>::type&))()>:
  401a80:	48 89 f8             	mov    %rdi,%rax
  401a83:	c3                   	retq   
  401a84:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  401a8b:	00 00 00 
  401a8e:	66 90                	xchg   %ax,%ax

0000000000401a90 <std::_Head_base<0ul, void (*)(), false>::_Head_base(void (* const&)())>:
  401a90:	48 8b 06             	mov    (%rsi),%rax
  401a93:	48 89 07             	mov    %rax,(%rdi)
  401a96:	c3                   	retq   
  401a97:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  401a9e:	00 00 

0000000000401aa0 <std::_Tuple_impl<0ul, void (*)()>::_Tuple_impl(void (* const&)())>:
  401aa0:	e9 eb ff ff ff       	jmpq   401a90 <std::_Head_base<0ul, void (*)(), false>::_Head_base(void (* const&)())>
  401aa5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  401aac:	00 00 00 
  401aaf:	90                   	nop

0000000000401ab0 <std::tuple<void (*)()>::tuple<void, true>(void (* const&)())>:
  401ab0:	e9 eb ff ff ff       	jmpq   401aa0 <std::_Tuple_impl<0ul, void (*)()>::_Tuple_impl(void (* const&)())>
  401ab5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  401abc:	00 00 00 
  401abf:	90                   	nop

0000000000401ac0 <std::thread::_Invoker<std::tuple<std::decay<void (&)()>::type> > std::thread::__make_invoker<void (&)()>(void (&)())>:
  401ac0:	41 54                	push   %r12
  401ac2:	49 89 fc             	mov    %rdi,%r12
  401ac5:	48 89 f7             	mov    %rsi,%rdi
  401ac8:	48 83 ec 10          	sub    $0x10,%rsp
  401acc:	e8 af ff ff ff       	callq  401a80 <void (&std::forward<void (&)()>(std::remove_reference<void (&)()>::type&))()>
  401ad1:	48 8d 74 24 08       	lea    0x8(%rsp),%rsi
  401ad6:	4c 89 e7             	mov    %r12,%rdi
  401ad9:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  401ade:	e8 cd ff ff ff       	callq  401ab0 <std::tuple<void (*)()>::tuple<void, true>(void (* const&)())>
  401ae3:	48 83 c4 10          	add    $0x10,%rsp
  401ae7:	4c 89 e0             	mov    %r12,%rax
  401aea:	41 5c                	pop    %r12
  401aec:	c3                   	retq   
  401aed:	0f 1f 00             	nopl   (%rax)

0000000000401af0 <std::chrono::duration<long, std::ratio<1l, 1l> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long, std::ratio<1l, 1l> >, (char)49>()>:
  401af0:	48 83 ec 18          	sub    $0x18,%rsp
  401af4:	48 8d 7c 24 08       	lea    0x8(%rsp),%rdi
  401af9:	48 c7 04 24 01 00 00 	movq   $0x1,(%rsp)
  401b00:	00 
  401b01:	48 89 e6             	mov    %rsp,%rsi
  401b04:	e8 d7 fd ff ff       	callq  4018e0 <std::chrono::duration<long, std::ratio<1l, 1l> >::duration<long, void>(long const&)>
  401b09:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  401b0e:	48 83 c4 18          	add    $0x18,%rsp
  401b12:	c3                   	retq   
  401b13:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  401b1a:	00 00 00 
  401b1d:	0f 1f 00             	nopl   (%rax)

0000000000401b20 <std::chrono::duration<long, std::ratio<1l, 1l> > std::literals::chrono_literals::operator"" s<(char)49>()>:
  401b20:	e9 cb ff ff ff       	jmpq   401af0 <std::chrono::duration<long, std::ratio<1l, 1l> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long, std::ratio<1l, 1l> >, (char)49>()>
  401b25:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  401b2c:	00 00 00 
  401b2f:	90                   	nop

0000000000401b30 <std::chrono::duration<long, std::ratio<1l, 1000000000l> > std::chrono::__duration_cast_impl<std::chrono::duration<long, std::ratio<1l, 1000000000l> >, std::ratio<1000000000l, 1l>, long, false, true>::__cast<long, std::ratio<1l, 1l> >(std::chrono::duration<long, std::ratio<1l, 1l> > const&)>:
  401b30:	48 83 ec 10          	sub    $0x10,%rsp
  401b34:	48 8b 3f             	mov    (%rdi),%rdi
  401b37:	e8 04 fa ff ff       	callq  401540 <std::chrono::duration<long, std::ratio<1l, 1000000000l> >::count() const [clone .isra.0]>
  401b3c:	48 8d 7c 24 08       	lea    0x8(%rsp),%rdi
  401b41:	48 69 f0 00 ca 9a 3b 	imul   $0x3b9aca00,%rax,%rsi
  401b48:	e8 e3 fc ff ff       	callq  401830 <std::chrono::duration<long, std::ratio<1l, 1000000000l> >::duration<long, void>(long const&) [clone .isra.0]>
  401b4d:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  401b52:	48 83 c4 10          	add    $0x10,%rsp
  401b56:	c3                   	retq   
  401b57:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  401b5e:	00 00 

0000000000401b60 <std::enable_if<std::chrono::__is_duration<std::chrono::duration<long, std::ratio<1l, 1000000000l> > >::value, std::chrono::duration<long, std::ratio<1l, 1000000000l> > >::type std::chrono::duration_cast<std::chrono::duration<long, std::ratio<1l, 1000000000l> >, long, std::ratio<1l, 1l> >(std::chrono::duration<long, std::ratio<1l, 1l> > const&)>:
  401b60:	e9 cb ff ff ff       	jmpq   401b30 <std::chrono::duration<long, std::ratio<1l, 1000000000l> > std::chrono::__duration_cast_impl<std::chrono::duration<long, std::ratio<1l, 1000000000l> >, std::ratio<1000000000l, 1l>, long, false, true>::__cast<long, std::ratio<1l, 1l> >(std::chrono::duration<long, std::ratio<1l, 1l> > const&)>
  401b65:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  401b6c:	00 00 00 
  401b6f:	90                   	nop

0000000000401b70 <void std::this_thread::sleep_for<long, std::ratio<1l, 1l> >(std::chrono::duration<long, std::ratio<1l, 1l> > const&)>:
  401b70:	55                   	push   %rbp
  401b71:	48 89 fd             	mov    %rdi,%rbp
  401b74:	48 83 ec 20          	sub    $0x20,%rsp
  401b78:	e8 73 fd ff ff       	callq  4018f0 <std::chrono::duration<long, std::ratio<1l, 1l> >::zero()>
  401b7d:	48 8d 74 24 10       	lea    0x10(%rsp),%rsi
  401b82:	48 89 ef             	mov    %rbp,%rdi
  401b85:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  401b8a:	e8 b1 fd ff ff       	callq  401940 <bool std::chrono::operator<=<long, std::ratio<1l, 1l>, long, std::ratio<1l, 1l> >(std::chrono::duration<long, std::ratio<1l, 1l> > const&, std::chrono::duration<long, std::ratio<1l, 1l> > const&)>
  401b8f:	84 c0                	test   %al,%al
  401b91:	74 0d                	je     401ba0 <void std::this_thread::sleep_for<long, std::ratio<1l, 1l> >(std::chrono::duration<long, std::ratio<1l, 1l> > const&)+0x30>
  401b93:	48 83 c4 20          	add    $0x20,%rsp
  401b97:	5d                   	pop    %rbp
  401b98:	c3                   	retq   
  401b99:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  401ba0:	48 89 ef             	mov    %rbp,%rdi
  401ba3:	e8 e8 fd ff ff       	callq  401990 <std::enable_if<std::chrono::__is_duration<std::chrono::duration<long, std::ratio<1l, 1l> > >::value, std::chrono::duration<long, std::ratio<1l, 1l> > >::type std::chrono::duration_cast<std::chrono::duration<long, std::ratio<1l, 1l> >, long, std::ratio<1l, 1l> >(std::chrono::duration<long, std::ratio<1l, 1l> > const&)>
  401ba8:	48 8d 74 24 08       	lea    0x8(%rsp),%rsi
  401bad:	48 89 ef             	mov    %rbp,%rdi
  401bb0:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  401bb5:	e8 e6 fd ff ff       	callq  4019a0 <std::common_type<std::chrono::duration<long, std::ratio<1l, 1l> >, std::chrono::duration<long, std::ratio<1l, 1l> > >::type std::chrono::operator-<long, std::ratio<1l, 1l>, long, std::ratio<1l, 1l> >(std::chrono::duration<long, std::ratio<1l, 1l> > const&, std::chrono::duration<long, std::ratio<1l, 1l> > const&)>
  401bba:	48 8d 7c 24 10       	lea    0x10(%rsp),%rdi
  401bbf:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  401bc4:	e8 97 ff ff ff       	callq  401b60 <std::enable_if<std::chrono::__is_duration<std::chrono::duration<long, std::ratio<1l, 1000000000l> > >::value, std::chrono::duration<long, std::ratio<1l, 1000000000l> > >::type std::chrono::duration_cast<std::chrono::duration<long, std::ratio<1l, 1000000000l> >, long, std::ratio<1l, 1l> >(std::chrono::duration<long, std::ratio<1l, 1l> > const&)>
  401bc9:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  401bce:	49 89 c0             	mov    %rax,%r8
  401bd1:	e8 6a f9 ff ff       	callq  401540 <std::chrono::duration<long, std::ratio<1l, 1000000000l> >::count() const [clone .isra.0]>
  401bd6:	4c 89 c7             	mov    %r8,%rdi
  401bd9:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  401bde:	e8 5d f9 ff ff       	callq  401540 <std::chrono::duration<long, std::ratio<1l, 1000000000l> >::count() const [clone .isra.0]>
  401be3:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  401be8:	eb 10                	jmp    401bfa <void std::this_thread::sleep_for<long, std::ratio<1l, 1l> >(std::chrono::duration<long, std::ratio<1l, 1l> > const&)+0x8a>
  401bea:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  401bf0:	e8 3b f4 ff ff       	callq  401030 <__errno_location@plt>
  401bf5:	83 38 04             	cmpl   $0x4,(%rax)
  401bf8:	75 99                	jne    401b93 <void std::this_thread::sleep_for<long, std::ratio<1l, 1l> >(std::chrono::duration<long, std::ratio<1l, 1l> > const&)+0x23>
  401bfa:	48 8d 74 24 10       	lea    0x10(%rsp),%rsi
  401bff:	48 89 f7             	mov    %rsi,%rdi
  401c02:	e8 49 f4 ff ff       	callq  401050 <nanosleep@plt>
  401c07:	83 f8 ff             	cmp    $0xffffffff,%eax
  401c0a:	74 e4                	je     401bf0 <void std::this_thread::sleep_for<long, std::ratio<1l, 1l> >(std::chrono::duration<long, std::ratio<1l, 1l> > const&)+0x80>
  401c0c:	48 83 c4 20          	add    $0x20,%rsp
  401c10:	5d                   	pop    %rbp
  401c11:	c3                   	retq   
  401c12:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  401c19:	00 00 00 
  401c1c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000401c20 <std::__detail::_Mod<unsigned long, 2147483647ul, 16807ul, 0ul, true, true>::__calc(unsigned long)>:
  401c20:	48 69 ff a7 41 00 00 	imul   $0x41a7,%rdi,%rdi
  401c27:	48 ba 05 00 00 00 02 	movabs $0x200000005,%rdx
  401c2e:	00 00 00 
  401c31:	48 89 f8             	mov    %rdi,%rax
  401c34:	48 f7 e2             	mul    %rdx
  401c37:	48 89 f8             	mov    %rdi,%rax
  401c3a:	48 29 d0             	sub    %rdx,%rax
  401c3d:	48 d1 e8             	shr    %rax
  401c40:	48 01 d0             	add    %rdx,%rax
  401c43:	48 c1 e8 1e          	shr    $0x1e,%rax
  401c47:	48 89 c2             	mov    %rax,%rdx
  401c4a:	48 c1 e2 1f          	shl    $0x1f,%rdx
  401c4e:	48 29 c2             	sub    %rax,%rdx
  401c51:	48 89 f8             	mov    %rdi,%rax
  401c54:	48 29 d0             	sub    %rdx,%rax
  401c57:	c3                   	retq   
  401c58:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  401c5f:	00 

0000000000401c60 <unsigned long std::__detail::__mod<unsigned long, 2147483647ul, 16807ul, 0ul>(unsigned long)>:
  401c60:	e9 bb ff ff ff       	jmpq   401c20 <std::__detail::_Mod<unsigned long, 2147483647ul, 16807ul, 0ul, true, true>::__calc(unsigned long)>
  401c65:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  401c6c:	00 00 00 
  401c6f:	90                   	nop

0000000000401c70 <std::thread::_Invoker<std::tuple<void (*)()> >&& std::forward<std::thread::_Invoker<std::tuple<void (*)()> > >(std::remove_reference<std::thread::_Invoker<std::tuple<void (*)()> > >::type&)>:
  401c70:	48 89 f8             	mov    %rdi,%rax
  401c73:	c3                   	retq   
  401c74:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  401c7b:	00 00 00 
  401c7e:	66 90                	xchg   %ax,%ax

0000000000401c80 <std::thread::_State::_State()>:
  401c80:	48 c7 07 50 5d 40 00 	movq   $0x405d50,(%rdi)
  401c87:	c3                   	retq   
  401c88:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  401c8f:	00 

0000000000401c90 <std::remove_reference<std::thread::_State*&>::type&& std::move<std::thread::_State*&>(std::thread::_State*&)>:
  401c90:	48 89 f8             	mov    %rdi,%rax
  401c93:	c3                   	retq   
  401c94:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  401c9b:	00 00 00 
  401c9e:	66 90                	xchg   %ax,%ax

0000000000401ca0 <std::__detail::_Mod<unsigned long, 2147483647ul, 1ul, 0ul, true, true>::__calc(unsigned long)>:
  401ca0:	48 89 f8             	mov    %rdi,%rax
  401ca3:	48 ba 05 00 00 00 02 	movabs $0x200000005,%rdx
  401caa:	00 00 00 
  401cad:	48 f7 e2             	mul    %rdx
  401cb0:	48 89 f8             	mov    %rdi,%rax
  401cb3:	48 29 d0             	sub    %rdx,%rax
  401cb6:	48 d1 e8             	shr    %rax
  401cb9:	48 01 d0             	add    %rdx,%rax
  401cbc:	48 c1 e8 1e          	shr    $0x1e,%rax
  401cc0:	48 89 c2             	mov    %rax,%rdx
  401cc3:	48 c1 e2 1f          	shl    $0x1f,%rdx
  401cc7:	48 29 c2             	sub    %rax,%rdx
  401cca:	48 89 f8             	mov    %rdi,%rax
  401ccd:	48 29 d0             	sub    %rdx,%rax
  401cd0:	c3                   	retq   
  401cd1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  401cd8:	00 00 00 
  401cdb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000401ce0 <unsigned long std::__detail::__mod<unsigned long, 2147483647ul, 1ul, 0ul>(unsigned long)>:
  401ce0:	e9 bb ff ff ff       	jmpq   401ca0 <std::__detail::_Mod<unsigned long, 2147483647ul, 1ul, 0ul, true, true>::__calc(unsigned long)>
  401ce5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  401cec:	00 00 00 
  401cef:	90                   	nop

0000000000401cf0 <std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>::seed(unsigned long) [clone .isra.0]>:
  401cf0:	41 54                	push   %r12
  401cf2:	55                   	push   %rbp
  401cf3:	49 89 f4             	mov    %rsi,%r12
  401cf6:	53                   	push   %rbx
  401cf7:	48 89 fb             	mov    %rdi,%rbx
  401cfa:	31 ff                	xor    %edi,%edi
  401cfc:	e8 df ff ff ff       	callq  401ce0 <unsigned long std::__detail::__mod<unsigned long, 2147483647ul, 1ul, 0ul>(unsigned long)>
  401d01:	4c 89 e7             	mov    %r12,%rdi
  401d04:	48 89 c5             	mov    %rax,%rbp
  401d07:	e8 d4 ff ff ff       	callq  401ce0 <unsigned long std::__detail::__mod<unsigned long, 2147483647ul, 1ul, 0ul>(unsigned long)>
  401d0c:	48 85 ed             	test   %rbp,%rbp
  401d0f:	75 0c                	jne    401d1d <std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>::seed(unsigned long) [clone .isra.0]+0x2d>
  401d11:	48 85 c0             	test   %rax,%rax
  401d14:	ba 01 00 00 00       	mov    $0x1,%edx
  401d19:	48 0f 44 c2          	cmove  %rdx,%rax
  401d1d:	48 89 03             	mov    %rax,(%rbx)
  401d20:	5b                   	pop    %rbx
  401d21:	5d                   	pop    %rbp
  401d22:	41 5c                	pop    %r12
  401d24:	c3                   	retq   
  401d25:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  401d2c:	00 00 00 
  401d2f:	90                   	nop

0000000000401d30 <std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>::linear_congruential_engine(unsigned long)>:
  401d30:	e9 bb ff ff ff       	jmpq   401cf0 <std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>::seed(unsigned long) [clone .isra.0]>
  401d35:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  401d3c:	00 00 00 
  401d3f:	90                   	nop

0000000000401d40 <std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>::linear_congruential_engine()>:
  401d40:	be 01 00 00 00       	mov    $0x1,%esi
  401d45:	e9 e6 ff ff ff       	jmpq   401d30 <std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>::linear_congruential_engine(unsigned long)>
  401d4a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000401d50 <void (*&&std::forward<void (*)()>(std::remove_reference<void (*)()>::type&))()>:
  401d50:	48 89 f8             	mov    %rdi,%rax
  401d53:	c3                   	retq   
  401d54:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  401d5b:	00 00 00 
  401d5e:	66 90                	xchg   %ax,%ax

0000000000401d60 <void std::__invoke_impl<void, void (*)()>(std::__invoke_other, void (*&&)()) [clone .isra.0]>:
  401d60:	48 83 ec 08          	sub    $0x8,%rsp
  401d64:	e8 e7 ff ff ff       	callq  401d50 <void (*&&std::forward<void (*)()>(std::remove_reference<void (*)()>::type&))()>
  401d69:	48 8b 00             	mov    (%rax),%rax
  401d6c:	48 83 c4 08          	add    $0x8,%rsp
  401d70:	ff e0                	jmpq   *%rax
  401d72:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  401d79:	00 00 00 
  401d7c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000401d80 <std::_Head_base<0ul, void (*)(), false>::_Head_base<void (*)()>(void (*&&)())>:
  401d80:	53                   	push   %rbx
  401d81:	48 89 fb             	mov    %rdi,%rbx
  401d84:	48 89 f7             	mov    %rsi,%rdi
  401d87:	e8 c4 ff ff ff       	callq  401d50 <void (*&&std::forward<void (*)()>(std::remove_reference<void (*)()>::type&))()>
  401d8c:	48 8b 00             	mov    (%rax),%rax
  401d8f:	48 89 03             	mov    %rax,(%rbx)
  401d92:	5b                   	pop    %rbx
  401d93:	c3                   	retq   
  401d94:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  401d9b:	00 00 00 
  401d9e:	66 90                	xchg   %ax,%ax

0000000000401da0 <std::_Head_base<0ul, void (*)(), false>::_M_head(std::_Head_base<0ul, void (*)(), false>&)>:
  401da0:	48 89 f8             	mov    %rdi,%rax
  401da3:	c3                   	retq   
  401da4:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  401dab:	00 00 00 
  401dae:	66 90                	xchg   %ax,%ax

0000000000401db0 <std::_Tuple_impl<0ul, void (*)()>::_M_head(std::_Tuple_impl<0ul, void (*)()>&)>:
  401db0:	e9 eb ff ff ff       	jmpq   401da0 <std::_Head_base<0ul, void (*)(), false>::_M_head(std::_Head_base<0ul, void (*)(), false>&)>
  401db5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  401dbc:	00 00 00 
  401dbf:	90                   	nop

0000000000401dc0 <std::_Tuple_impl<0ul, void (*)()>::_Tuple_impl(std::_Tuple_impl<0ul, void (*)()>&&)>:
  401dc0:	55                   	push   %rbp
  401dc1:	48 89 fd             	mov    %rdi,%rbp
  401dc4:	48 89 f7             	mov    %rsi,%rdi
  401dc7:	e8 e4 ff ff ff       	callq  401db0 <std::_Tuple_impl<0ul, void (*)()>::_M_head(std::_Tuple_impl<0ul, void (*)()>&)>
  401dcc:	48 89 c7             	mov    %rax,%rdi
  401dcf:	e8 7c ff ff ff       	callq  401d50 <void (*&&std::forward<void (*)()>(std::remove_reference<void (*)()>::type&))()>
  401dd4:	48 89 ef             	mov    %rbp,%rdi
  401dd7:	5d                   	pop    %rbp
  401dd8:	48 89 c6             	mov    %rax,%rsi
  401ddb:	e9 a0 ff ff ff       	jmpq   401d80 <std::_Head_base<0ul, void (*)(), false>::_Head_base<void (*)()>(void (*&&)())>

0000000000401de0 <std::tuple<void (*)()>::tuple(std::tuple<void (*)()>&&)>:
  401de0:	e9 db ff ff ff       	jmpq   401dc0 <std::_Tuple_impl<0ul, void (*)()>::_Tuple_impl(std::_Tuple_impl<0ul, void (*)()>&&)>
  401de5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  401dec:	00 00 00 
  401def:	90                   	nop

0000000000401df0 <std::thread::_Invoker<std::tuple<void (*)()> >::_Invoker(std::thread::_Invoker<std::tuple<void (*)()> >&&)>:
  401df0:	e9 eb ff ff ff       	jmpq   401de0 <std::tuple<void (*)()>::tuple(std::tuple<void (*)()>&&)>
  401df5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  401dfc:	00 00 00 
  401dff:	90                   	nop

0000000000401e00 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)()> > >::_State_impl(std::thread::_Invoker<std::tuple<void (*)()> >&&)>:
  401e00:	55                   	push   %rbp
  401e01:	53                   	push   %rbx
  401e02:	48 89 fb             	mov    %rdi,%rbx
  401e05:	48 89 f5             	mov    %rsi,%rbp
  401e08:	48 83 ec 08          	sub    $0x8,%rsp
  401e0c:	e8 6f fe ff ff       	callq  401c80 <std::thread::_State::_State()>
  401e11:	48 c7 03 88 30 40 00 	movq   $0x403088,(%rbx)
  401e18:	48 89 ef             	mov    %rbp,%rdi
  401e1b:	e8 50 fe ff ff       	callq  401c70 <std::thread::_Invoker<std::tuple<void (*)()> >&& std::forward<std::thread::_Invoker<std::tuple<void (*)()> > >(std::remove_reference<std::thread::_Invoker<std::tuple<void (*)()> > >::type&)>
  401e20:	48 83 c4 08          	add    $0x8,%rsp
  401e24:	48 8d 7b 08          	lea    0x8(%rbx),%rdi
  401e28:	5b                   	pop    %rbx
  401e29:	48 89 c6             	mov    %rax,%rsi
  401e2c:	5d                   	pop    %rbp
  401e2d:	e9 be ff ff ff       	jmpq   401df0 <std::thread::_Invoker<std::tuple<void (*)()> >::_Invoker(std::thread::_Invoker<std::tuple<void (*)()> >&&)>
  401e32:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  401e39:	00 00 00 
  401e3c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000401e40 <std::_Head_base<0ul, std::thread::_State*, false>::_Head_base()>:
  401e40:	48 c7 07 00 00 00 00 	movq   $0x0,(%rdi)
  401e47:	c3                   	retq   
  401e48:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  401e4f:	00 

0000000000401e50 <std::_Tuple_impl<0ul, std::thread::_State*, std::default_delete<std::thread::_State> >::_Tuple_impl()>:
  401e50:	e9 eb ff ff ff       	jmpq   401e40 <std::_Head_base<0ul, std::thread::_State*, false>::_Head_base()>
  401e55:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  401e5c:	00 00 00 
  401e5f:	90                   	nop

0000000000401e60 <std::tuple<std::thread::_State*, std::default_delete<std::thread::_State> >::tuple<std::thread::_State*, std::default_delete<std::thread::_State>, true>()>:
  401e60:	e9 eb ff ff ff       	jmpq   401e50 <std::_Tuple_impl<0ul, std::thread::_State*, std::default_delete<std::thread::_State> >::_Tuple_impl()>
  401e65:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  401e6c:	00 00 00 
  401e6f:	90                   	nop

0000000000401e70 <std::_Head_base<0ul, std::thread::_State*, false>::_M_head(std::_Head_base<0ul, std::thread::_State*, false>&)>:
  401e70:	48 89 f8             	mov    %rdi,%rax
  401e73:	c3                   	retq   
  401e74:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  401e7b:	00 00 00 
  401e7e:	66 90                	xchg   %ax,%ax

0000000000401e80 <std::_Tuple_impl<0ul, std::thread::_State*, std::default_delete<std::thread::_State> >::_M_head(std::_Tuple_impl<0ul, std::thread::_State*, std::default_delete<std::thread::_State> >&)>:
  401e80:	e9 eb ff ff ff       	jmpq   401e70 <std::_Head_base<0ul, std::thread::_State*, false>::_M_head(std::_Head_base<0ul, std::thread::_State*, false>&)>
  401e85:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  401e8c:	00 00 00 
  401e8f:	90                   	nop

0000000000401e90 <std::thread::_State*& std::__get_helper<0ul, std::thread::_State*, std::default_delete<std::thread::_State> >(std::_Tuple_impl<0ul, std::thread::_State*, std::default_delete<std::thread::_State> >&)>:
  401e90:	e9 eb ff ff ff       	jmpq   401e80 <std::_Tuple_impl<0ul, std::thread::_State*, std::default_delete<std::thread::_State> >::_M_head(std::_Tuple_impl<0ul, std::thread::_State*, std::default_delete<std::thread::_State> >&)>
  401e95:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  401e9c:	00 00 00 
  401e9f:	90                   	nop

0000000000401ea0 <std::tuple_element<0ul, std::tuple<std::thread::_State*, std::default_delete<std::thread::_State> > >::type& std::get<0ul, std::thread::_State*, std::default_delete<std::thread::_State> >(std::tuple<std::thread::_State*, std::default_delete<std::thread::_State> >&)>:
  401ea0:	e9 eb ff ff ff       	jmpq   401e90 <std::thread::_State*& std::__get_helper<0ul, std::thread::_State*, std::default_delete<std::thread::_State> >(std::_Tuple_impl<0ul, std::thread::_State*, std::default_delete<std::thread::_State> >&)>
  401ea5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  401eac:	00 00 00 
  401eaf:	90                   	nop

0000000000401eb0 <std::__uniq_ptr_impl<std::thread::_State, std::default_delete<std::thread::_State> >::_M_ptr()>:
  401eb0:	e9 eb ff ff ff       	jmpq   401ea0 <std::tuple_element<0ul, std::tuple<std::thread::_State*, std::default_delete<std::thread::_State> > >::type& std::get<0ul, std::thread::_State*, std::default_delete<std::thread::_State> >(std::tuple<std::thread::_State*, std::default_delete<std::thread::_State> >&)>
  401eb5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  401ebc:	00 00 00 
  401ebf:	90                   	nop

0000000000401ec0 <std::__uniq_ptr_impl<std::thread::_State, std::default_delete<std::thread::_State> >::__uniq_ptr_impl(std::thread::_State*)>:
  401ec0:	55                   	push   %rbp
  401ec1:	53                   	push   %rbx
  401ec2:	48 89 fd             	mov    %rdi,%rbp
  401ec5:	48 89 f3             	mov    %rsi,%rbx
  401ec8:	48 83 ec 08          	sub    $0x8,%rsp
  401ecc:	e8 8f ff ff ff       	callq  401e60 <std::tuple<std::thread::_State*, std::default_delete<std::thread::_State> >::tuple<std::thread::_State*, std::default_delete<std::thread::_State>, true>()>
  401ed1:	48 89 ef             	mov    %rbp,%rdi
  401ed4:	e8 d7 ff ff ff       	callq  401eb0 <std::__uniq_ptr_impl<std::thread::_State, std::default_delete<std::thread::_State> >::_M_ptr()>
  401ed9:	48 89 18             	mov    %rbx,(%rax)
  401edc:	48 83 c4 08          	add    $0x8,%rsp
  401ee0:	5b                   	pop    %rbx
  401ee1:	5d                   	pop    %rbp
  401ee2:	c3                   	retq   
  401ee3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  401eea:	00 00 00 
  401eed:	0f 1f 00             	nopl   (%rax)

0000000000401ef0 <std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> >::unique_ptr<std::default_delete<std::thread::_State>, void>(std::thread::_State*)>:
  401ef0:	e9 cb ff ff ff       	jmpq   401ec0 <std::__uniq_ptr_impl<std::thread::_State, std::default_delete<std::thread::_State> >::__uniq_ptr_impl(std::thread::_State*)>
  401ef5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  401efc:	00 00 00 
  401eff:	90                   	nop

0000000000401f00 <std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> > std::thread::_S_make_state<std::thread::_Invoker<std::tuple<void (*)()> > >(std::thread::_Invoker<std::tuple<void (*)()> >&&)>:
  401f00:	41 55                	push   %r13
  401f02:	41 54                	push   %r12
  401f04:	49 89 fc             	mov    %rdi,%r12
  401f07:	48 89 f7             	mov    %rsi,%rdi
  401f0a:	55                   	push   %rbp
  401f0b:	e8 60 fd ff ff       	callq  401c70 <std::thread::_Invoker<std::tuple<void (*)()> >&& std::forward<std::thread::_Invoker<std::tuple<void (*)()> > >(std::remove_reference<std::thread::_Invoker<std::tuple<void (*)()> > >::type&)>
  401f10:	bf 10 00 00 00       	mov    $0x10,%edi
  401f15:	49 89 c5             	mov    %rax,%r13
  401f18:	e8 b3 f1 ff ff       	callq  4010d0 <operator new(unsigned long)@plt>
  401f1d:	4c 89 ee             	mov    %r13,%rsi
  401f20:	48 89 c5             	mov    %rax,%rbp
  401f23:	48 89 c7             	mov    %rax,%rdi
  401f26:	e8 d5 fe ff ff       	callq  401e00 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)()> > >::_State_impl(std::thread::_Invoker<std::tuple<void (*)()> >&&)>
  401f2b:	48 89 ee             	mov    %rbp,%rsi
  401f2e:	4c 89 e7             	mov    %r12,%rdi
  401f31:	e8 ba ff ff ff       	callq  401ef0 <std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> >::unique_ptr<std::default_delete<std::thread::_State>, void>(std::thread::_State*)>
  401f36:	4c 89 e0             	mov    %r12,%rax
  401f39:	5d                   	pop    %rbp
  401f3a:	41 5c                	pop    %r12
  401f3c:	41 5d                	pop    %r13
  401f3e:	c3                   	retq   
  401f3f:	90                   	nop

0000000000401f40 <std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> >::~unique_ptr()>:
  401f40:	53                   	push   %rbx
  401f41:	e8 6a ff ff ff       	callq  401eb0 <std::__uniq_ptr_impl<std::thread::_State, std::default_delete<std::thread::_State> >::_M_ptr()>
  401f46:	48 83 38 00          	cmpq   $0x0,(%rax)
  401f4a:	48 89 c3             	mov    %rax,%rbx
  401f4d:	74 10                	je     401f5f <std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> >::~unique_ptr()+0x1f>
  401f4f:	48 89 c7             	mov    %rax,%rdi
  401f52:	e8 39 fd ff ff       	callq  401c90 <std::remove_reference<std::thread::_State*&>::type&& std::move<std::thread::_State*&>(std::thread::_State*&)>
  401f57:	48 8b 38             	mov    (%rax),%rdi
  401f5a:	e8 e1 f8 ff ff       	callq  401840 <std::default_delete<std::thread::_State>::operator()(std::thread::_State*) const [clone .isra.0]>
  401f5f:	48 c7 03 00 00 00 00 	movq   $0x0,(%rbx)
  401f66:	5b                   	pop    %rbx
  401f67:	c3                   	retq   
  401f68:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  401f6f:	00 

0000000000401f70 <std::remove_reference<std::tuple<void (*)()>&>::type&& std::move<std::tuple<void (*)()>&>(std::tuple<void (*)()>&)>:
  401f70:	48 89 f8             	mov    %rdi,%rax
  401f73:	c3                   	retq   
  401f74:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  401f7b:	00 00 00 
  401f7e:	66 90                	xchg   %ax,%ax

0000000000401f80 <std::__invoke_result<void (*)()>::type std::__invoke<void (*)()>(void (*&&)())>:
  401f80:	48 83 ec 08          	sub    $0x8,%rsp
  401f84:	e8 c7 fd ff ff       	callq  401d50 <void (*&&std::forward<void (*)()>(std::remove_reference<void (*)()>::type&))()>
  401f89:	48 83 c4 08          	add    $0x8,%rsp
  401f8d:	48 89 c7             	mov    %rax,%rdi
  401f90:	e9 cb fd ff ff       	jmpq   401d60 <void std::__invoke_impl<void, void (*)()>(std::__invoke_other, void (*&&)()) [clone .isra.0]>
  401f95:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  401f9c:	00 00 00 
  401f9f:	90                   	nop

0000000000401fa0 <void (*&&std::forward<void (*&&)()>(std::remove_reference<void (*&&)()>::type&))()>:
  401fa0:	48 89 f8             	mov    %rdi,%rax
  401fa3:	c3                   	retq   
  401fa4:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  401fab:	00 00 00 
  401fae:	66 90                	xchg   %ax,%ax

0000000000401fb0 <void (*&std::__get_helper<0ul, void (*)()>(std::_Tuple_impl<0ul, void (*)()>&))()>:
  401fb0:	e9 fb fd ff ff       	jmpq   401db0 <std::_Tuple_impl<0ul, void (*)()>::_M_head(std::_Tuple_impl<0ul, void (*)()>&)>
  401fb5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  401fbc:	00 00 00 
  401fbf:	90                   	nop

0000000000401fc0 <std::tuple_element<0ul, std::tuple<void (*)()> >::type& std::get<0ul, void (*)()>(std::tuple<void (*)()>&)>:
  401fc0:	e9 eb ff ff ff       	jmpq   401fb0 <void (*&std::__get_helper<0ul, void (*)()>(std::_Tuple_impl<0ul, void (*)()>&))()>
  401fc5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  401fcc:	00 00 00 
  401fcf:	90                   	nop

0000000000401fd0 <std::tuple_element<0ul, std::tuple<void (*)()> >::type&& std::get<0ul, void (*)()>(std::tuple<void (*)()>&&)>:
  401fd0:	48 83 ec 08          	sub    $0x8,%rsp
  401fd4:	e8 e7 ff ff ff       	callq  401fc0 <std::tuple_element<0ul, std::tuple<void (*)()> >::type& std::get<0ul, void (*)()>(std::tuple<void (*)()>&)>
  401fd9:	48 83 c4 08          	add    $0x8,%rsp
  401fdd:	48 89 c7             	mov    %rax,%rdi
  401fe0:	e9 bb ff ff ff       	jmpq   401fa0 <void (*&&std::forward<void (*&&)()>(std::remove_reference<void (*&&)()>::type&))()>
  401fe5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  401fec:	00 00 00 
  401fef:	90                   	nop

0000000000401ff0 <void std::thread::_Invoker<std::tuple<void (*)()> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) [clone .isra.0]>:
  401ff0:	48 83 ec 08          	sub    $0x8,%rsp
  401ff4:	e8 77 ff ff ff       	callq  401f70 <std::remove_reference<std::tuple<void (*)()>&>::type&& std::move<std::tuple<void (*)()>&>(std::tuple<void (*)()>&)>
  401ff9:	48 89 c7             	mov    %rax,%rdi
  401ffc:	e8 cf ff ff ff       	callq  401fd0 <std::tuple_element<0ul, std::tuple<void (*)()> >::type&& std::get<0ul, void (*)()>(std::tuple<void (*)()>&&)>
  402001:	48 83 c4 08          	add    $0x8,%rsp
  402005:	48 89 c7             	mov    %rax,%rdi
  402008:	e9 73 ff ff ff       	jmpq   401f80 <std::__invoke_result<void (*)()>::type std::__invoke<void (*)()>(void (*&&)())>
  40200d:	0f 1f 00             	nopl   (%rax)

0000000000402010 <std::thread::_Invoker<std::tuple<void (*)()> >::operator()()>:
  402010:	e9 db ff ff ff       	jmpq   401ff0 <void std::thread::_Invoker<std::tuple<void (*)()> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) [clone .isra.0]>
  402015:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  40201c:	00 00 00 
  40201f:	90                   	nop

0000000000402020 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)()> > >::_M_run()>:
  402020:	48 83 c7 08          	add    $0x8,%rdi
  402024:	e9 e7 ff ff ff       	jmpq   402010 <std::thread::_Invoker<std::tuple<void (*)()> >::operator()()>
  402029:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000402030 <__libc_csu_init>:
  402030:	f3 0f 1e fa          	endbr64 
  402034:	41 57                	push   %r15
  402036:	4c 8d 3d cb 3c 00 00 	lea    0x3ccb(%rip),%r15        # 405d08 <__frame_dummy_init_array_entry>
  40203d:	41 56                	push   %r14
  40203f:	49 89 d6             	mov    %rdx,%r14
  402042:	41 55                	push   %r13
  402044:	49 89 f5             	mov    %rsi,%r13
  402047:	41 54                	push   %r12
  402049:	41 89 fc             	mov    %edi,%r12d
  40204c:	55                   	push   %rbp
  40204d:	48 8d 2d c4 3c 00 00 	lea    0x3cc4(%rip),%rbp        # 405d18 <__init_array_end>
  402054:	53                   	push   %rbx
  402055:	4c 29 fd             	sub    %r15,%rbp
  402058:	48 83 ec 08          	sub    $0x8,%rsp
  40205c:	e8 9f ef ff ff       	callq  401000 <_init>
  402061:	48 c1 fd 03          	sar    $0x3,%rbp
  402065:	74 1f                	je     402086 <__libc_csu_init+0x56>
  402067:	31 db                	xor    %ebx,%ebx
  402069:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  402070:	4c 89 f2             	mov    %r14,%rdx
  402073:	4c 89 ee             	mov    %r13,%rsi
  402076:	44 89 e7             	mov    %r12d,%edi
  402079:	41 ff 14 df          	callq  *(%r15,%rbx,8)
  40207d:	48 83 c3 01          	add    $0x1,%rbx
  402081:	48 39 dd             	cmp    %rbx,%rbp
  402084:	75 ea                	jne    402070 <__libc_csu_init+0x40>
  402086:	48 83 c4 08          	add    $0x8,%rsp
  40208a:	5b                   	pop    %rbx
  40208b:	5d                   	pop    %rbp
  40208c:	41 5c                	pop    %r12
  40208e:	41 5d                	pop    %r13
  402090:	41 5e                	pop    %r14
  402092:	41 5f                	pop    %r15
  402094:	c3                   	retq   
  402095:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
  40209c:	00 00 00 00 

00000000004020a0 <__libc_csu_fini>:
  4020a0:	f3 0f 1e fa          	endbr64 
  4020a4:	c3                   	retq   

Desensamblado de la sección .fini:

00000000004020a8 <_fini>:
  4020a8:	f3 0f 1e fa          	endbr64 
  4020ac:	48 83 ec 08          	sub    $0x8,%rsp
  4020b0:	48 83 c4 08          	add    $0x8,%rsp
  4020b4:	c3                   	retq   
