
le-torno:     formato del fichero elf64-x86-64


Desensamblado de la sección .init:

0000000000401000 <_init>:
  401000:	f3 0f 1e fa          	endbr64 
  401004:	48 83 ec 08          	sub    $0x8,%rsp
  401008:	48 8b 05 d9 4f 00 00 	mov    0x4fd9(%rip),%rax        # 405fe8 <__gmon_start__>
  40100f:	48 85 c0             	test   %rax,%rax
  401012:	74 02                	je     401016 <_init+0x16>
  401014:	ff d0                	callq  *%rax
  401016:	48 83 c4 08          	add    $0x8,%rsp
  40101a:	c3                   	retq   

Desensamblado de la sección .plt:

0000000000401020 <.plt>:
  401020:	ff 35 e2 4f 00 00    	pushq  0x4fe2(%rip)        # 406008 <_GLOBAL_OFFSET_TABLE_+0x8>
  401026:	ff 25 e4 4f 00 00    	jmpq   *0x4fe4(%rip)        # 406010 <_GLOBAL_OFFSET_TABLE_+0x10>
  40102c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000401030 <__errno_location@plt>:
  401030:	ff 25 e2 4f 00 00    	jmpq   *0x4fe2(%rip)        # 406018 <__errno_location@GLIBC_2.2.5>
  401036:	68 00 00 00 00       	pushq  $0x0
  40103b:	e9 e0 ff ff ff       	jmpq   401020 <.plt>

0000000000401040 <std::terminate()@plt>:
  401040:	ff 25 da 4f 00 00    	jmpq   *0x4fda(%rip)        # 406020 <std::terminate()@GLIBCXX_3.4>
  401046:	68 01 00 00 00       	pushq  $0x1
  40104b:	e9 d0 ff ff ff       	jmpq   401020 <.plt>

0000000000401050 <nanosleep@plt>:
  401050:	ff 25 d2 4f 00 00    	jmpq   *0x4fd2(%rip)        # 406028 <nanosleep@GLIBC_2.2.5>
  401056:	68 02 00 00 00       	pushq  $0x2
  40105b:	e9 c0 ff ff ff       	jmpq   401020 <.plt>

0000000000401060 <std::thread::_State::~_State()@plt>:
  401060:	ff 25 ca 4f 00 00    	jmpq   *0x4fca(%rip)        # 406030 <std::thread::_State::~_State()@GLIBCXX_3.4.22>
  401066:	68 03 00 00 00       	pushq  $0x3
  40106b:	e9 b0 ff ff ff       	jmpq   401020 <.plt>

0000000000401070 <std::basic_ostream<char, std::char_traits<char> >& std::endl<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&)@plt>:
  401070:	ff 25 c2 4f 00 00    	jmpq   *0x4fc2(%rip)        # 406038 <std::basic_ostream<char, std::char_traits<char> >& std::endl<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&)@GLIBCXX_3.4>
  401076:	68 04 00 00 00       	pushq  $0x4
  40107b:	e9 a0 ff ff ff       	jmpq   401020 <.plt>

0000000000401080 <pthread_create@plt>:
  401080:	ff 25 ba 4f 00 00    	jmpq   *0x4fba(%rip)        # 406040 <pthread_create@GLIBC_2.2.5>
  401086:	68 05 00 00 00       	pushq  $0x5
  40108b:	e9 90 ff ff ff       	jmpq   401020 <.plt>

0000000000401090 <std::__throw_system_error(int)@plt>:
  401090:	ff 25 b2 4f 00 00    	jmpq   *0x4fb2(%rip)        # 406048 <std::__throw_system_error(int)@GLIBCXX_3.4.11>
  401096:	68 06 00 00 00       	pushq  $0x6
  40109b:	e9 80 ff ff ff       	jmpq   401020 <.plt>

00000000004010a0 <pthread_mutex_unlock@plt>:
  4010a0:	ff 25 aa 4f 00 00    	jmpq   *0x4faa(%rip)        # 406050 <pthread_mutex_unlock@GLIBC_2.2.5>
  4010a6:	68 07 00 00 00       	pushq  $0x7
  4010ab:	e9 70 ff ff ff       	jmpq   401020 <.plt>

00000000004010b0 <__cxa_atexit@plt>:
  4010b0:	ff 25 a2 4f 00 00    	jmpq   *0x4fa2(%rip)        # 406058 <__cxa_atexit@GLIBC_2.2.5>
  4010b6:	68 08 00 00 00       	pushq  $0x8
  4010bb:	e9 60 ff ff ff       	jmpq   401020 <.plt>

00000000004010c0 <std::thread::_M_start_thread(std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> >, void (*)())@plt>:
  4010c0:	ff 25 9a 4f 00 00    	jmpq   *0x4f9a(%rip)        # 406060 <std::thread::_M_start_thread(std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> >, void (*)())@GLIBCXX_3.4.22>
  4010c6:	68 09 00 00 00       	pushq  $0x9
  4010cb:	e9 50 ff ff ff       	jmpq   401020 <.plt>

00000000004010d0 <operator new(unsigned long)@plt>:
  4010d0:	ff 25 92 4f 00 00    	jmpq   *0x4f92(%rip)        # 406068 <operator new(unsigned long)@GLIBCXX_3.4>
  4010d6:	68 0a 00 00 00       	pushq  $0xa
  4010db:	e9 40 ff ff ff       	jmpq   401020 <.plt>

00000000004010e0 <operator delete(void*, unsigned long)@plt>:
  4010e0:	ff 25 8a 4f 00 00    	jmpq   *0x4f8a(%rip)        # 406070 <operator delete(void*, unsigned long)@CXXABI_1.3.9>
  4010e6:	68 0b 00 00 00       	pushq  $0xb
  4010eb:	e9 30 ff ff ff       	jmpq   401020 <.plt>

00000000004010f0 <std::ostream::operator<<(std::ostream& (*)(std::ostream&))@plt>:
  4010f0:	ff 25 82 4f 00 00    	jmpq   *0x4f82(%rip)        # 406078 <std::ostream::operator<<(std::ostream& (*)(std::ostream&))@GLIBCXX_3.4>
  4010f6:	68 0c 00 00 00       	pushq  $0xc
  4010fb:	e9 20 ff ff ff       	jmpq   401020 <.plt>

0000000000401100 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char)@plt>:
  401100:	ff 25 7a 4f 00 00    	jmpq   *0x4f7a(%rip)        # 406080 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char)@GLIBCXX_3.4>
  401106:	68 0d 00 00 00       	pushq  $0xd
  40110b:	e9 10 ff ff ff       	jmpq   401020 <.plt>

0000000000401110 <pthread_mutex_lock@plt>:
  401110:	ff 25 72 4f 00 00    	jmpq   *0x4f72(%rip)        # 406088 <pthread_mutex_lock@GLIBC_2.2.5>
  401116:	68 0e 00 00 00       	pushq  $0xe
  40111b:	e9 00 ff ff ff       	jmpq   401020 <.plt>

0000000000401120 <std::ios_base::Init::Init()@plt>:
  401120:	ff 25 6a 4f 00 00    	jmpq   *0x4f6a(%rip)        # 406090 <std::ios_base::Init::Init()@GLIBCXX_3.4>
  401126:	68 0f 00 00 00       	pushq  $0xf
  40112b:	e9 f0 fe ff ff       	jmpq   401020 <.plt>

0000000000401130 <__gxx_personality_v0@plt>:
  401130:	ff 25 62 4f 00 00    	jmpq   *0x4f62(%rip)        # 406098 <__gxx_personality_v0@CXXABI_1.3>
  401136:	68 10 00 00 00       	pushq  $0x10
  40113b:	e9 e0 fe ff ff       	jmpq   401020 <.plt>

0000000000401140 <__pthread_key_create@plt>:
  401140:	ff 25 5a 4f 00 00    	jmpq   *0x4f5a(%rip)        # 4060a0 <__pthread_key_create@GLIBC_2.2.5>
  401146:	68 11 00 00 00       	pushq  $0x11
  40114b:	e9 d0 fe ff ff       	jmpq   401020 <.plt>

0000000000401150 <std::thread::join()@plt>:
  401150:	ff 25 52 4f 00 00    	jmpq   *0x4f52(%rip)        # 4060a8 <std::thread::join()@GLIBCXX_3.4.11>
  401156:	68 12 00 00 00       	pushq  $0x12
  40115b:	e9 c0 fe ff ff       	jmpq   401020 <.plt>

0000000000401160 <_Unwind_Resume@plt>:
  401160:	ff 25 4a 4f 00 00    	jmpq   *0x4f4a(%rip)        # 4060b0 <_Unwind_Resume@GCC_3.0>
  401166:	68 13 00 00 00       	pushq  $0x13
  40116b:	e9 b0 fe ff ff       	jmpq   401020 <.plt>

0000000000401170 <std::ios_base::Init::~Init()@plt>:
  401170:	ff 25 42 4f 00 00    	jmpq   *0x4f42(%rip)        # 4060b8 <std::ios_base::Init::~Init()@GLIBCXX_3.4>
  401176:	68 14 00 00 00       	pushq  $0x14
  40117b:	e9 a0 fe ff ff       	jmpq   401020 <.plt>

Desensamblado de la sección .text:

0000000000401180 <interruptor::lock(std::mutex&) [clone .constprop.0] [clone .cold]>:
  401180:	48 8d 7c 24 08       	lea    0x8(%rsp),%rdi
  401185:	c5 f8 77             	vzeroupper 
  401188:	e8 73 08 00 00       	callq  401a00 <std::lock_guard<std::mutex>::~lock_guard()>
  40118d:	48 89 ef             	mov    %rbp,%rdi
  401190:	e8 cb ff ff ff       	callq  401160 <_Unwind_Resume@plt>
  401195:	90                   	nop

0000000000401196 <std::thread::thread<void (&)(), , void>(void (&)()) [clone .constprop.0] [clone .cold]>:
  401196:	48 8d 7c 24 08       	lea    0x8(%rsp),%rdi
  40119b:	c5 f8 77             	vzeroupper 
  40119e:	e8 bd 0e 00 00       	callq  402060 <std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> >::~unique_ptr()>
  4011a3:	48 89 ef             	mov    %rbp,%rdi
  4011a6:	e8 b5 ff ff ff       	callq  401160 <_Unwind_Resume@plt>
  4011ab:	90                   	nop

00000000004011ac <std::thread::thread<void (&)(), , void>(void (&)()) [clone .constprop.1] [clone .cold]>:
  4011ac:	48 8d 7c 24 08       	lea    0x8(%rsp),%rdi
  4011b1:	c5 f8 77             	vzeroupper 
  4011b4:	e8 a7 0e 00 00       	callq  402060 <std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> >::~unique_ptr()>
  4011b9:	48 89 ef             	mov    %rbp,%rdi
  4011bc:	e8 9f ff ff ff       	callq  401160 <_Unwind_Resume@plt>

00000000004011c1 <main.cold>:
  4011c1:	48 8d 9c 24 b0 00 00 	lea    0xb0(%rsp),%rbx
  4011c8:	00 
  4011c9:	c5 f8 77             	vzeroupper 
  4011cc:	48 83 eb 08          	sub    $0x8,%rbx
  4011d0:	48 89 df             	mov    %rbx,%rdi
  4011d3:	e8 48 07 00 00       	callq  401920 <std::thread::~thread()>
  4011d8:	4c 39 e3             	cmp    %r12,%rbx
  4011db:	75 ef                	jne    4011cc <main.cold+0xb>
  4011dd:	48 83 eb 08          	sub    $0x8,%rbx
  4011e1:	48 89 df             	mov    %rbx,%rdi
  4011e4:	e8 37 07 00 00       	callq  401920 <std::thread::~thread()>
  4011e9:	48 39 eb             	cmp    %rbp,%rbx
  4011ec:	75 ef                	jne    4011dd <main.cold+0x1c>
  4011ee:	4c 89 ef             	mov    %r13,%rdi
  4011f1:	e8 6a ff ff ff       	callq  401160 <_Unwind_Resume@plt>

00000000004011f6 <.annobin_init.c.exit>:
  4011f6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4011fd:	00 00 00 

0000000000401200 <__static_initialization_and_destruction_0(int, int) [clone .constprop.0]>:
  401200:	48 83 ec 08          	sub    $0x8,%rsp
  401204:	bf b0 62 40 00       	mov    $0x4062b0,%edi
  401209:	e8 12 ff ff ff       	callq  401120 <std::ios_base::Init::Init()@plt>
  40120e:	bf 70 11 40 00       	mov    $0x401170,%edi
  401213:	ba 08 30 40 00       	mov    $0x403008,%edx
  401218:	be b0 62 40 00       	mov    $0x4062b0,%esi
  40121d:	e8 8e fe ff ff       	callq  4010b0 <__cxa_atexit@plt>
  401222:	bf 80 62 40 00       	mov    $0x406280,%edi
  401227:	48 83 c4 08          	add    $0x8,%rsp
  40122b:	e9 70 07 00 00       	jmpq   4019a0 <interruptor::interruptor()>

0000000000401230 <main>:
  401230:	41 56                	push   %r14
  401232:	41 55                	push   %r13
  401234:	41 54                	push   %r12
  401236:	55                   	push   %rbp
  401237:	53                   	push   %rbx
  401238:	48 81 ec b0 00 00 00 	sub    $0xb0,%rsp
  40123f:	48 8d 6c 24 30       	lea    0x30(%rsp),%rbp
  401244:	4c 8d 64 24 70       	lea    0x70(%rsp),%r12
  401249:	48 89 eb             	mov    %rbp,%rbx
  40124c:	0f 1f 40 00          	nopl   0x0(%rax)
  401250:	48 89 df             	mov    %rbx,%rdi
  401253:	48 83 c3 08          	add    $0x8,%rbx
  401257:	e8 54 07 00 00       	callq  4019b0 <std::thread::thread()>
  40125c:	4c 39 e3             	cmp    %r12,%rbx
  40125f:	75 ef                	jne    401250 <main+0x20>
  401261:	4c 8d ac 24 b0 00 00 	lea    0xb0(%rsp),%r13
  401268:	00 
  401269:	4c 89 e3             	mov    %r12,%rbx
  40126c:	0f 1f 40 00          	nopl   0x0(%rax)
  401270:	48 89 df             	mov    %rbx,%rdi
  401273:	48 83 c3 08          	add    $0x8,%rbx
  401277:	e8 34 07 00 00       	callq  4019b0 <std::thread::thread()>
  40127c:	4c 39 eb             	cmp    %r13,%rbx
  40127f:	75 ef                	jne    401270 <main+0x40>
  401281:	48 8d 7c 24 08       	lea    0x8(%rsp),%rdi
  401286:	49 89 ee             	mov    %rbp,%r14
  401289:	4c 89 e3             	mov    %r12,%rbx
  40128c:	e8 cf 0b 00 00       	callq  401e60 <std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>::linear_congruential_engine()>
  401291:	eb 54                	jmp    4012e7 <main+0xb7>
  401293:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  401298:	48 8d 7c 24 10       	lea    0x10(%rsp),%rdi
  40129d:	e8 86 05 00 00       	callq  401828 <std::thread::thread<void (&)(), , void>(void (&)()) [clone .constprop.1]>
  4012a2:	48 8d 74 24 10       	lea    0x10(%rsp),%rsi
  4012a7:	4c 89 f7             	mov    %r14,%rdi
  4012aa:	e8 b1 08 00 00       	callq  401b60 <std::thread::operator=(std::thread&&)>
  4012af:	48 8d 7c 24 10       	lea    0x10(%rsp),%rdi
  4012b4:	e8 67 06 00 00       	callq  401920 <std::thread::~thread()>
  4012b9:	48 8d 7c 24 18       	lea    0x18(%rsp),%rdi
  4012be:	e8 05 05 00 00       	callq  4017c8 <std::thread::thread<void (&)(), , void>(void (&)()) [clone .constprop.0]>
  4012c3:	48 89 df             	mov    %rbx,%rdi
  4012c6:	48 8d 74 24 18       	lea    0x18(%rsp),%rsi
  4012cb:	48 83 c3 08          	add    $0x8,%rbx
  4012cf:	e8 8c 08 00 00       	callq  401b60 <std::thread::operator=(std::thread&&)>
  4012d4:	48 8d 7c 24 18       	lea    0x18(%rsp),%rdi
  4012d9:	49 83 c6 08          	add    $0x8,%r14
  4012dd:	e8 3e 06 00 00       	callq  401920 <std::thread::~thread()>
  4012e2:	4c 39 eb             	cmp    %r13,%rbx
  4012e5:	74 5d                	je     401344 <main+0x114>
  4012e7:	48 8d 7c 24 08       	lea    0x8(%rsp),%rdi
  4012ec:	e8 bf 04 00 00       	callq  4017b0 <std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>::operator()() [clone .isra.0]>
  4012f1:	a8 01                	test   $0x1,%al
  4012f3:	75 a3                	jne    401298 <main+0x68>
  4012f5:	48 8d 7c 24 20       	lea    0x20(%rsp),%rdi
  4012fa:	e8 c9 04 00 00       	callq  4017c8 <std::thread::thread<void (&)(), , void>(void (&)()) [clone .constprop.0]>
  4012ff:	48 8d 74 24 20       	lea    0x20(%rsp),%rsi
  401304:	48 89 df             	mov    %rbx,%rdi
  401307:	e8 54 08 00 00       	callq  401b60 <std::thread::operator=(std::thread&&)>
  40130c:	48 8d 7c 24 20       	lea    0x20(%rsp),%rdi
  401311:	e8 0a 06 00 00       	callq  401920 <std::thread::~thread()>
  401316:	48 8d 7c 24 28       	lea    0x28(%rsp),%rdi
  40131b:	e8 08 05 00 00       	callq  401828 <std::thread::thread<void (&)(), , void>(void (&)()) [clone .constprop.1]>
  401320:	4c 89 f7             	mov    %r14,%rdi
  401323:	48 8d 74 24 28       	lea    0x28(%rsp),%rsi
  401328:	48 83 c3 08          	add    $0x8,%rbx
  40132c:	e8 2f 08 00 00       	callq  401b60 <std::thread::operator=(std::thread&&)>
  401331:	48 8d 7c 24 28       	lea    0x28(%rsp),%rdi
  401336:	49 83 c6 08          	add    $0x8,%r14
  40133a:	e8 e1 05 00 00       	callq  401920 <std::thread::~thread()>
  40133f:	4c 39 eb             	cmp    %r13,%rbx
  401342:	75 a3                	jne    4012e7 <main+0xb7>
  401344:	e8 f7 08 00 00       	callq  401c40 <std::chrono::duration<long, std::ratio<1l, 1l> > std::literals::chrono_literals::operator"" s<(char)49>()>
  401349:	48 8d 7c 24 28       	lea    0x28(%rsp),%rdi
  40134e:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  401353:	e8 38 09 00 00       	callq  401c90 <void std::this_thread::sleep_for<long, std::ratio<1l, 1l> >(std::chrono::duration<long, std::ratio<1l, 1l> > const&)>
  401358:	31 f6                	xor    %esi,%esi
  40135a:	bf c4 60 40 00       	mov    $0x4060c4,%edi
  40135f:	48 89 eb             	mov    %rbp,%rbx
  401362:	e8 69 06 00 00       	callq  4019d0 <std::atomic<bool>::operator=(bool)>
  401367:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  40136e:	00 00 
  401370:	48 89 df             	mov    %rbx,%rdi
  401373:	e8 d8 fd ff ff       	callq  401150 <std::thread::join()@plt>
  401378:	48 83 c3 08          	add    $0x8,%rbx
  40137c:	4c 39 e3             	cmp    %r12,%rbx
  40137f:	75 ef                	jne    401370 <main+0x140>
  401381:	4c 89 e3             	mov    %r12,%rbx
  401384:	0f 1f 40 00          	nopl   0x0(%rax)
  401388:	48 89 df             	mov    %rbx,%rdi
  40138b:	e8 c0 fd ff ff       	callq  401150 <std::thread::join()@plt>
  401390:	48 83 c3 08          	add    $0x8,%rbx
  401394:	4c 39 eb             	cmp    %r13,%rbx
  401397:	75 ef                	jne    401388 <main+0x158>
  401399:	48 8d 9c 24 a8 00 00 	lea    0xa8(%rsp),%rbx
  4013a0:	00 
  4013a1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  4013a8:	48 89 df             	mov    %rbx,%rdi
  4013ab:	e8 70 05 00 00       	callq  401920 <std::thread::~thread()>
  4013b0:	48 89 d8             	mov    %rbx,%rax
  4013b3:	48 83 eb 08          	sub    $0x8,%rbx
  4013b7:	4c 39 e0             	cmp    %r12,%rax
  4013ba:	75 ec                	jne    4013a8 <main+0x178>
  4013bc:	48 8d 5c 24 68       	lea    0x68(%rsp),%rbx
  4013c1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  4013c8:	48 89 df             	mov    %rbx,%rdi
  4013cb:	e8 50 05 00 00       	callq  401920 <std::thread::~thread()>
  4013d0:	48 89 d8             	mov    %rbx,%rax
  4013d3:	48 83 eb 08          	sub    $0x8,%rbx
  4013d7:	48 39 e8             	cmp    %rbp,%rax
  4013da:	75 ec                	jne    4013c8 <main+0x198>
  4013dc:	48 81 c4 b0 00 00 00 	add    $0xb0,%rsp
  4013e3:	31 c0                	xor    %eax,%eax
  4013e5:	5b                   	pop    %rbx
  4013e6:	5d                   	pop    %rbp
  4013e7:	41 5c                	pop    %r12
  4013e9:	41 5d                	pop    %r13
  4013eb:	41 5e                	pop    %r14
  4013ed:	c3                   	retq   
  4013ee:	49 89 c5             	mov    %rax,%r13
  4013f1:	e9 cb fd ff ff       	jmpq   4011c1 <main.cold>
  4013f6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4013fd:	00 00 00 

0000000000401400 <_GLOBAL__sub_I_run>:
  401400:	e9 fb fd ff ff       	jmpq   401200 <__static_initialization_and_destruction_0(int, int) [clone .constprop.0]>

0000000000401405 <.annobin_init.c.hot>:
  401405:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  40140c:	00 00 00 
  40140f:	90                   	nop

0000000000401410 <_start>:
  401410:	f3 0f 1e fa          	endbr64 
  401414:	31 ed                	xor    %ebp,%ebp
  401416:	49 89 d1             	mov    %rdx,%r9
  401419:	5e                   	pop    %rsi
  40141a:	48 89 e2             	mov    %rsp,%rdx
  40141d:	48 83 e4 f0          	and    $0xfffffffffffffff0,%rsp
  401421:	50                   	push   %rax
  401422:	54                   	push   %rsp
  401423:	49 c7 c0 c0 21 40 00 	mov    $0x4021c0,%r8
  40142a:	48 c7 c1 50 21 40 00 	mov    $0x402150,%rcx
  401431:	48 c7 c7 30 12 40 00 	mov    $0x401230,%rdi
  401438:	ff 15 a2 4b 00 00    	callq  *0x4ba2(%rip)        # 405fe0 <__libc_start_main@GLIBC_2.2.5>
  40143e:	f4                   	hlt    

000000000040143f <.annobin_init.c>:
  40143f:	90                   	nop

0000000000401440 <_dl_relocate_static_pie>:
  401440:	f3 0f 1e fa          	endbr64 
  401444:	c3                   	retq   

0000000000401445 <.annobin_static_reloc.c_end>:
  401445:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  40144c:	00 00 00 
  40144f:	90                   	nop

0000000000401450 <deregister_tm_clones>:
  401450:	b8 c8 60 40 00       	mov    $0x4060c8,%eax
  401455:	48 3d c8 60 40 00    	cmp    $0x4060c8,%rax
  40145b:	74 13                	je     401470 <deregister_tm_clones+0x20>
  40145d:	b8 00 00 00 00       	mov    $0x0,%eax
  401462:	48 85 c0             	test   %rax,%rax
  401465:	74 09                	je     401470 <deregister_tm_clones+0x20>
  401467:	bf c8 60 40 00       	mov    $0x4060c8,%edi
  40146c:	ff e0                	jmpq   *%rax
  40146e:	66 90                	xchg   %ax,%ax
  401470:	c3                   	retq   
  401471:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
  401478:	00 00 00 00 
  40147c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000401480 <register_tm_clones>:
  401480:	be c8 60 40 00       	mov    $0x4060c8,%esi
  401485:	48 81 ee c8 60 40 00 	sub    $0x4060c8,%rsi
  40148c:	48 89 f0             	mov    %rsi,%rax
  40148f:	48 c1 ee 3f          	shr    $0x3f,%rsi
  401493:	48 c1 f8 03          	sar    $0x3,%rax
  401497:	48 01 c6             	add    %rax,%rsi
  40149a:	48 d1 fe             	sar    %rsi
  40149d:	74 11                	je     4014b0 <register_tm_clones+0x30>
  40149f:	b8 00 00 00 00       	mov    $0x0,%eax
  4014a4:	48 85 c0             	test   %rax,%rax
  4014a7:	74 07                	je     4014b0 <register_tm_clones+0x30>
  4014a9:	bf c8 60 40 00       	mov    $0x4060c8,%edi
  4014ae:	ff e0                	jmpq   *%rax
  4014b0:	c3                   	retq   
  4014b1:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
  4014b8:	00 00 00 00 
  4014bc:	0f 1f 40 00          	nopl   0x0(%rax)

00000000004014c0 <__do_global_dtors_aux>:
  4014c0:	f3 0f 1e fa          	endbr64 
  4014c4:	80 3d 25 4d 00 00 00 	cmpb   $0x0,0x4d25(%rip)        # 4061f0 <completed.7383>
  4014cb:	75 13                	jne    4014e0 <__do_global_dtors_aux+0x20>
  4014cd:	55                   	push   %rbp
  4014ce:	48 89 e5             	mov    %rsp,%rbp
  4014d1:	e8 7a ff ff ff       	callq  401450 <deregister_tm_clones>
  4014d6:	c6 05 13 4d 00 00 01 	movb   $0x1,0x4d13(%rip)        # 4061f0 <completed.7383>
  4014dd:	5d                   	pop    %rbp
  4014de:	c3                   	retq   
  4014df:	90                   	nop
  4014e0:	c3                   	retq   
  4014e1:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
  4014e8:	00 00 00 00 
  4014ec:	0f 1f 40 00          	nopl   0x0(%rax)

00000000004014f0 <frame_dummy>:
  4014f0:	f3 0f 1e fa          	endbr64 
  4014f4:	eb 8a                	jmp    401480 <register_tm_clones>
  4014f6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4014fd:	00 00 00 

0000000000401500 <__gthread_active_p()>:
  401500:	b8 40 11 40 00       	mov    $0x401140,%eax
  401505:	48 85 c0             	test   %rax,%rax
  401508:	0f 95 c0             	setne  %al
  40150b:	0f b6 c0             	movzbl %al,%eax
  40150e:	c3                   	retq   
  40150f:	90                   	nop

0000000000401510 <__gthread_mutex_lock(pthread_mutex_t*)>:
  401510:	48 83 ec 08          	sub    $0x8,%rsp
  401514:	e8 e7 ff ff ff       	callq  401500 <__gthread_active_p()>
  401519:	85 c0                	test   %eax,%eax
  40151b:	75 0b                	jne    401528 <__gthread_mutex_lock(pthread_mutex_t*)+0x18>
  40151d:	31 c0                	xor    %eax,%eax
  40151f:	48 83 c4 08          	add    $0x8,%rsp
  401523:	c3                   	retq   
  401524:	0f 1f 40 00          	nopl   0x0(%rax)
  401528:	48 83 c4 08          	add    $0x8,%rsp
  40152c:	e9 df fb ff ff       	jmpq   401110 <pthread_mutex_lock@plt>
  401531:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000401538 <__gthread_mutex_unlock(pthread_mutex_t*)>:
  401538:	48 83 ec 08          	sub    $0x8,%rsp
  40153c:	e8 bf ff ff ff       	callq  401500 <__gthread_active_p()>
  401541:	85 c0                	test   %eax,%eax
  401543:	75 0b                	jne    401550 <__gthread_mutex_unlock(pthread_mutex_t*)+0x18>
  401545:	31 c0                	xor    %eax,%eax
  401547:	48 83 c4 08          	add    $0x8,%rsp
  40154b:	c3                   	retq   
  40154c:	0f 1f 40 00          	nopl   0x0(%rax)
  401550:	48 83 c4 08          	add    $0x8,%rsp
  401554:	e9 47 fb ff ff       	jmpq   4010a0 <pthread_mutex_unlock@plt>
  401559:	90                   	nop
  40155a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000401560 <std::chrono::duration<long, std::ratio<1l, 1000000000l> >::count() const [clone .isra.0]>:
  401560:	48 89 f8             	mov    %rdi,%rax
  401563:	c3                   	retq   
  401564:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000401568 <seccion_critica(char) [clone .constprop.0]>:
  401568:	53                   	push   %rbx
  401569:	bb 30 00 00 00       	mov    $0x30,%ebx
  40156e:	66 90                	xchg   %ax,%ax
  401570:	89 de                	mov    %ebx,%esi
  401572:	bf e0 60 40 00       	mov    $0x4060e0,%edi
  401577:	ff c3                	inc    %ebx
  401579:	e8 82 fb ff ff       	callq  401100 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char)@plt>
  40157e:	83 fb 3a             	cmp    $0x3a,%ebx
  401581:	75 ed                	jne    401570 <seccion_critica(char) [clone .constprop.0]+0x8>
  401583:	be 70 10 40 00       	mov    $0x401070,%esi
  401588:	bf e0 60 40 00       	mov    $0x4060e0,%edi
  40158d:	5b                   	pop    %rbx
  40158e:	e9 5d fb ff ff       	jmpq   4010f0 <std::ostream::operator<<(std::ostream& (*)(std::ostream&))@plt>
  401593:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000401598 <seccion_critica(char) [clone .constprop.1]>:
  401598:	53                   	push   %rbx
  401599:	bb 61 00 00 00       	mov    $0x61,%ebx
  40159e:	66 90                	xchg   %ax,%ax
  4015a0:	89 de                	mov    %ebx,%esi
  4015a2:	bf e0 60 40 00       	mov    $0x4060e0,%edi
  4015a7:	ff c3                	inc    %ebx
  4015a9:	e8 52 fb ff ff       	callq  401100 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char)@plt>
  4015ae:	83 fb 6b             	cmp    $0x6b,%ebx
  4015b1:	75 ed                	jne    4015a0 <seccion_critica(char) [clone .constprop.1]+0x8>
  4015b3:	be 70 10 40 00       	mov    $0x401070,%esi
  4015b8:	bf e0 60 40 00       	mov    $0x4060e0,%edi
  4015bd:	5b                   	pop    %rbx
  4015be:	e9 2d fb ff ff       	jmpq   4010f0 <std::ostream::operator<<(std::ostream& (*)(std::ostream&))@plt>
  4015c3:	90                   	nop
  4015c4:	0f 1f 40 00          	nopl   0x0(%rax)

00000000004015c8 <std::mutex::unlock() [clone .constprop.0]>:
  4015c8:	bf 00 62 40 00       	mov    $0x406200,%edi
  4015cd:	e9 66 ff ff ff       	jmpq   401538 <__gthread_mutex_unlock(pthread_mutex_t*)>
  4015d2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

00000000004015d8 <std::mutex::unlock() [clone .constprop.1]>:
  4015d8:	bf 40 62 40 00       	mov    $0x406240,%edi
  4015dd:	e9 56 ff ff ff       	jmpq   401538 <__gthread_mutex_unlock(pthread_mutex_t*)>
  4015e2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

00000000004015e8 <std::mutex::lock() [clone .constprop.0]>:
  4015e8:	48 83 ec 08          	sub    $0x8,%rsp
  4015ec:	bf 00 62 40 00       	mov    $0x406200,%edi
  4015f1:	e8 1a ff ff ff       	callq  401510 <__gthread_mutex_lock(pthread_mutex_t*)>
  4015f6:	85 c0                	test   %eax,%eax
  4015f8:	75 05                	jne    4015ff <std::mutex::lock() [clone .constprop.0]+0x17>
  4015fa:	48 83 c4 08          	add    $0x8,%rsp
  4015fe:	c3                   	retq   
  4015ff:	89 c7                	mov    %eax,%edi
  401601:	e8 8a fa ff ff       	callq  401090 <std::__throw_system_error(int)@plt>
  401606:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  40160d:	00 00 00 

0000000000401610 <std::mutex::lock() [clone .constprop.1]>:
  401610:	48 83 ec 08          	sub    $0x8,%rsp
  401614:	bf 40 62 40 00       	mov    $0x406240,%edi
  401619:	e8 f2 fe ff ff       	callq  401510 <__gthread_mutex_lock(pthread_mutex_t*)>
  40161e:	85 c0                	test   %eax,%eax
  401620:	75 05                	jne    401627 <std::mutex::lock() [clone .constprop.1]+0x17>
  401622:	48 83 c4 08          	add    $0x8,%rsp
  401626:	c3                   	retq   
  401627:	89 c7                	mov    %eax,%edi
  401629:	e8 62 fa ff ff       	callq  401090 <std::__throw_system_error(int)@plt>
  40162e:	66 90                	xchg   %ax,%ax

0000000000401630 <std::atomic<bool>::operator bool() const [clone .constprop.0]>:
  401630:	0f b6 05 8d 4a 00 00 	movzbl 0x4a8d(%rip),%eax        # 4060c4 <run>
  401637:	84 c0                	test   %al,%al
  401639:	0f 95 c0             	setne  %al
  40163c:	c3                   	retq   
  40163d:	0f 1f 00             	nopl   (%rax)

0000000000401640 <escritor()>:
  401640:	48 83 ec 08          	sub    $0x8,%rsp
  401644:	eb 1b                	jmp    401661 <escritor()+0x21>
  401646:	66 90                	xchg   %ax,%ax
  401648:	e8 9b ff ff ff       	callq  4015e8 <std::mutex::lock() [clone .constprop.0]>
  40164d:	e8 be ff ff ff       	callq  401610 <std::mutex::lock() [clone .constprop.1]>
  401652:	e8 41 ff ff ff       	callq  401598 <seccion_critica(char) [clone .constprop.1]>
  401657:	e8 6c ff ff ff       	callq  4015c8 <std::mutex::unlock() [clone .constprop.0]>
  40165c:	e8 77 ff ff ff       	callq  4015d8 <std::mutex::unlock() [clone .constprop.1]>
  401661:	e8 ca ff ff ff       	callq  401630 <std::atomic<bool>::operator bool() const [clone .constprop.0]>
  401666:	84 c0                	test   %al,%al
  401668:	75 de                	jne    401648 <escritor()+0x8>
  40166a:	48 83 c4 08          	add    $0x8,%rsp
  40166e:	c3                   	retq   
  40166f:	90                   	nop

0000000000401670 <std::thread::joinable() const [clone .isra.0]>:
  401670:	53                   	push   %rbx
  401671:	48 89 fb             	mov    %rdi,%rbx
  401674:	48 83 ec 10          	sub    $0x10,%rsp
  401678:	48 8d 7c 24 08       	lea    0x8(%rsp),%rdi
  40167d:	e8 7e 02 00 00       	callq  401900 <std::thread::id::id()>
  401682:	48 8b 3b             	mov    (%rbx),%rdi
  401685:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
  40168a:	e8 81 02 00 00       	callq  401910 <std::operator==(std::thread::id, std::thread::id)>
  40168f:	48 83 c4 10          	add    $0x10,%rsp
  401693:	5b                   	pop    %rbx
  401694:	83 f0 01             	xor    $0x1,%eax
  401697:	c3                   	retq   
  401698:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  40169f:	00 

00000000004016a0 <seccion_critica(char)>:
  4016a0:	41 54                	push   %r12
  4016a2:	55                   	push   %rbp
  4016a3:	89 fd                	mov    %edi,%ebp
  4016a5:	83 c7 0a             	add    $0xa,%edi
  4016a8:	53                   	push   %rbx
  4016a9:	44 0f b6 e7          	movzbl %dil,%r12d
  4016ad:	0f 1f 00             	nopl   (%rax)
  4016b0:	8d 5d 01             	lea    0x1(%rbp),%ebx
  4016b3:	40 0f be f5          	movsbl %bpl,%esi
  4016b7:	bf e0 60 40 00       	mov    $0x4060e0,%edi
  4016bc:	89 dd                	mov    %ebx,%ebp
  4016be:	0f b6 db             	movzbl %bl,%ebx
  4016c1:	e8 3a fa ff ff       	callq  401100 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char)@plt>
  4016c6:	66 41 39 dc          	cmp    %bx,%r12w
  4016ca:	75 e4                	jne    4016b0 <seccion_critica(char)+0x10>
  4016cc:	5b                   	pop    %rbx
  4016cd:	be 70 10 40 00       	mov    $0x401070,%esi
  4016d2:	bf e0 60 40 00       	mov    $0x4060e0,%edi
  4016d7:	5d                   	pop    %rbp
  4016d8:	41 5c                	pop    %r12
  4016da:	e9 11 fa ff ff       	jmpq   4010f0 <std::ostream::operator<<(std::ostream& (*)(std::ostream&))@plt>
  4016df:	90                   	nop

00000000004016e0 <interruptor::unlock(std::mutex&) [clone .constprop.0]>:
  4016e0:	48 83 ec 18          	sub    $0x18,%rsp
  4016e4:	be 88 62 40 00       	mov    $0x406288,%esi
  4016e9:	48 8d 7c 24 08       	lea    0x8(%rsp),%rdi
  4016ee:	e8 fd 02 00 00       	callq  4019f0 <std::lock_guard<std::mutex>::lock_guard(std::mutex&)>
  4016f3:	ff 0d 87 4b 00 00    	decl   0x4b87(%rip)        # 406280 <i>
  4016f9:	74 15                	je     401710 <interruptor::unlock(std::mutex&) [clone .constprop.0]+0x30>
  4016fb:	48 8d 7c 24 08       	lea    0x8(%rsp),%rdi
  401700:	e8 fb 02 00 00       	callq  401a00 <std::lock_guard<std::mutex>::~lock_guard()>
  401705:	48 83 c4 18          	add    $0x18,%rsp
  401709:	c3                   	retq   
  40170a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  401710:	e8 c3 fe ff ff       	callq  4015d8 <std::mutex::unlock() [clone .constprop.1]>
  401715:	48 8d 7c 24 08       	lea    0x8(%rsp),%rdi
  40171a:	e8 e1 02 00 00       	callq  401a00 <std::lock_guard<std::mutex>::~lock_guard()>
  40171f:	48 83 c4 18          	add    $0x18,%rsp
  401723:	c3                   	retq   
  401724:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000401728 <interruptor::lock(std::mutex&) [clone .constprop.0]>:
  401728:	55                   	push   %rbp
  401729:	be 88 62 40 00       	mov    $0x406288,%esi
  40172e:	48 83 ec 10          	sub    $0x10,%rsp
  401732:	48 8d 7c 24 08       	lea    0x8(%rsp),%rdi
  401737:	e8 b4 02 00 00       	callq  4019f0 <std::lock_guard<std::mutex>::lock_guard(std::mutex&)>
  40173c:	8b 05 3e 4b 00 00    	mov    0x4b3e(%rip),%eax        # 406280 <i>
  401742:	ff c0                	inc    %eax
  401744:	89 05 36 4b 00 00    	mov    %eax,0x4b36(%rip)        # 406280 <i>
  40174a:	83 f8 01             	cmp    $0x1,%eax
  40174d:	74 11                	je     401760 <interruptor::lock(std::mutex&) [clone .constprop.0]+0x38>
  40174f:	48 8d 7c 24 08       	lea    0x8(%rsp),%rdi
  401754:	e8 a7 02 00 00       	callq  401a00 <std::lock_guard<std::mutex>::~lock_guard()>
  401759:	48 83 c4 10          	add    $0x10,%rsp
  40175d:	5d                   	pop    %rbp
  40175e:	c3                   	retq   
  40175f:	90                   	nop
  401760:	e8 ab fe ff ff       	callq  401610 <std::mutex::lock() [clone .constprop.1]>
  401765:	48 8d 7c 24 08       	lea    0x8(%rsp),%rdi
  40176a:	e8 91 02 00 00       	callq  401a00 <std::lock_guard<std::mutex>::~lock_guard()>
  40176f:	48 83 c4 10          	add    $0x10,%rsp
  401773:	5d                   	pop    %rbp
  401774:	c3                   	retq   
  401775:	48 89 c5             	mov    %rax,%rbp
  401778:	e9 03 fa ff ff       	jmpq   401180 <interruptor::lock(std::mutex&) [clone .constprop.0] [clone .cold]>
  40177d:	0f 1f 00             	nopl   (%rax)

0000000000401780 <lector()>:
  401780:	48 83 ec 08          	sub    $0x8,%rsp
  401784:	eb 1b                	jmp    4017a1 <lector()+0x21>
  401786:	66 90                	xchg   %ax,%ax
  401788:	e8 5b fe ff ff       	callq  4015e8 <std::mutex::lock() [clone .constprop.0]>
  40178d:	e8 36 fe ff ff       	callq  4015c8 <std::mutex::unlock() [clone .constprop.0]>
  401792:	e8 91 ff ff ff       	callq  401728 <interruptor::lock(std::mutex&) [clone .constprop.0]>
  401797:	e8 cc fd ff ff       	callq  401568 <seccion_critica(char) [clone .constprop.0]>
  40179c:	e8 3f ff ff ff       	callq  4016e0 <interruptor::unlock(std::mutex&) [clone .constprop.0]>
  4017a1:	e8 8a fe ff ff       	callq  401630 <std::atomic<bool>::operator bool() const [clone .constprop.0]>
  4017a6:	84 c0                	test   %al,%al
  4017a8:	75 de                	jne    401788 <lector()+0x8>
  4017aa:	48 83 c4 08          	add    $0x8,%rsp
  4017ae:	c3                   	retq   
  4017af:	90                   	nop

00000000004017b0 <std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>::operator()() [clone .isra.0]>:
  4017b0:	53                   	push   %rbx
  4017b1:	48 89 fb             	mov    %rdi,%rbx
  4017b4:	48 8b 3f             	mov    (%rdi),%rdi
  4017b7:	e8 c4 05 00 00       	callq  401d80 <unsigned long std::__detail::__mod<unsigned long, 2147483647ul, 16807ul, 0ul>(unsigned long)>
  4017bc:	48 89 03             	mov    %rax,(%rbx)
  4017bf:	5b                   	pop    %rbx
  4017c0:	c3                   	retq   
  4017c1:	90                   	nop
  4017c2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

00000000004017c8 <std::thread::thread<void (&)(), , void>(void (&)()) [clone .constprop.0]>:
  4017c8:	55                   	push   %rbp
  4017c9:	48 89 fd             	mov    %rdi,%rbp
  4017cc:	48 83 ec 10          	sub    $0x10,%rsp
  4017d0:	e8 2b 01 00 00       	callq  401900 <std::thread::id::id()>
  4017d5:	bf 40 16 40 00       	mov    $0x401640,%edi
  4017da:	e8 c1 03 00 00       	callq  401ba0 <void (&std::forward<void (&)()>(std::remove_reference<void (&)()>::type&))()>
  4017df:	48 89 e7             	mov    %rsp,%rdi
  4017e2:	48 89 c6             	mov    %rax,%rsi
  4017e5:	e8 f6 03 00 00       	callq  401be0 <std::thread::_Invoker<std::tuple<std::decay<void (&)()>::type> > std::thread::__make_invoker<void (&)()>(void (&)())>
  4017ea:	48 89 e6             	mov    %rsp,%rsi
  4017ed:	48 8d 7c 24 08       	lea    0x8(%rsp),%rdi
  4017f2:	e8 29 08 00 00       	callq  402020 <std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> > std::thread::_S_make_state<std::thread::_Invoker<std::tuple<void (*)()> > >(std::thread::_Invoker<std::tuple<void (*)()> >&&)>
  4017f7:	ba 80 10 40 00       	mov    $0x401080,%edx
  4017fc:	48 8d 74 24 08       	lea    0x8(%rsp),%rsi
  401801:	48 89 ef             	mov    %rbp,%rdi
  401804:	e8 b7 f8 ff ff       	callq  4010c0 <std::thread::_M_start_thread(std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> >, void (*)())@plt>
  401809:	48 8d 7c 24 08       	lea    0x8(%rsp),%rdi
  40180e:	e8 4d 08 00 00       	callq  402060 <std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> >::~unique_ptr()>
  401813:	48 83 c4 10          	add    $0x10,%rsp
  401817:	5d                   	pop    %rbp
  401818:	c3                   	retq   
  401819:	48 89 c5             	mov    %rax,%rbp
  40181c:	e9 75 f9 ff ff       	jmpq   401196 <std::thread::thread<void (&)(), , void>(void (&)()) [clone .constprop.0] [clone .cold]>
  401821:	90                   	nop
  401822:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000401828 <std::thread::thread<void (&)(), , void>(void (&)()) [clone .constprop.1]>:
  401828:	55                   	push   %rbp
  401829:	48 89 fd             	mov    %rdi,%rbp
  40182c:	48 83 ec 10          	sub    $0x10,%rsp
  401830:	e8 cb 00 00 00       	callq  401900 <std::thread::id::id()>
  401835:	bf 80 17 40 00       	mov    $0x401780,%edi
  40183a:	e8 61 03 00 00       	callq  401ba0 <void (&std::forward<void (&)()>(std::remove_reference<void (&)()>::type&))()>
  40183f:	48 89 e7             	mov    %rsp,%rdi
  401842:	48 89 c6             	mov    %rax,%rsi
  401845:	e8 96 03 00 00       	callq  401be0 <std::thread::_Invoker<std::tuple<std::decay<void (&)()>::type> > std::thread::__make_invoker<void (&)()>(void (&)())>
  40184a:	48 89 e6             	mov    %rsp,%rsi
  40184d:	48 8d 7c 24 08       	lea    0x8(%rsp),%rdi
  401852:	e8 c9 07 00 00       	callq  402020 <std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> > std::thread::_S_make_state<std::thread::_Invoker<std::tuple<void (*)()> > >(std::thread::_Invoker<std::tuple<void (*)()> >&&)>
  401857:	ba 80 10 40 00       	mov    $0x401080,%edx
  40185c:	48 8d 74 24 08       	lea    0x8(%rsp),%rsi
  401861:	48 89 ef             	mov    %rbp,%rdi
  401864:	e8 57 f8 ff ff       	callq  4010c0 <std::thread::_M_start_thread(std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> >, void (*)())@plt>
  401869:	48 8d 7c 24 08       	lea    0x8(%rsp),%rdi
  40186e:	e8 ed 07 00 00       	callq  402060 <std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> >::~unique_ptr()>
  401873:	48 83 c4 10          	add    $0x10,%rsp
  401877:	5d                   	pop    %rbp
  401878:	c3                   	retq   
  401879:	48 89 c5             	mov    %rax,%rbp
  40187c:	e9 2b f9 ff ff       	jmpq   4011ac <std::thread::thread<void (&)(), , void>(void (&)()) [clone .constprop.1] [clone .cold]>
  401881:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  401888:	00 00 00 
  40188b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000401890 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)()> > >::~_State_impl()>:
  401890:	48 c7 07 88 30 40 00 	movq   $0x403088,(%rdi)
  401897:	e9 c4 f7 ff ff       	jmpq   401060 <std::thread::_State::~_State()@plt>
  40189c:	0f 1f 40 00          	nopl   0x0(%rax)

00000000004018a0 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)()> > >::~_State_impl()>:
  4018a0:	55                   	push   %rbp
  4018a1:	48 89 fd             	mov    %rdi,%rbp
  4018a4:	e8 e7 ff ff ff       	callq  401890 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)()> > >::~_State_impl()>
  4018a9:	48 89 ef             	mov    %rbp,%rdi
  4018ac:	be 10 00 00 00       	mov    $0x10,%esi
  4018b1:	5d                   	pop    %rbp
  4018b2:	e9 29 f8 ff ff       	jmpq   4010e0 <operator delete(void*, unsigned long)@plt>
  4018b7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  4018be:	00 00 

00000000004018c0 <std::chrono::duration<long, std::ratio<1l, 1000000000l> >::duration<long, void>(long const&) [clone .isra.0]>:
  4018c0:	48 89 37             	mov    %rsi,(%rdi)
  4018c3:	c3                   	retq   
  4018c4:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4018cb:	00 00 00 
  4018ce:	66 90                	xchg   %ax,%ax

00000000004018d0 <std::default_delete<std::thread::_State>::operator()(std::thread::_State*) const [clone .isra.0]>:
  4018d0:	48 85 ff             	test   %rdi,%rdi
  4018d3:	74 0b                	je     4018e0 <std::default_delete<std::thread::_State>::operator()(std::thread::_State*) const [clone .isra.0]+0x10>
  4018d5:	48 8b 07             	mov    (%rdi),%rax
  4018d8:	ff 60 08             	jmpq   *0x8(%rax)
  4018db:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  4018e0:	c3                   	retq   
  4018e1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4018e8:	00 00 00 
  4018eb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000004018f0 <std::chrono::duration_values<long>::zero()>:
  4018f0:	31 c0                	xor    %eax,%eax
  4018f2:	c3                   	retq   
  4018f3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4018fa:	00 00 00 
  4018fd:	0f 1f 00             	nopl   (%rax)

0000000000401900 <std::thread::id::id()>:
  401900:	48 c7 07 00 00 00 00 	movq   $0x0,(%rdi)
  401907:	c3                   	retq   
  401908:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  40190f:	00 

0000000000401910 <std::operator==(std::thread::id, std::thread::id)>:
  401910:	48 39 f7             	cmp    %rsi,%rdi
  401913:	0f 94 c0             	sete   %al
  401916:	c3                   	retq   
  401917:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  40191e:	00 00 

0000000000401920 <std::thread::~thread()>:
  401920:	48 83 ec 08          	sub    $0x8,%rsp
  401924:	e8 47 fd ff ff       	callq  401670 <std::thread::joinable() const [clone .isra.0]>
  401929:	84 c0                	test   %al,%al
  40192b:	75 05                	jne    401932 <std::thread::~thread()+0x12>
  40192d:	48 83 c4 08          	add    $0x8,%rsp
  401931:	c3                   	retq   
  401932:	e8 09 f7 ff ff       	callq  401040 <std::terminate()@plt>
  401937:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  40193e:	00 00 

0000000000401940 <std::mutex::lock()>:
  401940:	48 83 ec 08          	sub    $0x8,%rsp
  401944:	e8 c7 fb ff ff       	callq  401510 <__gthread_mutex_lock(pthread_mutex_t*)>
  401949:	85 c0                	test   %eax,%eax
  40194b:	75 05                	jne    401952 <std::mutex::lock()+0x12>
  40194d:	48 83 c4 08          	add    $0x8,%rsp
  401951:	c3                   	retq   
  401952:	89 c7                	mov    %eax,%edi
  401954:	e8 37 f7 ff ff       	callq  401090 <std::__throw_system_error(int)@plt>
  401959:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000401960 <std::mutex::unlock()>:
  401960:	e9 d3 fb ff ff       	jmpq   401538 <__gthread_mutex_unlock(pthread_mutex_t*)>
  401965:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  40196c:	00 00 00 
  40196f:	90                   	nop

0000000000401970 <std::__mutex_base::__mutex_base()>:
  401970:	c5 f8 57 c0          	vxorps %xmm0,%xmm0,%xmm0
  401974:	48 c7 47 20 00 00 00 	movq   $0x0,0x20(%rdi)
  40197b:	00 
  40197c:	c5 f8 11 07          	vmovups %xmm0,(%rdi)
  401980:	c5 f8 11 47 10       	vmovups %xmm0,0x10(%rdi)
  401985:	c3                   	retq   
  401986:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  40198d:	00 00 00 

0000000000401990 <std::mutex::mutex()>:
  401990:	e9 db ff ff ff       	jmpq   401970 <std::__mutex_base::__mutex_base()>
  401995:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  40199c:	00 00 00 
  40199f:	90                   	nop

00000000004019a0 <interruptor::interruptor()>:
  4019a0:	c7 07 00 00 00 00    	movl   $0x0,(%rdi)
  4019a6:	48 83 c7 08          	add    $0x8,%rdi
  4019aa:	e9 e1 ff ff ff       	jmpq   401990 <std::mutex::mutex()>
  4019af:	90                   	nop

00000000004019b0 <std::thread::thread()>:
  4019b0:	e9 4b ff ff ff       	jmpq   401900 <std::thread::id::id()>
  4019b5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4019bc:	00 00 00 
  4019bf:	90                   	nop

00000000004019c0 <std::__atomic_base<bool>::operator=(bool)>:
  4019c0:	40 88 37             	mov    %sil,(%rdi)
  4019c3:	89 f0                	mov    %esi,%eax
  4019c5:	0f ae f0             	mfence 
  4019c8:	c3                   	retq   
  4019c9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

00000000004019d0 <std::atomic<bool>::operator=(bool)>:
  4019d0:	40 0f b6 f6          	movzbl %sil,%esi
  4019d4:	e9 e7 ff ff ff       	jmpq   4019c0 <std::__atomic_base<bool>::operator=(bool)>
  4019d9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

00000000004019e0 <std::chrono::duration<long, std::ratio<1l, 1l> >::duration<long, void>(long const&)>:
  4019e0:	48 8b 06             	mov    (%rsi),%rax
  4019e3:	48 89 07             	mov    %rax,(%rdi)
  4019e6:	c3                   	retq   
  4019e7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  4019ee:	00 00 

00000000004019f0 <std::lock_guard<std::mutex>::lock_guard(std::mutex&)>:
  4019f0:	49 89 f8             	mov    %rdi,%r8
  4019f3:	48 89 f7             	mov    %rsi,%rdi
  4019f6:	49 89 30             	mov    %rsi,(%r8)
  4019f9:	e9 42 ff ff ff       	jmpq   401940 <std::mutex::lock()>
  4019fe:	66 90                	xchg   %ax,%ax

0000000000401a00 <std::lock_guard<std::mutex>::~lock_guard()>:
  401a00:	48 8b 3f             	mov    (%rdi),%rdi
  401a03:	e9 58 ff ff ff       	jmpq   401960 <std::mutex::unlock()>
  401a08:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  401a0f:	00 

0000000000401a10 <std::chrono::duration<long, std::ratio<1l, 1l> >::zero()>:
  401a10:	48 83 ec 18          	sub    $0x18,%rsp
  401a14:	e8 d7 fe ff ff       	callq  4018f0 <std::chrono::duration_values<long>::zero()>
  401a19:	48 89 e6             	mov    %rsp,%rsi
  401a1c:	48 8d 7c 24 08       	lea    0x8(%rsp),%rdi
  401a21:	48 89 04 24          	mov    %rax,(%rsp)
  401a25:	e8 b6 ff ff ff       	callq  4019e0 <std::chrono::duration<long, std::ratio<1l, 1l> >::duration<long, void>(long const&)>
  401a2a:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  401a2f:	48 83 c4 18          	add    $0x18,%rsp
  401a33:	c3                   	retq   
  401a34:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  401a3b:	00 00 00 
  401a3e:	66 90                	xchg   %ax,%ax

0000000000401a40 <bool std::chrono::operator< <long, std::ratio<1l, 1l>, long, std::ratio<1l, 1l> >(std::chrono::duration<long, std::ratio<1l, 1l> > const&, std::chrono::duration<long, std::ratio<1l, 1l> > const&)>:
  401a40:	48 8b 3f             	mov    (%rdi),%rdi
  401a43:	e8 18 fb ff ff       	callq  401560 <std::chrono::duration<long, std::ratio<1l, 1000000000l> >::count() const [clone .isra.0]>
  401a48:	48 8b 3e             	mov    (%rsi),%rdi
  401a4b:	48 89 c2             	mov    %rax,%rdx
  401a4e:	e8 0d fb ff ff       	callq  401560 <std::chrono::duration<long, std::ratio<1l, 1000000000l> >::count() const [clone .isra.0]>
  401a53:	48 39 c2             	cmp    %rax,%rdx
  401a56:	0f 9c c0             	setl   %al
  401a59:	c3                   	retq   
  401a5a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000401a60 <bool std::chrono::operator<=<long, std::ratio<1l, 1l>, long, std::ratio<1l, 1l> >(std::chrono::duration<long, std::ratio<1l, 1l> > const&, std::chrono::duration<long, std::ratio<1l, 1l> > const&)>:
  401a60:	49 89 f8             	mov    %rdi,%r8
  401a63:	48 83 ec 08          	sub    $0x8,%rsp
  401a67:	48 89 f7             	mov    %rsi,%rdi
  401a6a:	4c 89 c6             	mov    %r8,%rsi
  401a6d:	e8 ce ff ff ff       	callq  401a40 <bool std::chrono::operator< <long, std::ratio<1l, 1l>, long, std::ratio<1l, 1l> >(std::chrono::duration<long, std::ratio<1l, 1l> > const&, std::chrono::duration<long, std::ratio<1l, 1l> > const&)>
  401a72:	48 83 c4 08          	add    $0x8,%rsp
  401a76:	83 f0 01             	xor    $0x1,%eax
  401a79:	c3                   	retq   
  401a7a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000401a80 <std::chrono::duration<long, std::ratio<1l, 1l> > std::chrono::__duration_cast_impl<std::chrono::duration<long, std::ratio<1l, 1l> >, std::ratio<1l, 1l>, long, true, true>::__cast<long, std::ratio<1l, 1l> >(std::chrono::duration<long, std::ratio<1l, 1l> > const&)>:
  401a80:	48 83 ec 18          	sub    $0x18,%rsp
  401a84:	48 8b 3f             	mov    (%rdi),%rdi
  401a87:	e8 d4 fa ff ff       	callq  401560 <std::chrono::duration<long, std::ratio<1l, 1000000000l> >::count() const [clone .isra.0]>
  401a8c:	48 89 e6             	mov    %rsp,%rsi
  401a8f:	48 8d 7c 24 08       	lea    0x8(%rsp),%rdi
  401a94:	48 89 04 24          	mov    %rax,(%rsp)
  401a98:	e8 43 ff ff ff       	callq  4019e0 <std::chrono::duration<long, std::ratio<1l, 1l> >::duration<long, void>(long const&)>
  401a9d:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  401aa2:	48 83 c4 18          	add    $0x18,%rsp
  401aa6:	c3                   	retq   
  401aa7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  401aae:	00 00 

0000000000401ab0 <std::enable_if<std::chrono::__is_duration<std::chrono::duration<long, std::ratio<1l, 1l> > >::value, std::chrono::duration<long, std::ratio<1l, 1l> > >::type std::chrono::duration_cast<std::chrono::duration<long, std::ratio<1l, 1l> >, long, std::ratio<1l, 1l> >(std::chrono::duration<long, std::ratio<1l, 1l> > const&)>:
  401ab0:	e9 cb ff ff ff       	jmpq   401a80 <std::chrono::duration<long, std::ratio<1l, 1l> > std::chrono::__duration_cast_impl<std::chrono::duration<long, std::ratio<1l, 1l> >, std::ratio<1l, 1l>, long, true, true>::__cast<long, std::ratio<1l, 1l> >(std::chrono::duration<long, std::ratio<1l, 1l> > const&)>
  401ab5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  401abc:	00 00 00 
  401abf:	90                   	nop

0000000000401ac0 <std::common_type<std::chrono::duration<long, std::ratio<1l, 1l> >, std::chrono::duration<long, std::ratio<1l, 1l> > >::type std::chrono::operator-<long, std::ratio<1l, 1l>, long, std::ratio<1l, 1l> >(std::chrono::duration<long, std::ratio<1l, 1l> > const&, std::chrono::duration<long, std::ratio<1l, 1l> > const&)>:
  401ac0:	48 83 ec 18          	sub    $0x18,%rsp
  401ac4:	48 8b 3f             	mov    (%rdi),%rdi
  401ac7:	e8 94 fa ff ff       	callq  401560 <std::chrono::duration<long, std::ratio<1l, 1000000000l> >::count() const [clone .isra.0]>
  401acc:	48 8b 3e             	mov    (%rsi),%rdi
  401acf:	48 89 c2             	mov    %rax,%rdx
  401ad2:	e8 89 fa ff ff       	callq  401560 <std::chrono::duration<long, std::ratio<1l, 1000000000l> >::count() const [clone .isra.0]>
  401ad7:	48 89 e6             	mov    %rsp,%rsi
  401ada:	48 8d 7c 24 08       	lea    0x8(%rsp),%rdi
  401adf:	48 29 c2             	sub    %rax,%rdx
  401ae2:	48 89 14 24          	mov    %rdx,(%rsp)
  401ae6:	e8 f5 fe ff ff       	callq  4019e0 <std::chrono::duration<long, std::ratio<1l, 1l> >::duration<long, void>(long const&)>
  401aeb:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  401af0:	48 83 c4 18          	add    $0x18,%rsp
  401af4:	c3                   	retq   
  401af5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  401afc:	00 00 00 
  401aff:	90                   	nop

0000000000401b00 <std::remove_reference<std::thread::id&>::type&& std::move<std::thread::id&>(std::thread::id&)>:
  401b00:	48 89 f8             	mov    %rdi,%rax
  401b03:	c3                   	retq   
  401b04:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  401b0b:	00 00 00 
  401b0e:	66 90                	xchg   %ax,%ax

0000000000401b10 <std::enable_if<std::__and_<std::__not_<std::__is_tuple_like<std::thread::id> >, std::is_move_constructible<std::thread::id>, std::is_move_assignable<std::thread::id> >::value, void>::type std::swap<std::thread::id>(std::thread::id&, std::thread::id&)>:
  401b10:	55                   	push   %rbp
  401b11:	53                   	push   %rbx
  401b12:	48 89 fd             	mov    %rdi,%rbp
  401b15:	48 89 f3             	mov    %rsi,%rbx
  401b18:	48 83 ec 18          	sub    $0x18,%rsp
  401b1c:	e8 df ff ff ff       	callq  401b00 <std::remove_reference<std::thread::id&>::type&& std::move<std::thread::id&>(std::thread::id&)>
  401b21:	48 89 df             	mov    %rbx,%rdi
  401b24:	48 8b 00             	mov    (%rax),%rax
  401b27:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  401b2c:	e8 cf ff ff ff       	callq  401b00 <std::remove_reference<std::thread::id&>::type&& std::move<std::thread::id&>(std::thread::id&)>
  401b31:	48 8d 7c 24 08       	lea    0x8(%rsp),%rdi
  401b36:	48 8b 00             	mov    (%rax),%rax
  401b39:	48 89 45 00          	mov    %rax,0x0(%rbp)
  401b3d:	e8 be ff ff ff       	callq  401b00 <std::remove_reference<std::thread::id&>::type&& std::move<std::thread::id&>(std::thread::id&)>
  401b42:	48 8b 00             	mov    (%rax),%rax
  401b45:	48 89 03             	mov    %rax,(%rbx)
  401b48:	48 83 c4 18          	add    $0x18,%rsp
  401b4c:	5b                   	pop    %rbx
  401b4d:	5d                   	pop    %rbp
  401b4e:	c3                   	retq   
  401b4f:	90                   	nop

0000000000401b50 <std::thread::swap(std::thread&)>:
  401b50:	e9 bb ff ff ff       	jmpq   401b10 <std::enable_if<std::__and_<std::__not_<std::__is_tuple_like<std::thread::id> >, std::is_move_constructible<std::thread::id>, std::is_move_assignable<std::thread::id> >::value, void>::type std::swap<std::thread::id>(std::thread::id&, std::thread::id&)>
  401b55:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  401b5c:	00 00 00 
  401b5f:	90                   	nop

0000000000401b60 <std::thread::operator=(std::thread&&)>:
  401b60:	41 54                	push   %r12
  401b62:	55                   	push   %rbp
  401b63:	49 89 fc             	mov    %rdi,%r12
  401b66:	48 89 f5             	mov    %rsi,%rbp
  401b69:	48 83 ec 08          	sub    $0x8,%rsp
  401b6d:	e8 fe fa ff ff       	callq  401670 <std::thread::joinable() const [clone .isra.0]>
  401b72:	84 c0                	test   %al,%al
  401b74:	75 16                	jne    401b8c <std::thread::operator=(std::thread&&)+0x2c>
  401b76:	48 89 ee             	mov    %rbp,%rsi
  401b79:	4c 89 e7             	mov    %r12,%rdi
  401b7c:	e8 cf ff ff ff       	callq  401b50 <std::thread::swap(std::thread&)>
  401b81:	48 83 c4 08          	add    $0x8,%rsp
  401b85:	4c 89 e0             	mov    %r12,%rax
  401b88:	5d                   	pop    %rbp
  401b89:	41 5c                	pop    %r12
  401b8b:	c3                   	retq   
  401b8c:	e8 af f4 ff ff       	callq  401040 <std::terminate()@plt>
  401b91:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  401b98:	00 00 00 
  401b9b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000401ba0 <void (&std::forward<void (&)()>(std::remove_reference<void (&)()>::type&))()>:
  401ba0:	48 89 f8             	mov    %rdi,%rax
  401ba3:	c3                   	retq   
  401ba4:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  401bab:	00 00 00 
  401bae:	66 90                	xchg   %ax,%ax

0000000000401bb0 <std::_Head_base<0ul, void (*)(), false>::_Head_base(void (* const&)())>:
  401bb0:	48 8b 06             	mov    (%rsi),%rax
  401bb3:	48 89 07             	mov    %rax,(%rdi)
  401bb6:	c3                   	retq   
  401bb7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  401bbe:	00 00 

0000000000401bc0 <std::_Tuple_impl<0ul, void (*)()>::_Tuple_impl(void (* const&)())>:
  401bc0:	e9 eb ff ff ff       	jmpq   401bb0 <std::_Head_base<0ul, void (*)(), false>::_Head_base(void (* const&)())>
  401bc5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  401bcc:	00 00 00 
  401bcf:	90                   	nop

0000000000401bd0 <std::tuple<void (*)()>::tuple<void, true>(void (* const&)())>:
  401bd0:	e9 eb ff ff ff       	jmpq   401bc0 <std::_Tuple_impl<0ul, void (*)()>::_Tuple_impl(void (* const&)())>
  401bd5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  401bdc:	00 00 00 
  401bdf:	90                   	nop

0000000000401be0 <std::thread::_Invoker<std::tuple<std::decay<void (&)()>::type> > std::thread::__make_invoker<void (&)()>(void (&)())>:
  401be0:	41 54                	push   %r12
  401be2:	49 89 fc             	mov    %rdi,%r12
  401be5:	48 89 f7             	mov    %rsi,%rdi
  401be8:	48 83 ec 10          	sub    $0x10,%rsp
  401bec:	e8 af ff ff ff       	callq  401ba0 <void (&std::forward<void (&)()>(std::remove_reference<void (&)()>::type&))()>
  401bf1:	48 8d 74 24 08       	lea    0x8(%rsp),%rsi
  401bf6:	4c 89 e7             	mov    %r12,%rdi
  401bf9:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  401bfe:	e8 cd ff ff ff       	callq  401bd0 <std::tuple<void (*)()>::tuple<void, true>(void (* const&)())>
  401c03:	48 83 c4 10          	add    $0x10,%rsp
  401c07:	4c 89 e0             	mov    %r12,%rax
  401c0a:	41 5c                	pop    %r12
  401c0c:	c3                   	retq   
  401c0d:	0f 1f 00             	nopl   (%rax)

0000000000401c10 <std::chrono::duration<long, std::ratio<1l, 1l> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long, std::ratio<1l, 1l> >, (char)49>()>:
  401c10:	48 83 ec 18          	sub    $0x18,%rsp
  401c14:	48 8d 7c 24 08       	lea    0x8(%rsp),%rdi
  401c19:	48 c7 04 24 01 00 00 	movq   $0x1,(%rsp)
  401c20:	00 
  401c21:	48 89 e6             	mov    %rsp,%rsi
  401c24:	e8 b7 fd ff ff       	callq  4019e0 <std::chrono::duration<long, std::ratio<1l, 1l> >::duration<long, void>(long const&)>
  401c29:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  401c2e:	48 83 c4 18          	add    $0x18,%rsp
  401c32:	c3                   	retq   
  401c33:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  401c3a:	00 00 00 
  401c3d:	0f 1f 00             	nopl   (%rax)

0000000000401c40 <std::chrono::duration<long, std::ratio<1l, 1l> > std::literals::chrono_literals::operator"" s<(char)49>()>:
  401c40:	e9 cb ff ff ff       	jmpq   401c10 <std::chrono::duration<long, std::ratio<1l, 1l> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long, std::ratio<1l, 1l> >, (char)49>()>
  401c45:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  401c4c:	00 00 00 
  401c4f:	90                   	nop

0000000000401c50 <std::chrono::duration<long, std::ratio<1l, 1000000000l> > std::chrono::__duration_cast_impl<std::chrono::duration<long, std::ratio<1l, 1000000000l> >, std::ratio<1000000000l, 1l>, long, false, true>::__cast<long, std::ratio<1l, 1l> >(std::chrono::duration<long, std::ratio<1l, 1l> > const&)>:
  401c50:	48 83 ec 10          	sub    $0x10,%rsp
  401c54:	48 8b 3f             	mov    (%rdi),%rdi
  401c57:	e8 04 f9 ff ff       	callq  401560 <std::chrono::duration<long, std::ratio<1l, 1000000000l> >::count() const [clone .isra.0]>
  401c5c:	48 8d 7c 24 08       	lea    0x8(%rsp),%rdi
  401c61:	48 69 f0 00 ca 9a 3b 	imul   $0x3b9aca00,%rax,%rsi
  401c68:	e8 53 fc ff ff       	callq  4018c0 <std::chrono::duration<long, std::ratio<1l, 1000000000l> >::duration<long, void>(long const&) [clone .isra.0]>
  401c6d:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  401c72:	48 83 c4 10          	add    $0x10,%rsp
  401c76:	c3                   	retq   
  401c77:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  401c7e:	00 00 

0000000000401c80 <std::enable_if<std::chrono::__is_duration<std::chrono::duration<long, std::ratio<1l, 1000000000l> > >::value, std::chrono::duration<long, std::ratio<1l, 1000000000l> > >::type std::chrono::duration_cast<std::chrono::duration<long, std::ratio<1l, 1000000000l> >, long, std::ratio<1l, 1l> >(std::chrono::duration<long, std::ratio<1l, 1l> > const&)>:
  401c80:	e9 cb ff ff ff       	jmpq   401c50 <std::chrono::duration<long, std::ratio<1l, 1000000000l> > std::chrono::__duration_cast_impl<std::chrono::duration<long, std::ratio<1l, 1000000000l> >, std::ratio<1000000000l, 1l>, long, false, true>::__cast<long, std::ratio<1l, 1l> >(std::chrono::duration<long, std::ratio<1l, 1l> > const&)>
  401c85:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  401c8c:	00 00 00 
  401c8f:	90                   	nop

0000000000401c90 <void std::this_thread::sleep_for<long, std::ratio<1l, 1l> >(std::chrono::duration<long, std::ratio<1l, 1l> > const&)>:
  401c90:	55                   	push   %rbp
  401c91:	48 89 fd             	mov    %rdi,%rbp
  401c94:	48 83 ec 20          	sub    $0x20,%rsp
  401c98:	e8 73 fd ff ff       	callq  401a10 <std::chrono::duration<long, std::ratio<1l, 1l> >::zero()>
  401c9d:	48 8d 74 24 10       	lea    0x10(%rsp),%rsi
  401ca2:	48 89 ef             	mov    %rbp,%rdi
  401ca5:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  401caa:	e8 b1 fd ff ff       	callq  401a60 <bool std::chrono::operator<=<long, std::ratio<1l, 1l>, long, std::ratio<1l, 1l> >(std::chrono::duration<long, std::ratio<1l, 1l> > const&, std::chrono::duration<long, std::ratio<1l, 1l> > const&)>
  401caf:	84 c0                	test   %al,%al
  401cb1:	74 0d                	je     401cc0 <void std::this_thread::sleep_for<long, std::ratio<1l, 1l> >(std::chrono::duration<long, std::ratio<1l, 1l> > const&)+0x30>
  401cb3:	48 83 c4 20          	add    $0x20,%rsp
  401cb7:	5d                   	pop    %rbp
  401cb8:	c3                   	retq   
  401cb9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  401cc0:	48 89 ef             	mov    %rbp,%rdi
  401cc3:	e8 e8 fd ff ff       	callq  401ab0 <std::enable_if<std::chrono::__is_duration<std::chrono::duration<long, std::ratio<1l, 1l> > >::value, std::chrono::duration<long, std::ratio<1l, 1l> > >::type std::chrono::duration_cast<std::chrono::duration<long, std::ratio<1l, 1l> >, long, std::ratio<1l, 1l> >(std::chrono::duration<long, std::ratio<1l, 1l> > const&)>
  401cc8:	48 8d 74 24 08       	lea    0x8(%rsp),%rsi
  401ccd:	48 89 ef             	mov    %rbp,%rdi
  401cd0:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  401cd5:	e8 e6 fd ff ff       	callq  401ac0 <std::common_type<std::chrono::duration<long, std::ratio<1l, 1l> >, std::chrono::duration<long, std::ratio<1l, 1l> > >::type std::chrono::operator-<long, std::ratio<1l, 1l>, long, std::ratio<1l, 1l> >(std::chrono::duration<long, std::ratio<1l, 1l> > const&, std::chrono::duration<long, std::ratio<1l, 1l> > const&)>
  401cda:	48 8d 7c 24 10       	lea    0x10(%rsp),%rdi
  401cdf:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  401ce4:	e8 97 ff ff ff       	callq  401c80 <std::enable_if<std::chrono::__is_duration<std::chrono::duration<long, std::ratio<1l, 1000000000l> > >::value, std::chrono::duration<long, std::ratio<1l, 1000000000l> > >::type std::chrono::duration_cast<std::chrono::duration<long, std::ratio<1l, 1000000000l> >, long, std::ratio<1l, 1l> >(std::chrono::duration<long, std::ratio<1l, 1l> > const&)>
  401ce9:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  401cee:	49 89 c0             	mov    %rax,%r8
  401cf1:	e8 6a f8 ff ff       	callq  401560 <std::chrono::duration<long, std::ratio<1l, 1000000000l> >::count() const [clone .isra.0]>
  401cf6:	4c 89 c7             	mov    %r8,%rdi
  401cf9:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  401cfe:	e8 5d f8 ff ff       	callq  401560 <std::chrono::duration<long, std::ratio<1l, 1000000000l> >::count() const [clone .isra.0]>
  401d03:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  401d08:	eb 10                	jmp    401d1a <void std::this_thread::sleep_for<long, std::ratio<1l, 1l> >(std::chrono::duration<long, std::ratio<1l, 1l> > const&)+0x8a>
  401d0a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  401d10:	e8 1b f3 ff ff       	callq  401030 <__errno_location@plt>
  401d15:	83 38 04             	cmpl   $0x4,(%rax)
  401d18:	75 99                	jne    401cb3 <void std::this_thread::sleep_for<long, std::ratio<1l, 1l> >(std::chrono::duration<long, std::ratio<1l, 1l> > const&)+0x23>
  401d1a:	48 8d 74 24 10       	lea    0x10(%rsp),%rsi
  401d1f:	48 89 f7             	mov    %rsi,%rdi
  401d22:	e8 29 f3 ff ff       	callq  401050 <nanosleep@plt>
  401d27:	83 f8 ff             	cmp    $0xffffffff,%eax
  401d2a:	74 e4                	je     401d10 <void std::this_thread::sleep_for<long, std::ratio<1l, 1l> >(std::chrono::duration<long, std::ratio<1l, 1l> > const&)+0x80>
  401d2c:	48 83 c4 20          	add    $0x20,%rsp
  401d30:	5d                   	pop    %rbp
  401d31:	c3                   	retq   
  401d32:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  401d39:	00 00 00 
  401d3c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000401d40 <std::__detail::_Mod<unsigned long, 2147483647ul, 16807ul, 0ul, true, true>::__calc(unsigned long)>:
  401d40:	48 69 ff a7 41 00 00 	imul   $0x41a7,%rdi,%rdi
  401d47:	48 ba 05 00 00 00 02 	movabs $0x200000005,%rdx
  401d4e:	00 00 00 
  401d51:	48 89 f8             	mov    %rdi,%rax
  401d54:	48 f7 e2             	mul    %rdx
  401d57:	48 89 f8             	mov    %rdi,%rax
  401d5a:	48 29 d0             	sub    %rdx,%rax
  401d5d:	48 d1 e8             	shr    %rax
  401d60:	48 01 d0             	add    %rdx,%rax
  401d63:	48 c1 e8 1e          	shr    $0x1e,%rax
  401d67:	48 89 c2             	mov    %rax,%rdx
  401d6a:	48 c1 e2 1f          	shl    $0x1f,%rdx
  401d6e:	48 29 c2             	sub    %rax,%rdx
  401d71:	48 89 f8             	mov    %rdi,%rax
  401d74:	48 29 d0             	sub    %rdx,%rax
  401d77:	c3                   	retq   
  401d78:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  401d7f:	00 

0000000000401d80 <unsigned long std::__detail::__mod<unsigned long, 2147483647ul, 16807ul, 0ul>(unsigned long)>:
  401d80:	e9 bb ff ff ff       	jmpq   401d40 <std::__detail::_Mod<unsigned long, 2147483647ul, 16807ul, 0ul, true, true>::__calc(unsigned long)>
  401d85:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  401d8c:	00 00 00 
  401d8f:	90                   	nop

0000000000401d90 <std::thread::_Invoker<std::tuple<void (*)()> >&& std::forward<std::thread::_Invoker<std::tuple<void (*)()> > >(std::remove_reference<std::thread::_Invoker<std::tuple<void (*)()> > >::type&)>:
  401d90:	48 89 f8             	mov    %rdi,%rax
  401d93:	c3                   	retq   
  401d94:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  401d9b:	00 00 00 
  401d9e:	66 90                	xchg   %ax,%ax

0000000000401da0 <std::thread::_State::_State()>:
  401da0:	48 c7 07 50 5d 40 00 	movq   $0x405d50,(%rdi)
  401da7:	c3                   	retq   
  401da8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  401daf:	00 

0000000000401db0 <std::remove_reference<std::thread::_State*&>::type&& std::move<std::thread::_State*&>(std::thread::_State*&)>:
  401db0:	48 89 f8             	mov    %rdi,%rax
  401db3:	c3                   	retq   
  401db4:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  401dbb:	00 00 00 
  401dbe:	66 90                	xchg   %ax,%ax

0000000000401dc0 <std::__detail::_Mod<unsigned long, 2147483647ul, 1ul, 0ul, true, true>::__calc(unsigned long)>:
  401dc0:	48 89 f8             	mov    %rdi,%rax
  401dc3:	48 ba 05 00 00 00 02 	movabs $0x200000005,%rdx
  401dca:	00 00 00 
  401dcd:	48 f7 e2             	mul    %rdx
  401dd0:	48 89 f8             	mov    %rdi,%rax
  401dd3:	48 29 d0             	sub    %rdx,%rax
  401dd6:	48 d1 e8             	shr    %rax
  401dd9:	48 01 d0             	add    %rdx,%rax
  401ddc:	48 c1 e8 1e          	shr    $0x1e,%rax
  401de0:	48 89 c2             	mov    %rax,%rdx
  401de3:	48 c1 e2 1f          	shl    $0x1f,%rdx
  401de7:	48 29 c2             	sub    %rax,%rdx
  401dea:	48 89 f8             	mov    %rdi,%rax
  401ded:	48 29 d0             	sub    %rdx,%rax
  401df0:	c3                   	retq   
  401df1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  401df8:	00 00 00 
  401dfb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000401e00 <unsigned long std::__detail::__mod<unsigned long, 2147483647ul, 1ul, 0ul>(unsigned long)>:
  401e00:	e9 bb ff ff ff       	jmpq   401dc0 <std::__detail::_Mod<unsigned long, 2147483647ul, 1ul, 0ul, true, true>::__calc(unsigned long)>
  401e05:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  401e0c:	00 00 00 
  401e0f:	90                   	nop

0000000000401e10 <std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>::seed(unsigned long) [clone .isra.0]>:
  401e10:	41 54                	push   %r12
  401e12:	55                   	push   %rbp
  401e13:	49 89 f4             	mov    %rsi,%r12
  401e16:	53                   	push   %rbx
  401e17:	48 89 fb             	mov    %rdi,%rbx
  401e1a:	31 ff                	xor    %edi,%edi
  401e1c:	e8 df ff ff ff       	callq  401e00 <unsigned long std::__detail::__mod<unsigned long, 2147483647ul, 1ul, 0ul>(unsigned long)>
  401e21:	4c 89 e7             	mov    %r12,%rdi
  401e24:	48 89 c5             	mov    %rax,%rbp
  401e27:	e8 d4 ff ff ff       	callq  401e00 <unsigned long std::__detail::__mod<unsigned long, 2147483647ul, 1ul, 0ul>(unsigned long)>
  401e2c:	48 85 ed             	test   %rbp,%rbp
  401e2f:	75 0c                	jne    401e3d <std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>::seed(unsigned long) [clone .isra.0]+0x2d>
  401e31:	48 85 c0             	test   %rax,%rax
  401e34:	ba 01 00 00 00       	mov    $0x1,%edx
  401e39:	48 0f 44 c2          	cmove  %rdx,%rax
  401e3d:	48 89 03             	mov    %rax,(%rbx)
  401e40:	5b                   	pop    %rbx
  401e41:	5d                   	pop    %rbp
  401e42:	41 5c                	pop    %r12
  401e44:	c3                   	retq   
  401e45:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  401e4c:	00 00 00 
  401e4f:	90                   	nop

0000000000401e50 <std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>::linear_congruential_engine(unsigned long)>:
  401e50:	e9 bb ff ff ff       	jmpq   401e10 <std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>::seed(unsigned long) [clone .isra.0]>
  401e55:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  401e5c:	00 00 00 
  401e5f:	90                   	nop

0000000000401e60 <std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>::linear_congruential_engine()>:
  401e60:	be 01 00 00 00       	mov    $0x1,%esi
  401e65:	e9 e6 ff ff ff       	jmpq   401e50 <std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>::linear_congruential_engine(unsigned long)>
  401e6a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000401e70 <void (*&&std::forward<void (*)()>(std::remove_reference<void (*)()>::type&))()>:
  401e70:	48 89 f8             	mov    %rdi,%rax
  401e73:	c3                   	retq   
  401e74:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  401e7b:	00 00 00 
  401e7e:	66 90                	xchg   %ax,%ax

0000000000401e80 <void std::__invoke_impl<void, void (*)()>(std::__invoke_other, void (*&&)()) [clone .isra.0]>:
  401e80:	48 83 ec 08          	sub    $0x8,%rsp
  401e84:	e8 e7 ff ff ff       	callq  401e70 <void (*&&std::forward<void (*)()>(std::remove_reference<void (*)()>::type&))()>
  401e89:	48 8b 00             	mov    (%rax),%rax
  401e8c:	48 83 c4 08          	add    $0x8,%rsp
  401e90:	ff e0                	jmpq   *%rax
  401e92:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  401e99:	00 00 00 
  401e9c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000401ea0 <std::_Head_base<0ul, void (*)(), false>::_Head_base<void (*)()>(void (*&&)())>:
  401ea0:	53                   	push   %rbx
  401ea1:	48 89 fb             	mov    %rdi,%rbx
  401ea4:	48 89 f7             	mov    %rsi,%rdi
  401ea7:	e8 c4 ff ff ff       	callq  401e70 <void (*&&std::forward<void (*)()>(std::remove_reference<void (*)()>::type&))()>
  401eac:	48 8b 00             	mov    (%rax),%rax
  401eaf:	48 89 03             	mov    %rax,(%rbx)
  401eb2:	5b                   	pop    %rbx
  401eb3:	c3                   	retq   
  401eb4:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  401ebb:	00 00 00 
  401ebe:	66 90                	xchg   %ax,%ax

0000000000401ec0 <std::_Head_base<0ul, void (*)(), false>::_M_head(std::_Head_base<0ul, void (*)(), false>&)>:
  401ec0:	48 89 f8             	mov    %rdi,%rax
  401ec3:	c3                   	retq   
  401ec4:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  401ecb:	00 00 00 
  401ece:	66 90                	xchg   %ax,%ax

0000000000401ed0 <std::_Tuple_impl<0ul, void (*)()>::_M_head(std::_Tuple_impl<0ul, void (*)()>&)>:
  401ed0:	e9 eb ff ff ff       	jmpq   401ec0 <std::_Head_base<0ul, void (*)(), false>::_M_head(std::_Head_base<0ul, void (*)(), false>&)>
  401ed5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  401edc:	00 00 00 
  401edf:	90                   	nop

0000000000401ee0 <std::_Tuple_impl<0ul, void (*)()>::_Tuple_impl(std::_Tuple_impl<0ul, void (*)()>&&)>:
  401ee0:	55                   	push   %rbp
  401ee1:	48 89 fd             	mov    %rdi,%rbp
  401ee4:	48 89 f7             	mov    %rsi,%rdi
  401ee7:	e8 e4 ff ff ff       	callq  401ed0 <std::_Tuple_impl<0ul, void (*)()>::_M_head(std::_Tuple_impl<0ul, void (*)()>&)>
  401eec:	48 89 c7             	mov    %rax,%rdi
  401eef:	e8 7c ff ff ff       	callq  401e70 <void (*&&std::forward<void (*)()>(std::remove_reference<void (*)()>::type&))()>
  401ef4:	48 89 ef             	mov    %rbp,%rdi
  401ef7:	5d                   	pop    %rbp
  401ef8:	48 89 c6             	mov    %rax,%rsi
  401efb:	e9 a0 ff ff ff       	jmpq   401ea0 <std::_Head_base<0ul, void (*)(), false>::_Head_base<void (*)()>(void (*&&)())>

0000000000401f00 <std::tuple<void (*)()>::tuple(std::tuple<void (*)()>&&)>:
  401f00:	e9 db ff ff ff       	jmpq   401ee0 <std::_Tuple_impl<0ul, void (*)()>::_Tuple_impl(std::_Tuple_impl<0ul, void (*)()>&&)>
  401f05:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  401f0c:	00 00 00 
  401f0f:	90                   	nop

0000000000401f10 <std::thread::_Invoker<std::tuple<void (*)()> >::_Invoker(std::thread::_Invoker<std::tuple<void (*)()> >&&)>:
  401f10:	e9 eb ff ff ff       	jmpq   401f00 <std::tuple<void (*)()>::tuple(std::tuple<void (*)()>&&)>
  401f15:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  401f1c:	00 00 00 
  401f1f:	90                   	nop

0000000000401f20 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)()> > >::_State_impl(std::thread::_Invoker<std::tuple<void (*)()> >&&)>:
  401f20:	55                   	push   %rbp
  401f21:	53                   	push   %rbx
  401f22:	48 89 fb             	mov    %rdi,%rbx
  401f25:	48 89 f5             	mov    %rsi,%rbp
  401f28:	48 83 ec 08          	sub    $0x8,%rsp
  401f2c:	e8 6f fe ff ff       	callq  401da0 <std::thread::_State::_State()>
  401f31:	48 c7 03 88 30 40 00 	movq   $0x403088,(%rbx)
  401f38:	48 89 ef             	mov    %rbp,%rdi
  401f3b:	e8 50 fe ff ff       	callq  401d90 <std::thread::_Invoker<std::tuple<void (*)()> >&& std::forward<std::thread::_Invoker<std::tuple<void (*)()> > >(std::remove_reference<std::thread::_Invoker<std::tuple<void (*)()> > >::type&)>
  401f40:	48 83 c4 08          	add    $0x8,%rsp
  401f44:	48 8d 7b 08          	lea    0x8(%rbx),%rdi
  401f48:	5b                   	pop    %rbx
  401f49:	48 89 c6             	mov    %rax,%rsi
  401f4c:	5d                   	pop    %rbp
  401f4d:	e9 be ff ff ff       	jmpq   401f10 <std::thread::_Invoker<std::tuple<void (*)()> >::_Invoker(std::thread::_Invoker<std::tuple<void (*)()> >&&)>
  401f52:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  401f59:	00 00 00 
  401f5c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000401f60 <std::_Head_base<0ul, std::thread::_State*, false>::_Head_base()>:
  401f60:	48 c7 07 00 00 00 00 	movq   $0x0,(%rdi)
  401f67:	c3                   	retq   
  401f68:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  401f6f:	00 

0000000000401f70 <std::_Tuple_impl<0ul, std::thread::_State*, std::default_delete<std::thread::_State> >::_Tuple_impl()>:
  401f70:	e9 eb ff ff ff       	jmpq   401f60 <std::_Head_base<0ul, std::thread::_State*, false>::_Head_base()>
  401f75:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  401f7c:	00 00 00 
  401f7f:	90                   	nop

0000000000401f80 <std::tuple<std::thread::_State*, std::default_delete<std::thread::_State> >::tuple<std::thread::_State*, std::default_delete<std::thread::_State>, true>()>:
  401f80:	e9 eb ff ff ff       	jmpq   401f70 <std::_Tuple_impl<0ul, std::thread::_State*, std::default_delete<std::thread::_State> >::_Tuple_impl()>
  401f85:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  401f8c:	00 00 00 
  401f8f:	90                   	nop

0000000000401f90 <std::_Head_base<0ul, std::thread::_State*, false>::_M_head(std::_Head_base<0ul, std::thread::_State*, false>&)>:
  401f90:	48 89 f8             	mov    %rdi,%rax
  401f93:	c3                   	retq   
  401f94:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  401f9b:	00 00 00 
  401f9e:	66 90                	xchg   %ax,%ax

0000000000401fa0 <std::_Tuple_impl<0ul, std::thread::_State*, std::default_delete<std::thread::_State> >::_M_head(std::_Tuple_impl<0ul, std::thread::_State*, std::default_delete<std::thread::_State> >&)>:
  401fa0:	e9 eb ff ff ff       	jmpq   401f90 <std::_Head_base<0ul, std::thread::_State*, false>::_M_head(std::_Head_base<0ul, std::thread::_State*, false>&)>
  401fa5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  401fac:	00 00 00 
  401faf:	90                   	nop

0000000000401fb0 <std::thread::_State*& std::__get_helper<0ul, std::thread::_State*, std::default_delete<std::thread::_State> >(std::_Tuple_impl<0ul, std::thread::_State*, std::default_delete<std::thread::_State> >&)>:
  401fb0:	e9 eb ff ff ff       	jmpq   401fa0 <std::_Tuple_impl<0ul, std::thread::_State*, std::default_delete<std::thread::_State> >::_M_head(std::_Tuple_impl<0ul, std::thread::_State*, std::default_delete<std::thread::_State> >&)>
  401fb5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  401fbc:	00 00 00 
  401fbf:	90                   	nop

0000000000401fc0 <std::tuple_element<0ul, std::tuple<std::thread::_State*, std::default_delete<std::thread::_State> > >::type& std::get<0ul, std::thread::_State*, std::default_delete<std::thread::_State> >(std::tuple<std::thread::_State*, std::default_delete<std::thread::_State> >&)>:
  401fc0:	e9 eb ff ff ff       	jmpq   401fb0 <std::thread::_State*& std::__get_helper<0ul, std::thread::_State*, std::default_delete<std::thread::_State> >(std::_Tuple_impl<0ul, std::thread::_State*, std::default_delete<std::thread::_State> >&)>
  401fc5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  401fcc:	00 00 00 
  401fcf:	90                   	nop

0000000000401fd0 <std::__uniq_ptr_impl<std::thread::_State, std::default_delete<std::thread::_State> >::_M_ptr()>:
  401fd0:	e9 eb ff ff ff       	jmpq   401fc0 <std::tuple_element<0ul, std::tuple<std::thread::_State*, std::default_delete<std::thread::_State> > >::type& std::get<0ul, std::thread::_State*, std::default_delete<std::thread::_State> >(std::tuple<std::thread::_State*, std::default_delete<std::thread::_State> >&)>
  401fd5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  401fdc:	00 00 00 
  401fdf:	90                   	nop

0000000000401fe0 <std::__uniq_ptr_impl<std::thread::_State, std::default_delete<std::thread::_State> >::__uniq_ptr_impl(std::thread::_State*)>:
  401fe0:	55                   	push   %rbp
  401fe1:	53                   	push   %rbx
  401fe2:	48 89 fd             	mov    %rdi,%rbp
  401fe5:	48 89 f3             	mov    %rsi,%rbx
  401fe8:	48 83 ec 08          	sub    $0x8,%rsp
  401fec:	e8 8f ff ff ff       	callq  401f80 <std::tuple<std::thread::_State*, std::default_delete<std::thread::_State> >::tuple<std::thread::_State*, std::default_delete<std::thread::_State>, true>()>
  401ff1:	48 89 ef             	mov    %rbp,%rdi
  401ff4:	e8 d7 ff ff ff       	callq  401fd0 <std::__uniq_ptr_impl<std::thread::_State, std::default_delete<std::thread::_State> >::_M_ptr()>
  401ff9:	48 89 18             	mov    %rbx,(%rax)
  401ffc:	48 83 c4 08          	add    $0x8,%rsp
  402000:	5b                   	pop    %rbx
  402001:	5d                   	pop    %rbp
  402002:	c3                   	retq   
  402003:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  40200a:	00 00 00 
  40200d:	0f 1f 00             	nopl   (%rax)

0000000000402010 <std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> >::unique_ptr<std::default_delete<std::thread::_State>, void>(std::thread::_State*)>:
  402010:	e9 cb ff ff ff       	jmpq   401fe0 <std::__uniq_ptr_impl<std::thread::_State, std::default_delete<std::thread::_State> >::__uniq_ptr_impl(std::thread::_State*)>
  402015:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  40201c:	00 00 00 
  40201f:	90                   	nop

0000000000402020 <std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> > std::thread::_S_make_state<std::thread::_Invoker<std::tuple<void (*)()> > >(std::thread::_Invoker<std::tuple<void (*)()> >&&)>:
  402020:	41 55                	push   %r13
  402022:	41 54                	push   %r12
  402024:	49 89 fc             	mov    %rdi,%r12
  402027:	48 89 f7             	mov    %rsi,%rdi
  40202a:	55                   	push   %rbp
  40202b:	e8 60 fd ff ff       	callq  401d90 <std::thread::_Invoker<std::tuple<void (*)()> >&& std::forward<std::thread::_Invoker<std::tuple<void (*)()> > >(std::remove_reference<std::thread::_Invoker<std::tuple<void (*)()> > >::type&)>
  402030:	bf 10 00 00 00       	mov    $0x10,%edi
  402035:	49 89 c5             	mov    %rax,%r13
  402038:	e8 93 f0 ff ff       	callq  4010d0 <operator new(unsigned long)@plt>
  40203d:	4c 89 ee             	mov    %r13,%rsi
  402040:	48 89 c5             	mov    %rax,%rbp
  402043:	48 89 c7             	mov    %rax,%rdi
  402046:	e8 d5 fe ff ff       	callq  401f20 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)()> > >::_State_impl(std::thread::_Invoker<std::tuple<void (*)()> >&&)>
  40204b:	48 89 ee             	mov    %rbp,%rsi
  40204e:	4c 89 e7             	mov    %r12,%rdi
  402051:	e8 ba ff ff ff       	callq  402010 <std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> >::unique_ptr<std::default_delete<std::thread::_State>, void>(std::thread::_State*)>
  402056:	4c 89 e0             	mov    %r12,%rax
  402059:	5d                   	pop    %rbp
  40205a:	41 5c                	pop    %r12
  40205c:	41 5d                	pop    %r13
  40205e:	c3                   	retq   
  40205f:	90                   	nop

0000000000402060 <std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> >::~unique_ptr()>:
  402060:	53                   	push   %rbx
  402061:	e8 6a ff ff ff       	callq  401fd0 <std::__uniq_ptr_impl<std::thread::_State, std::default_delete<std::thread::_State> >::_M_ptr()>
  402066:	48 83 38 00          	cmpq   $0x0,(%rax)
  40206a:	48 89 c3             	mov    %rax,%rbx
  40206d:	74 10                	je     40207f <std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> >::~unique_ptr()+0x1f>
  40206f:	48 89 c7             	mov    %rax,%rdi
  402072:	e8 39 fd ff ff       	callq  401db0 <std::remove_reference<std::thread::_State*&>::type&& std::move<std::thread::_State*&>(std::thread::_State*&)>
  402077:	48 8b 38             	mov    (%rax),%rdi
  40207a:	e8 51 f8 ff ff       	callq  4018d0 <std::default_delete<std::thread::_State>::operator()(std::thread::_State*) const [clone .isra.0]>
  40207f:	48 c7 03 00 00 00 00 	movq   $0x0,(%rbx)
  402086:	5b                   	pop    %rbx
  402087:	c3                   	retq   
  402088:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  40208f:	00 

0000000000402090 <std::remove_reference<std::tuple<void (*)()>&>::type&& std::move<std::tuple<void (*)()>&>(std::tuple<void (*)()>&)>:
  402090:	48 89 f8             	mov    %rdi,%rax
  402093:	c3                   	retq   
  402094:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  40209b:	00 00 00 
  40209e:	66 90                	xchg   %ax,%ax

00000000004020a0 <std::__invoke_result<void (*)()>::type std::__invoke<void (*)()>(void (*&&)())>:
  4020a0:	48 83 ec 08          	sub    $0x8,%rsp
  4020a4:	e8 c7 fd ff ff       	callq  401e70 <void (*&&std::forward<void (*)()>(std::remove_reference<void (*)()>::type&))()>
  4020a9:	48 83 c4 08          	add    $0x8,%rsp
  4020ad:	48 89 c7             	mov    %rax,%rdi
  4020b0:	e9 cb fd ff ff       	jmpq   401e80 <void std::__invoke_impl<void, void (*)()>(std::__invoke_other, void (*&&)()) [clone .isra.0]>
  4020b5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4020bc:	00 00 00 
  4020bf:	90                   	nop

00000000004020c0 <void (*&&std::forward<void (*&&)()>(std::remove_reference<void (*&&)()>::type&))()>:
  4020c0:	48 89 f8             	mov    %rdi,%rax
  4020c3:	c3                   	retq   
  4020c4:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4020cb:	00 00 00 
  4020ce:	66 90                	xchg   %ax,%ax

00000000004020d0 <void (*&std::__get_helper<0ul, void (*)()>(std::_Tuple_impl<0ul, void (*)()>&))()>:
  4020d0:	e9 fb fd ff ff       	jmpq   401ed0 <std::_Tuple_impl<0ul, void (*)()>::_M_head(std::_Tuple_impl<0ul, void (*)()>&)>
  4020d5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4020dc:	00 00 00 
  4020df:	90                   	nop

00000000004020e0 <std::tuple_element<0ul, std::tuple<void (*)()> >::type& std::get<0ul, void (*)()>(std::tuple<void (*)()>&)>:
  4020e0:	e9 eb ff ff ff       	jmpq   4020d0 <void (*&std::__get_helper<0ul, void (*)()>(std::_Tuple_impl<0ul, void (*)()>&))()>
  4020e5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4020ec:	00 00 00 
  4020ef:	90                   	nop

00000000004020f0 <std::tuple_element<0ul, std::tuple<void (*)()> >::type&& std::get<0ul, void (*)()>(std::tuple<void (*)()>&&)>:
  4020f0:	48 83 ec 08          	sub    $0x8,%rsp
  4020f4:	e8 e7 ff ff ff       	callq  4020e0 <std::tuple_element<0ul, std::tuple<void (*)()> >::type& std::get<0ul, void (*)()>(std::tuple<void (*)()>&)>
  4020f9:	48 83 c4 08          	add    $0x8,%rsp
  4020fd:	48 89 c7             	mov    %rax,%rdi
  402100:	e9 bb ff ff ff       	jmpq   4020c0 <void (*&&std::forward<void (*&&)()>(std::remove_reference<void (*&&)()>::type&))()>
  402105:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  40210c:	00 00 00 
  40210f:	90                   	nop

0000000000402110 <void std::thread::_Invoker<std::tuple<void (*)()> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) [clone .isra.0]>:
  402110:	48 83 ec 08          	sub    $0x8,%rsp
  402114:	e8 77 ff ff ff       	callq  402090 <std::remove_reference<std::tuple<void (*)()>&>::type&& std::move<std::tuple<void (*)()>&>(std::tuple<void (*)()>&)>
  402119:	48 89 c7             	mov    %rax,%rdi
  40211c:	e8 cf ff ff ff       	callq  4020f0 <std::tuple_element<0ul, std::tuple<void (*)()> >::type&& std::get<0ul, void (*)()>(std::tuple<void (*)()>&&)>
  402121:	48 83 c4 08          	add    $0x8,%rsp
  402125:	48 89 c7             	mov    %rax,%rdi
  402128:	e9 73 ff ff ff       	jmpq   4020a0 <std::__invoke_result<void (*)()>::type std::__invoke<void (*)()>(void (*&&)())>
  40212d:	0f 1f 00             	nopl   (%rax)

0000000000402130 <std::thread::_Invoker<std::tuple<void (*)()> >::operator()()>:
  402130:	e9 db ff ff ff       	jmpq   402110 <void std::thread::_Invoker<std::tuple<void (*)()> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) [clone .isra.0]>
  402135:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  40213c:	00 00 00 
  40213f:	90                   	nop

0000000000402140 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)()> > >::_M_run()>:
  402140:	48 83 c7 08          	add    $0x8,%rdi
  402144:	e9 e7 ff ff ff       	jmpq   402130 <std::thread::_Invoker<std::tuple<void (*)()> >::operator()()>
  402149:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000402150 <__libc_csu_init>:
  402150:	f3 0f 1e fa          	endbr64 
  402154:	41 57                	push   %r15
  402156:	4c 8d 3d ab 3b 00 00 	lea    0x3bab(%rip),%r15        # 405d08 <__frame_dummy_init_array_entry>
  40215d:	41 56                	push   %r14
  40215f:	49 89 d6             	mov    %rdx,%r14
  402162:	41 55                	push   %r13
  402164:	49 89 f5             	mov    %rsi,%r13
  402167:	41 54                	push   %r12
  402169:	41 89 fc             	mov    %edi,%r12d
  40216c:	55                   	push   %rbp
  40216d:	48 8d 2d a4 3b 00 00 	lea    0x3ba4(%rip),%rbp        # 405d18 <__init_array_end>
  402174:	53                   	push   %rbx
  402175:	4c 29 fd             	sub    %r15,%rbp
  402178:	48 83 ec 08          	sub    $0x8,%rsp
  40217c:	e8 7f ee ff ff       	callq  401000 <_init>
  402181:	48 c1 fd 03          	sar    $0x3,%rbp
  402185:	74 1f                	je     4021a6 <__libc_csu_init+0x56>
  402187:	31 db                	xor    %ebx,%ebx
  402189:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  402190:	4c 89 f2             	mov    %r14,%rdx
  402193:	4c 89 ee             	mov    %r13,%rsi
  402196:	44 89 e7             	mov    %r12d,%edi
  402199:	41 ff 14 df          	callq  *(%r15,%rbx,8)
  40219d:	48 83 c3 01          	add    $0x1,%rbx
  4021a1:	48 39 dd             	cmp    %rbx,%rbp
  4021a4:	75 ea                	jne    402190 <__libc_csu_init+0x40>
  4021a6:	48 83 c4 08          	add    $0x8,%rsp
  4021aa:	5b                   	pop    %rbx
  4021ab:	5d                   	pop    %rbp
  4021ac:	41 5c                	pop    %r12
  4021ae:	41 5d                	pop    %r13
  4021b0:	41 5e                	pop    %r14
  4021b2:	41 5f                	pop    %r15
  4021b4:	c3                   	retq   
  4021b5:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
  4021bc:	00 00 00 00 

00000000004021c0 <__libc_csu_fini>:
  4021c0:	f3 0f 1e fa          	endbr64 
  4021c4:	c3                   	retq   

Desensamblado de la sección .fini:

00000000004021c8 <_fini>:
  4021c8:	f3 0f 1e fa          	endbr64 
  4021cc:	48 83 ec 08          	sub    $0x8,%rsp
  4021d0:	48 83 c4 08          	add    $0x8,%rsp
  4021d4:	c3                   	retq   
