
shared-y:     formato del fichero elf64-x86-64


Desensamblado de la sección .init:

0000000000401000 <_init>:
  401000:	f3 0f 1e fa          	endbr64 
  401004:	48 83 ec 08          	sub    $0x8,%rsp
  401008:	48 8b 05 d9 4f 00 00 	mov    0x4fd9(%rip),%rax        # 405fe8 <__gmon_start__>
  40100f:	48 85 c0             	test   %rax,%rax
  401012:	74 02                	je     401016 <_init+0x16>
  401014:	ff d0                	callq  *%rax
  401016:	48 83 c4 08          	add    $0x8,%rsp
  40101a:	c3                   	retq   

Desensamblado de la sección .plt:

0000000000401020 <.plt>:
  401020:	ff 35 e2 4f 00 00    	pushq  0x4fe2(%rip)        # 406008 <_GLOBAL_OFFSET_TABLE_+0x8>
  401026:	ff 25 e4 4f 00 00    	jmpq   *0x4fe4(%rip)        # 406010 <_GLOBAL_OFFSET_TABLE_+0x10>
  40102c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000401030 <__errno_location@plt>:
  401030:	ff 25 e2 4f 00 00    	jmpq   *0x4fe2(%rip)        # 406018 <__errno_location@GLIBC_2.2.5>
  401036:	68 00 00 00 00       	pushq  $0x0
  40103b:	e9 e0 ff ff ff       	jmpq   401020 <.plt>

0000000000401040 <std::terminate()@plt>:
  401040:	ff 25 da 4f 00 00    	jmpq   *0x4fda(%rip)        # 406020 <std::terminate()@GLIBCXX_3.4>
  401046:	68 01 00 00 00       	pushq  $0x1
  40104b:	e9 d0 ff ff ff       	jmpq   401020 <.plt>

0000000000401050 <nanosleep@plt>:
  401050:	ff 25 d2 4f 00 00    	jmpq   *0x4fd2(%rip)        # 406028 <nanosleep@GLIBC_2.2.5>
  401056:	68 02 00 00 00       	pushq  $0x2
  40105b:	e9 c0 ff ff ff       	jmpq   401020 <.plt>

0000000000401060 <std::thread::_State::~_State()@plt>:
  401060:	ff 25 ca 4f 00 00    	jmpq   *0x4fca(%rip)        # 406030 <std::thread::_State::~_State()@GLIBCXX_3.4.22>
  401066:	68 03 00 00 00       	pushq  $0x3
  40106b:	e9 b0 ff ff ff       	jmpq   401020 <.plt>

0000000000401070 <std::basic_ostream<char, std::char_traits<char> >& std::endl<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&)@plt>:
  401070:	ff 25 c2 4f 00 00    	jmpq   *0x4fc2(%rip)        # 406038 <std::basic_ostream<char, std::char_traits<char> >& std::endl<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&)@GLIBCXX_3.4>
  401076:	68 04 00 00 00       	pushq  $0x4
  40107b:	e9 a0 ff ff ff       	jmpq   401020 <.plt>

0000000000401080 <pthread_create@plt>:
  401080:	ff 25 ba 4f 00 00    	jmpq   *0x4fba(%rip)        # 406040 <pthread_create@GLIBC_2.2.5>
  401086:	68 05 00 00 00       	pushq  $0x5
  40108b:	e9 90 ff ff ff       	jmpq   401020 <.plt>

0000000000401090 <pthread_rwlock_trywrlock@plt>:
  401090:	ff 25 b2 4f 00 00    	jmpq   *0x4fb2(%rip)        # 406048 <pthread_rwlock_trywrlock@GLIBC_2.2.5>
  401096:	68 06 00 00 00       	pushq  $0x6
  40109b:	e9 80 ff ff ff       	jmpq   401020 <.plt>

00000000004010a0 <__cxa_atexit@plt>:
  4010a0:	ff 25 aa 4f 00 00    	jmpq   *0x4faa(%rip)        # 406050 <__cxa_atexit@GLIBC_2.2.5>
  4010a6:	68 07 00 00 00       	pushq  $0x7
  4010ab:	e9 70 ff ff ff       	jmpq   401020 <.plt>

00000000004010b0 <std::thread::_M_start_thread(std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> >, void (*)())@plt>:
  4010b0:	ff 25 a2 4f 00 00    	jmpq   *0x4fa2(%rip)        # 406058 <std::thread::_M_start_thread(std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> >, void (*)())@GLIBCXX_3.4.22>
  4010b6:	68 08 00 00 00       	pushq  $0x8
  4010bb:	e9 60 ff ff ff       	jmpq   401020 <.plt>

00000000004010c0 <operator new(unsigned long)@plt>:
  4010c0:	ff 25 9a 4f 00 00    	jmpq   *0x4f9a(%rip)        # 406060 <operator new(unsigned long)@GLIBCXX_3.4>
  4010c6:	68 09 00 00 00       	pushq  $0x9
  4010cb:	e9 50 ff ff ff       	jmpq   401020 <.plt>

00000000004010d0 <operator delete(void*, unsigned long)@plt>:
  4010d0:	ff 25 92 4f 00 00    	jmpq   *0x4f92(%rip)        # 406068 <operator delete(void*, unsigned long)@CXXABI_1.3.9>
  4010d6:	68 0a 00 00 00       	pushq  $0xa
  4010db:	e9 40 ff ff ff       	jmpq   401020 <.plt>

00000000004010e0 <std::ostream::operator<<(std::ostream& (*)(std::ostream&))@plt>:
  4010e0:	ff 25 8a 4f 00 00    	jmpq   *0x4f8a(%rip)        # 406070 <std::ostream::operator<<(std::ostream& (*)(std::ostream&))@GLIBCXX_3.4>
  4010e6:	68 0b 00 00 00       	pushq  $0xb
  4010eb:	e9 30 ff ff ff       	jmpq   401020 <.plt>

00000000004010f0 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char)@plt>:
  4010f0:	ff 25 82 4f 00 00    	jmpq   *0x4f82(%rip)        # 406078 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char)@GLIBCXX_3.4>
  4010f6:	68 0c 00 00 00       	pushq  $0xc
  4010fb:	e9 20 ff ff ff       	jmpq   401020 <.plt>

0000000000401100 <pthread_rwlock_tryrdlock@plt>:
  401100:	ff 25 7a 4f 00 00    	jmpq   *0x4f7a(%rip)        # 406080 <pthread_rwlock_tryrdlock@GLIBC_2.2.5>
  401106:	68 0d 00 00 00       	pushq  $0xd
  40110b:	e9 10 ff ff ff       	jmpq   401020 <.plt>

0000000000401110 <sched_yield@plt>:
  401110:	ff 25 72 4f 00 00    	jmpq   *0x4f72(%rip)        # 406088 <sched_yield@GLIBC_2.2.5>
  401116:	68 0e 00 00 00       	pushq  $0xe
  40111b:	e9 00 ff ff ff       	jmpq   401020 <.plt>

0000000000401120 <std::ios_base::Init::Init()@plt>:
  401120:	ff 25 6a 4f 00 00    	jmpq   *0x4f6a(%rip)        # 406090 <std::ios_base::Init::Init()@GLIBCXX_3.4>
  401126:	68 0f 00 00 00       	pushq  $0xf
  40112b:	e9 f0 fe ff ff       	jmpq   401020 <.plt>

0000000000401130 <pthread_rwlock_unlock@plt>:
  401130:	ff 25 62 4f 00 00    	jmpq   *0x4f62(%rip)        # 406098 <pthread_rwlock_unlock@GLIBC_2.2.5>
  401136:	68 10 00 00 00       	pushq  $0x10
  40113b:	e9 e0 fe ff ff       	jmpq   401020 <.plt>

0000000000401140 <__gxx_personality_v0@plt>:
  401140:	ff 25 5a 4f 00 00    	jmpq   *0x4f5a(%rip)        # 4060a0 <__gxx_personality_v0@CXXABI_1.3>
  401146:	68 11 00 00 00       	pushq  $0x11
  40114b:	e9 d0 fe ff ff       	jmpq   401020 <.plt>

0000000000401150 <__pthread_key_create@plt>:
  401150:	ff 25 52 4f 00 00    	jmpq   *0x4f52(%rip)        # 4060a8 <__pthread_key_create@GLIBC_2.2.5>
  401156:	68 12 00 00 00       	pushq  $0x12
  40115b:	e9 c0 fe ff ff       	jmpq   401020 <.plt>

0000000000401160 <std::thread::join()@plt>:
  401160:	ff 25 4a 4f 00 00    	jmpq   *0x4f4a(%rip)        # 4060b0 <std::thread::join()@GLIBCXX_3.4.11>
  401166:	68 13 00 00 00       	pushq  $0x13
  40116b:	e9 b0 fe ff ff       	jmpq   401020 <.plt>

0000000000401170 <_Unwind_Resume@plt>:
  401170:	ff 25 42 4f 00 00    	jmpq   *0x4f42(%rip)        # 4060b8 <_Unwind_Resume@GCC_3.0>
  401176:	68 14 00 00 00       	pushq  $0x14
  40117b:	e9 a0 fe ff ff       	jmpq   401020 <.plt>

0000000000401180 <std::ios_base::Init::~Init()@plt>:
  401180:	ff 25 3a 4f 00 00    	jmpq   *0x4f3a(%rip)        # 4060c0 <std::ios_base::Init::~Init()@GLIBCXX_3.4>
  401186:	68 15 00 00 00       	pushq  $0x15
  40118b:	e9 90 fe ff ff       	jmpq   401020 <.plt>

Desensamblado de la sección .text:

0000000000401190 <std::thread::thread<void (&)(), , void>(void (&)()) [clone .constprop.0] [clone .cold]>:
  401190:	48 8d 7c 24 08       	lea    0x8(%rsp),%rdi
  401195:	c5 f8 77             	vzeroupper 
  401198:	e8 53 0e 00 00       	callq  401ff0 <std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> >::~unique_ptr()>
  40119d:	48 89 ef             	mov    %rbp,%rdi
  4011a0:	e8 cb ff ff ff       	callq  401170 <_Unwind_Resume@plt>
  4011a5:	90                   	nop

00000000004011a6 <std::thread::thread<void (&)(), , void>(void (&)()) [clone .constprop.1] [clone .cold]>:
  4011a6:	48 8d 7c 24 08       	lea    0x8(%rsp),%rdi
  4011ab:	c5 f8 77             	vzeroupper 
  4011ae:	e8 3d 0e 00 00       	callq  401ff0 <std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> >::~unique_ptr()>
  4011b3:	48 89 ef             	mov    %rbp,%rdi
  4011b6:	e8 b5 ff ff ff       	callq  401170 <_Unwind_Resume@plt>

00000000004011bb <main.cold>:
  4011bb:	48 8d 9c 24 b0 00 00 	lea    0xb0(%rsp),%rbx
  4011c2:	00 
  4011c3:	c5 f8 77             	vzeroupper 
  4011c6:	48 83 eb 08          	sub    $0x8,%rbx
  4011ca:	48 89 df             	mov    %rbx,%rdi
  4011cd:	e8 5e 07 00 00       	callq  401930 <std::thread::~thread()>
  4011d2:	4c 39 e3             	cmp    %r12,%rbx
  4011d5:	75 ef                	jne    4011c6 <main.cold+0xb>
  4011d7:	48 83 eb 08          	sub    $0x8,%rbx
  4011db:	48 89 df             	mov    %rbx,%rdi
  4011de:	e8 4d 07 00 00       	callq  401930 <std::thread::~thread()>
  4011e3:	48 39 eb             	cmp    %rbp,%rbx
  4011e6:	75 ef                	jne    4011d7 <main.cold+0x1c>
  4011e8:	4c 89 ef             	mov    %r13,%rdi
  4011eb:	e8 80 ff ff ff       	callq  401170 <_Unwind_Resume@plt>

00000000004011f0 <__static_initialization_and_destruction_0(int, int) [clone .constprop.0]>:
  4011f0:	48 83 ec 08          	sub    $0x8,%rsp
  4011f4:	bf 38 62 40 00       	mov    $0x406238,%edi
  4011f9:	e8 22 ff ff ff       	callq  401120 <std::ios_base::Init::Init()@plt>
  4011fe:	ba 08 30 40 00       	mov    $0x403008,%edx
  401203:	be 38 62 40 00       	mov    $0x406238,%esi
  401208:	bf 80 11 40 00       	mov    $0x401180,%edi
  40120d:	48 83 c4 08          	add    $0x8,%rsp
  401211:	e9 8a fe ff ff       	jmpq   4010a0 <__cxa_atexit@plt>
  401216:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  40121d:	00 00 00 

0000000000401220 <main>:
  401220:	41 56                	push   %r14
  401222:	41 55                	push   %r13
  401224:	41 54                	push   %r12
  401226:	55                   	push   %rbp
  401227:	53                   	push   %rbx
  401228:	48 81 ec b0 00 00 00 	sub    $0xb0,%rsp
  40122f:	48 8d 6c 24 30       	lea    0x30(%rsp),%rbp
  401234:	4c 8d 64 24 70       	lea    0x70(%rsp),%r12
  401239:	48 89 eb             	mov    %rbp,%rbx
  40123c:	0f 1f 40 00          	nopl   0x0(%rax)
  401240:	48 89 df             	mov    %rbx,%rdi
  401243:	48 83 c3 08          	add    $0x8,%rbx
  401247:	e8 14 07 00 00       	callq  401960 <std::thread::thread()>
  40124c:	4c 39 e3             	cmp    %r12,%rbx
  40124f:	75 ef                	jne    401240 <main+0x20>
  401251:	4c 8d ac 24 b0 00 00 	lea    0xb0(%rsp),%r13
  401258:	00 
  401259:	4c 89 e3             	mov    %r12,%rbx
  40125c:	0f 1f 40 00          	nopl   0x0(%rax)
  401260:	48 89 df             	mov    %rbx,%rdi
  401263:	48 83 c3 08          	add    $0x8,%rbx
  401267:	e8 f4 06 00 00       	callq  401960 <std::thread::thread()>
  40126c:	4c 39 eb             	cmp    %r13,%rbx
  40126f:	75 ef                	jne    401260 <main+0x40>
  401271:	48 8d 7c 24 08       	lea    0x8(%rsp),%rdi
  401276:	49 89 ee             	mov    %rbp,%r14
  401279:	4c 89 e3             	mov    %r12,%rbx
  40127c:	e8 6f 0b 00 00       	callq  401df0 <std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>::linear_congruential_engine()>
  401281:	eb 54                	jmp    4012d7 <main+0xb7>
  401283:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  401288:	48 8d 7c 24 10       	lea    0x10(%rsp),%rdi
  40128d:	e8 96 04 00 00       	callq  401728 <std::thread::thread<void (&)(), , void>(void (&)()) [clone .constprop.1]>
  401292:	48 8d 74 24 10       	lea    0x10(%rsp),%rsi
  401297:	4c 89 f7             	mov    %r14,%rdi
  40129a:	e8 51 08 00 00       	callq  401af0 <std::thread::operator=(std::thread&&)>
  40129f:	48 8d 7c 24 10       	lea    0x10(%rsp),%rdi
  4012a4:	e8 87 06 00 00       	callq  401930 <std::thread::~thread()>
  4012a9:	48 8d 7c 24 18       	lea    0x18(%rsp),%rdi
  4012ae:	e8 15 04 00 00       	callq  4016c8 <std::thread::thread<void (&)(), , void>(void (&)()) [clone .constprop.0]>
  4012b3:	48 89 df             	mov    %rbx,%rdi
  4012b6:	48 8d 74 24 18       	lea    0x18(%rsp),%rsi
  4012bb:	48 83 c3 08          	add    $0x8,%rbx
  4012bf:	e8 2c 08 00 00       	callq  401af0 <std::thread::operator=(std::thread&&)>
  4012c4:	48 8d 7c 24 18       	lea    0x18(%rsp),%rdi
  4012c9:	49 83 c6 08          	add    $0x8,%r14
  4012cd:	e8 5e 06 00 00       	callq  401930 <std::thread::~thread()>
  4012d2:	4c 39 eb             	cmp    %r13,%rbx
  4012d5:	74 5d                	je     401334 <main+0x114>
  4012d7:	48 8d 7c 24 08       	lea    0x8(%rsp),%rdi
  4012dc:	e8 cf 03 00 00       	callq  4016b0 <std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>::operator()() [clone .isra.0]>
  4012e1:	a8 01                	test   $0x1,%al
  4012e3:	75 a3                	jne    401288 <main+0x68>
  4012e5:	48 8d 7c 24 20       	lea    0x20(%rsp),%rdi
  4012ea:	e8 d9 03 00 00       	callq  4016c8 <std::thread::thread<void (&)(), , void>(void (&)()) [clone .constprop.0]>
  4012ef:	48 8d 74 24 20       	lea    0x20(%rsp),%rsi
  4012f4:	48 89 df             	mov    %rbx,%rdi
  4012f7:	e8 f4 07 00 00       	callq  401af0 <std::thread::operator=(std::thread&&)>
  4012fc:	48 8d 7c 24 20       	lea    0x20(%rsp),%rdi
  401301:	e8 2a 06 00 00       	callq  401930 <std::thread::~thread()>
  401306:	48 8d 7c 24 28       	lea    0x28(%rsp),%rdi
  40130b:	e8 18 04 00 00       	callq  401728 <std::thread::thread<void (&)(), , void>(void (&)()) [clone .constprop.1]>
  401310:	4c 89 f7             	mov    %r14,%rdi
  401313:	48 8d 74 24 28       	lea    0x28(%rsp),%rsi
  401318:	48 83 c3 08          	add    $0x8,%rbx
  40131c:	e8 cf 07 00 00       	callq  401af0 <std::thread::operator=(std::thread&&)>
  401321:	48 8d 7c 24 28       	lea    0x28(%rsp),%rdi
  401326:	49 83 c6 08          	add    $0x8,%r14
  40132a:	e8 01 06 00 00       	callq  401930 <std::thread::~thread()>
  40132f:	4c 39 eb             	cmp    %r13,%rbx
  401332:	75 a3                	jne    4012d7 <main+0xb7>
  401334:	e8 97 08 00 00       	callq  401bd0 <std::chrono::duration<long, std::ratio<1l, 1l> > std::literals::chrono_literals::operator"" s<(char)49>()>
  401339:	48 8d 7c 24 28       	lea    0x28(%rsp),%rdi
  40133e:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  401343:	e8 d8 08 00 00       	callq  401c20 <void std::this_thread::sleep_for<long, std::ratio<1l, 1l> >(std::chrono::duration<long, std::ratio<1l, 1l> > const&)>
  401348:	31 f6                	xor    %esi,%esi
  40134a:	bf cc 60 40 00       	mov    $0x4060cc,%edi
  40134f:	48 89 eb             	mov    %rbp,%rbx
  401352:	e8 29 06 00 00       	callq  401980 <std::atomic<bool>::operator=(bool)>
  401357:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  40135e:	00 00 
  401360:	48 89 df             	mov    %rbx,%rdi
  401363:	e8 f8 fd ff ff       	callq  401160 <std::thread::join()@plt>
  401368:	48 83 c3 08          	add    $0x8,%rbx
  40136c:	4c 39 e3             	cmp    %r12,%rbx
  40136f:	75 ef                	jne    401360 <main+0x140>
  401371:	4c 89 e3             	mov    %r12,%rbx
  401374:	0f 1f 40 00          	nopl   0x0(%rax)
  401378:	48 89 df             	mov    %rbx,%rdi
  40137b:	e8 e0 fd ff ff       	callq  401160 <std::thread::join()@plt>
  401380:	48 83 c3 08          	add    $0x8,%rbx
  401384:	4c 39 eb             	cmp    %r13,%rbx
  401387:	75 ef                	jne    401378 <main+0x158>
  401389:	48 8d 9c 24 a8 00 00 	lea    0xa8(%rsp),%rbx
  401390:	00 
  401391:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  401398:	48 89 df             	mov    %rbx,%rdi
  40139b:	e8 90 05 00 00       	callq  401930 <std::thread::~thread()>
  4013a0:	48 89 d8             	mov    %rbx,%rax
  4013a3:	48 83 eb 08          	sub    $0x8,%rbx
  4013a7:	4c 39 e0             	cmp    %r12,%rax
  4013aa:	75 ec                	jne    401398 <main+0x178>
  4013ac:	48 8d 5c 24 68       	lea    0x68(%rsp),%rbx
  4013b1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  4013b8:	48 89 df             	mov    %rbx,%rdi
  4013bb:	e8 70 05 00 00       	callq  401930 <std::thread::~thread()>
  4013c0:	48 89 d8             	mov    %rbx,%rax
  4013c3:	48 83 eb 08          	sub    $0x8,%rbx
  4013c7:	48 39 e8             	cmp    %rbp,%rax
  4013ca:	75 ec                	jne    4013b8 <main+0x198>
  4013cc:	48 81 c4 b0 00 00 00 	add    $0xb0,%rsp
  4013d3:	31 c0                	xor    %eax,%eax
  4013d5:	5b                   	pop    %rbx
  4013d6:	5d                   	pop    %rbp
  4013d7:	41 5c                	pop    %r12
  4013d9:	41 5d                	pop    %r13
  4013db:	41 5e                	pop    %r14
  4013dd:	c3                   	retq   
  4013de:	49 89 c5             	mov    %rax,%r13
  4013e1:	e9 d5 fd ff ff       	jmpq   4011bb <main.cold>
  4013e6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4013ed:	00 00 00 

00000000004013f0 <_GLOBAL__sub_I_run>:
  4013f0:	e9 fb fd ff ff       	jmpq   4011f0 <__static_initialization_and_destruction_0(int, int) [clone .constprop.0]>

00000000004013f5 <.annobin_init.c.hot>:
  4013f5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4013fc:	00 00 00 
  4013ff:	90                   	nop

0000000000401400 <_start>:
  401400:	f3 0f 1e fa          	endbr64 
  401404:	31 ed                	xor    %ebp,%ebp
  401406:	49 89 d1             	mov    %rdx,%r9
  401409:	5e                   	pop    %rsi
  40140a:	48 89 e2             	mov    %rsp,%rdx
  40140d:	48 83 e4 f0          	and    $0xfffffffffffffff0,%rsp
  401411:	50                   	push   %rax
  401412:	54                   	push   %rsp
  401413:	49 c7 c0 50 21 40 00 	mov    $0x402150,%r8
  40141a:	48 c7 c1 e0 20 40 00 	mov    $0x4020e0,%rcx
  401421:	48 c7 c7 20 12 40 00 	mov    $0x401220,%rdi
  401428:	ff 15 b2 4b 00 00    	callq  *0x4bb2(%rip)        # 405fe0 <__libc_start_main@GLIBC_2.2.5>
  40142e:	f4                   	hlt    

000000000040142f <.annobin_init.c>:
  40142f:	90                   	nop

0000000000401430 <_dl_relocate_static_pie>:
  401430:	f3 0f 1e fa          	endbr64 
  401434:	c3                   	retq   

0000000000401435 <.annobin_static_reloc.c_end>:
  401435:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  40143c:	00 00 00 
  40143f:	90                   	nop

0000000000401440 <deregister_tm_clones>:
  401440:	b8 d0 60 40 00       	mov    $0x4060d0,%eax
  401445:	48 3d d0 60 40 00    	cmp    $0x4060d0,%rax
  40144b:	74 13                	je     401460 <deregister_tm_clones+0x20>
  40144d:	b8 00 00 00 00       	mov    $0x0,%eax
  401452:	48 85 c0             	test   %rax,%rax
  401455:	74 09                	je     401460 <deregister_tm_clones+0x20>
  401457:	bf d0 60 40 00       	mov    $0x4060d0,%edi
  40145c:	ff e0                	jmpq   *%rax
  40145e:	66 90                	xchg   %ax,%ax
  401460:	c3                   	retq   
  401461:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
  401468:	00 00 00 00 
  40146c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000401470 <register_tm_clones>:
  401470:	be d0 60 40 00       	mov    $0x4060d0,%esi
  401475:	48 81 ee d0 60 40 00 	sub    $0x4060d0,%rsi
  40147c:	48 89 f0             	mov    %rsi,%rax
  40147f:	48 c1 ee 3f          	shr    $0x3f,%rsi
  401483:	48 c1 f8 03          	sar    $0x3,%rax
  401487:	48 01 c6             	add    %rax,%rsi
  40148a:	48 d1 fe             	sar    %rsi
  40148d:	74 11                	je     4014a0 <register_tm_clones+0x30>
  40148f:	b8 00 00 00 00       	mov    $0x0,%eax
  401494:	48 85 c0             	test   %rax,%rax
  401497:	74 07                	je     4014a0 <register_tm_clones+0x30>
  401499:	bf d0 60 40 00       	mov    $0x4060d0,%edi
  40149e:	ff e0                	jmpq   *%rax
  4014a0:	c3                   	retq   
  4014a1:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
  4014a8:	00 00 00 00 
  4014ac:	0f 1f 40 00          	nopl   0x0(%rax)

00000000004014b0 <__do_global_dtors_aux>:
  4014b0:	f3 0f 1e fa          	endbr64 
  4014b4:	80 3d 35 4d 00 00 00 	cmpb   $0x0,0x4d35(%rip)        # 4061f0 <completed.7383>
  4014bb:	75 13                	jne    4014d0 <__do_global_dtors_aux+0x20>
  4014bd:	55                   	push   %rbp
  4014be:	48 89 e5             	mov    %rsp,%rbp
  4014c1:	e8 7a ff ff ff       	callq  401440 <deregister_tm_clones>
  4014c6:	c6 05 23 4d 00 00 01 	movb   $0x1,0x4d23(%rip)        # 4061f0 <completed.7383>
  4014cd:	5d                   	pop    %rbp
  4014ce:	c3                   	retq   
  4014cf:	90                   	nop
  4014d0:	c3                   	retq   
  4014d1:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
  4014d8:	00 00 00 00 
  4014dc:	0f 1f 40 00          	nopl   0x0(%rax)

00000000004014e0 <frame_dummy>:
  4014e0:	f3 0f 1e fa          	endbr64 
  4014e4:	eb 8a                	jmp    401470 <register_tm_clones>
  4014e6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4014ed:	00 00 00 

00000000004014f0 <__gthread_active_p()>:
  4014f0:	b8 50 11 40 00       	mov    $0x401150,%eax
  4014f5:	48 85 c0             	test   %rax,%rax
  4014f8:	0f 95 c0             	setne  %al
  4014fb:	0f b6 c0             	movzbl %al,%eax
  4014fe:	c3                   	retq   
  4014ff:	90                   	nop

0000000000401500 <std::chrono::duration<long, std::ratio<1l, 1000000000l> >::count() const [clone .isra.0]>:
  401500:	48 89 f8             	mov    %rdi,%rax
  401503:	c3                   	retq   
  401504:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000401508 <seccion_critica(char) [clone .constprop.0]>:
  401508:	53                   	push   %rbx
  401509:	bb 30 00 00 00       	mov    $0x30,%ebx
  40150e:	66 90                	xchg   %ax,%ax
  401510:	89 de                	mov    %ebx,%esi
  401512:	bf e0 60 40 00       	mov    $0x4060e0,%edi
  401517:	ff c3                	inc    %ebx
  401519:	e8 d2 fb ff ff       	callq  4010f0 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char)@plt>
  40151e:	83 fb 3a             	cmp    $0x3a,%ebx
  401521:	75 ed                	jne    401510 <seccion_critica(char) [clone .constprop.0]+0x8>
  401523:	be 70 10 40 00       	mov    $0x401070,%esi
  401528:	bf e0 60 40 00       	mov    $0x4060e0,%edi
  40152d:	5b                   	pop    %rbx
  40152e:	e9 ad fb ff ff       	jmpq   4010e0 <std::ostream::operator<<(std::ostream& (*)(std::ostream&))@plt>
  401533:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000401538 <seccion_critica(char) [clone .constprop.1]>:
  401538:	53                   	push   %rbx
  401539:	bb 61 00 00 00       	mov    $0x61,%ebx
  40153e:	66 90                	xchg   %ax,%ax
  401540:	89 de                	mov    %ebx,%esi
  401542:	bf e0 60 40 00       	mov    $0x4060e0,%edi
  401547:	ff c3                	inc    %ebx
  401549:	e8 a2 fb ff ff       	callq  4010f0 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char)@plt>
  40154e:	83 fb 6b             	cmp    $0x6b,%ebx
  401551:	75 ed                	jne    401540 <seccion_critica(char) [clone .constprop.1]+0x8>
  401553:	be 70 10 40 00       	mov    $0x401070,%esi
  401558:	bf e0 60 40 00       	mov    $0x4060e0,%edi
  40155d:	5b                   	pop    %rbx
  40155e:	e9 7d fb ff ff       	jmpq   4010e0 <std::ostream::operator<<(std::ostream& (*)(std::ostream&))@plt>
  401563:	90                   	nop
  401564:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000401568 <std::atomic<bool>::operator bool() const [clone .constprop.0]>:
  401568:	0f b6 05 5d 4b 00 00 	movzbl 0x4b5d(%rip),%eax        # 4060cc <run>
  40156f:	84 c0                	test   %al,%al
  401571:	0f 95 c0             	setne  %al
  401574:	c3                   	retq   
  401575:	90                   	nop
  401576:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  40157d:	00 00 00 

0000000000401580 <std::shared_mutex::try_lock() [clone .constprop.0]>:
  401580:	bf 00 62 40 00       	mov    $0x406200,%edi
  401585:	e9 16 03 00 00       	jmpq   4018a0 <std::__shared_mutex_pthread::try_lock()>
  40158a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000401590 <std::shared_mutex::unlock() [clone .constprop.0]>:
  401590:	bf 00 62 40 00       	mov    $0x406200,%edi
  401595:	e9 26 03 00 00       	jmpq   4018c0 <std::__shared_mutex_pthread::unlock()>
  40159a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

00000000004015a0 <std::shared_mutex::try_lock_shared() [clone .constprop.0]>:
  4015a0:	bf 00 62 40 00       	mov    $0x406200,%edi
  4015a5:	e9 26 03 00 00       	jmpq   4018d0 <std::__shared_mutex_pthread::try_lock_shared()>
  4015aa:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

00000000004015b0 <std::shared_mutex::unlock_shared() [clone .constprop.0]>:
  4015b0:	bf 00 62 40 00       	mov    $0x406200,%edi
  4015b5:	e9 46 03 00 00       	jmpq   401900 <std::__shared_mutex_pthread::unlock_shared()>
  4015ba:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

00000000004015c0 <std::thread::joinable() const [clone .isra.0]>:
  4015c0:	53                   	push   %rbx
  4015c1:	48 89 fb             	mov    %rdi,%rbx
  4015c4:	48 83 ec 10          	sub    $0x10,%rsp
  4015c8:	48 8d 7c 24 08       	lea    0x8(%rsp),%rdi
  4015cd:	e8 3e 03 00 00       	callq  401910 <std::thread::id::id()>
  4015d2:	48 8b 3b             	mov    (%rbx),%rdi
  4015d5:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
  4015da:	e8 41 03 00 00       	callq  401920 <std::operator==(std::thread::id, std::thread::id)>
  4015df:	48 83 c4 10          	add    $0x10,%rsp
  4015e3:	5b                   	pop    %rbx
  4015e4:	83 f0 01             	xor    $0x1,%eax
  4015e7:	c3                   	retq   
  4015e8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  4015ef:	00 

00000000004015f0 <lector()>:
  4015f0:	48 83 ec 08          	sub    $0x8,%rsp
  4015f4:	e8 6f ff ff ff       	callq  401568 <std::atomic<bool>::operator bool() const [clone .constprop.0]>
  4015f9:	84 c0                	test   %al,%al
  4015fb:	75 08                	jne    401605 <lector()+0x15>
  4015fd:	eb 22                	jmp    401621 <lector()+0x31>
  4015ff:	90                   	nop
  401600:	e8 4b 03 00 00       	callq  401950 <std::this_thread::yield()>
  401605:	e8 96 ff ff ff       	callq  4015a0 <std::shared_mutex::try_lock_shared() [clone .constprop.0]>
  40160a:	84 c0                	test   %al,%al
  40160c:	74 f2                	je     401600 <lector()+0x10>
  40160e:	e8 f5 fe ff ff       	callq  401508 <seccion_critica(char) [clone .constprop.0]>
  401613:	e8 98 ff ff ff       	callq  4015b0 <std::shared_mutex::unlock_shared() [clone .constprop.0]>
  401618:	e8 4b ff ff ff       	callq  401568 <std::atomic<bool>::operator bool() const [clone .constprop.0]>
  40161d:	84 c0                	test   %al,%al
  40161f:	75 e4                	jne    401605 <lector()+0x15>
  401621:	48 83 c4 08          	add    $0x8,%rsp
  401625:	c3                   	retq   
  401626:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  40162d:	00 00 00 

0000000000401630 <escritor()>:
  401630:	48 83 ec 08          	sub    $0x8,%rsp
  401634:	e8 2f ff ff ff       	callq  401568 <std::atomic<bool>::operator bool() const [clone .constprop.0]>
  401639:	84 c0                	test   %al,%al
  40163b:	75 08                	jne    401645 <escritor()+0x15>
  40163d:	eb 22                	jmp    401661 <escritor()+0x31>
  40163f:	90                   	nop
  401640:	e8 0b 03 00 00       	callq  401950 <std::this_thread::yield()>
  401645:	e8 36 ff ff ff       	callq  401580 <std::shared_mutex::try_lock() [clone .constprop.0]>
  40164a:	84 c0                	test   %al,%al
  40164c:	74 f2                	je     401640 <escritor()+0x10>
  40164e:	e8 e5 fe ff ff       	callq  401538 <seccion_critica(char) [clone .constprop.1]>
  401653:	e8 38 ff ff ff       	callq  401590 <std::shared_mutex::unlock() [clone .constprop.0]>
  401658:	e8 0b ff ff ff       	callq  401568 <std::atomic<bool>::operator bool() const [clone .constprop.0]>
  40165d:	84 c0                	test   %al,%al
  40165f:	75 e4                	jne    401645 <escritor()+0x15>
  401661:	48 83 c4 08          	add    $0x8,%rsp
  401665:	c3                   	retq   
  401666:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  40166d:	00 00 00 

0000000000401670 <seccion_critica(char)>:
  401670:	41 54                	push   %r12
  401672:	55                   	push   %rbp
  401673:	89 fd                	mov    %edi,%ebp
  401675:	83 c7 0a             	add    $0xa,%edi
  401678:	53                   	push   %rbx
  401679:	44 0f b6 e7          	movzbl %dil,%r12d
  40167d:	0f 1f 00             	nopl   (%rax)
  401680:	8d 5d 01             	lea    0x1(%rbp),%ebx
  401683:	40 0f be f5          	movsbl %bpl,%esi
  401687:	bf e0 60 40 00       	mov    $0x4060e0,%edi
  40168c:	89 dd                	mov    %ebx,%ebp
  40168e:	0f b6 db             	movzbl %bl,%ebx
  401691:	e8 5a fa ff ff       	callq  4010f0 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char)@plt>
  401696:	66 41 39 dc          	cmp    %bx,%r12w
  40169a:	75 e4                	jne    401680 <seccion_critica(char)+0x10>
  40169c:	5b                   	pop    %rbx
  40169d:	be 70 10 40 00       	mov    $0x401070,%esi
  4016a2:	bf e0 60 40 00       	mov    $0x4060e0,%edi
  4016a7:	5d                   	pop    %rbp
  4016a8:	41 5c                	pop    %r12
  4016aa:	e9 31 fa ff ff       	jmpq   4010e0 <std::ostream::operator<<(std::ostream& (*)(std::ostream&))@plt>
  4016af:	90                   	nop

00000000004016b0 <std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>::operator()() [clone .isra.0]>:
  4016b0:	53                   	push   %rbx
  4016b1:	48 89 fb             	mov    %rdi,%rbx
  4016b4:	48 8b 3f             	mov    (%rdi),%rdi
  4016b7:	e8 54 06 00 00       	callq  401d10 <unsigned long std::__detail::__mod<unsigned long, 2147483647ul, 16807ul, 0ul>(unsigned long)>
  4016bc:	48 89 03             	mov    %rax,(%rbx)
  4016bf:	5b                   	pop    %rbx
  4016c0:	c3                   	retq   
  4016c1:	90                   	nop
  4016c2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

00000000004016c8 <std::thread::thread<void (&)(), , void>(void (&)()) [clone .constprop.0]>:
  4016c8:	55                   	push   %rbp
  4016c9:	48 89 fd             	mov    %rdi,%rbp
  4016cc:	48 83 ec 10          	sub    $0x10,%rsp
  4016d0:	e8 3b 02 00 00       	callq  401910 <std::thread::id::id()>
  4016d5:	bf 30 16 40 00       	mov    $0x401630,%edi
  4016da:	e8 51 04 00 00       	callq  401b30 <void (&std::forward<void (&)()>(std::remove_reference<void (&)()>::type&))()>
  4016df:	48 89 e7             	mov    %rsp,%rdi
  4016e2:	48 89 c6             	mov    %rax,%rsi
  4016e5:	e8 86 04 00 00       	callq  401b70 <std::thread::_Invoker<std::tuple<std::decay<void (&)()>::type> > std::thread::__make_invoker<void (&)()>(void (&)())>
  4016ea:	48 89 e6             	mov    %rsp,%rsi
  4016ed:	48 8d 7c 24 08       	lea    0x8(%rsp),%rdi
  4016f2:	e8 b9 08 00 00       	callq  401fb0 <std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> > std::thread::_S_make_state<std::thread::_Invoker<std::tuple<void (*)()> > >(std::thread::_Invoker<std::tuple<void (*)()> >&&)>
  4016f7:	ba 80 10 40 00       	mov    $0x401080,%edx
  4016fc:	48 8d 74 24 08       	lea    0x8(%rsp),%rsi
  401701:	48 89 ef             	mov    %rbp,%rdi
  401704:	e8 a7 f9 ff ff       	callq  4010b0 <std::thread::_M_start_thread(std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> >, void (*)())@plt>
  401709:	48 8d 7c 24 08       	lea    0x8(%rsp),%rdi
  40170e:	e8 dd 08 00 00       	callq  401ff0 <std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> >::~unique_ptr()>
  401713:	48 83 c4 10          	add    $0x10,%rsp
  401717:	5d                   	pop    %rbp
  401718:	c3                   	retq   
  401719:	48 89 c5             	mov    %rax,%rbp
  40171c:	e9 6f fa ff ff       	jmpq   401190 <std::thread::thread<void (&)(), , void>(void (&)()) [clone .constprop.0] [clone .cold]>
  401721:	90                   	nop
  401722:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000401728 <std::thread::thread<void (&)(), , void>(void (&)()) [clone .constprop.1]>:
  401728:	55                   	push   %rbp
  401729:	48 89 fd             	mov    %rdi,%rbp
  40172c:	48 83 ec 10          	sub    $0x10,%rsp
  401730:	e8 db 01 00 00       	callq  401910 <std::thread::id::id()>
  401735:	bf f0 15 40 00       	mov    $0x4015f0,%edi
  40173a:	e8 f1 03 00 00       	callq  401b30 <void (&std::forward<void (&)()>(std::remove_reference<void (&)()>::type&))()>
  40173f:	48 89 e7             	mov    %rsp,%rdi
  401742:	48 89 c6             	mov    %rax,%rsi
  401745:	e8 26 04 00 00       	callq  401b70 <std::thread::_Invoker<std::tuple<std::decay<void (&)()>::type> > std::thread::__make_invoker<void (&)()>(void (&)())>
  40174a:	48 89 e6             	mov    %rsp,%rsi
  40174d:	48 8d 7c 24 08       	lea    0x8(%rsp),%rdi
  401752:	e8 59 08 00 00       	callq  401fb0 <std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> > std::thread::_S_make_state<std::thread::_Invoker<std::tuple<void (*)()> > >(std::thread::_Invoker<std::tuple<void (*)()> >&&)>
  401757:	ba 80 10 40 00       	mov    $0x401080,%edx
  40175c:	48 8d 74 24 08       	lea    0x8(%rsp),%rsi
  401761:	48 89 ef             	mov    %rbp,%rdi
  401764:	e8 47 f9 ff ff       	callq  4010b0 <std::thread::_M_start_thread(std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> >, void (*)())@plt>
  401769:	48 8d 7c 24 08       	lea    0x8(%rsp),%rdi
  40176e:	e8 7d 08 00 00       	callq  401ff0 <std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> >::~unique_ptr()>
  401773:	48 83 c4 10          	add    $0x10,%rsp
  401777:	5d                   	pop    %rbp
  401778:	c3                   	retq   
  401779:	48 89 c5             	mov    %rax,%rbp
  40177c:	e9 25 fa ff ff       	jmpq   4011a6 <std::thread::thread<void (&)(), , void>(void (&)()) [clone .constprop.1] [clone .cold]>
  401781:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  401788:	00 00 00 
  40178b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000401790 <__gthread_yield()>:
  401790:	e9 7b f9 ff ff       	jmpq   401110 <sched_yield@plt>
  401795:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  40179c:	00 00 00 
  40179f:	90                   	nop

00000000004017a0 <std::__glibcxx_rwlock_tryrdlock(pthread_rwlock_t*)>:
  4017a0:	48 83 ec 08          	sub    $0x8,%rsp
  4017a4:	e8 47 fd ff ff       	callq  4014f0 <__gthread_active_p()>
  4017a9:	85 c0                	test   %eax,%eax
  4017ab:	75 0b                	jne    4017b8 <std::__glibcxx_rwlock_tryrdlock(pthread_rwlock_t*)+0x18>
  4017ad:	31 c0                	xor    %eax,%eax
  4017af:	48 83 c4 08          	add    $0x8,%rsp
  4017b3:	c3                   	retq   
  4017b4:	0f 1f 40 00          	nopl   0x0(%rax)
  4017b8:	48 83 c4 08          	add    $0x8,%rsp
  4017bc:	e9 3f f9 ff ff       	jmpq   401100 <pthread_rwlock_tryrdlock@plt>
  4017c1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4017c8:	00 00 00 
  4017cb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000004017d0 <std::__glibcxx_rwlock_trywrlock(pthread_rwlock_t*)>:
  4017d0:	48 83 ec 08          	sub    $0x8,%rsp
  4017d4:	e8 17 fd ff ff       	callq  4014f0 <__gthread_active_p()>
  4017d9:	85 c0                	test   %eax,%eax
  4017db:	75 0b                	jne    4017e8 <std::__glibcxx_rwlock_trywrlock(pthread_rwlock_t*)+0x18>
  4017dd:	31 c0                	xor    %eax,%eax
  4017df:	48 83 c4 08          	add    $0x8,%rsp
  4017e3:	c3                   	retq   
  4017e4:	0f 1f 40 00          	nopl   0x0(%rax)
  4017e8:	48 83 c4 08          	add    $0x8,%rsp
  4017ec:	e9 9f f8 ff ff       	jmpq   401090 <pthread_rwlock_trywrlock@plt>
  4017f1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4017f8:	00 00 00 
  4017fb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000401800 <std::__glibcxx_rwlock_unlock(pthread_rwlock_t*)>:
  401800:	48 83 ec 08          	sub    $0x8,%rsp
  401804:	e8 e7 fc ff ff       	callq  4014f0 <__gthread_active_p()>
  401809:	85 c0                	test   %eax,%eax
  40180b:	75 0b                	jne    401818 <std::__glibcxx_rwlock_unlock(pthread_rwlock_t*)+0x18>
  40180d:	31 c0                	xor    %eax,%eax
  40180f:	48 83 c4 08          	add    $0x8,%rsp
  401813:	c3                   	retq   
  401814:	0f 1f 40 00          	nopl   0x0(%rax)
  401818:	48 83 c4 08          	add    $0x8,%rsp
  40181c:	e9 0f f9 ff ff       	jmpq   401130 <pthread_rwlock_unlock@plt>
  401821:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  401828:	00 00 00 
  40182b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000401830 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)()> > >::~_State_impl()>:
  401830:	48 c7 07 88 30 40 00 	movq   $0x403088,(%rdi)
  401837:	e9 24 f8 ff ff       	jmpq   401060 <std::thread::_State::~_State()@plt>
  40183c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000401840 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)()> > >::~_State_impl()>:
  401840:	55                   	push   %rbp
  401841:	48 89 fd             	mov    %rdi,%rbp
  401844:	e8 e7 ff ff ff       	callq  401830 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)()> > >::~_State_impl()>
  401849:	48 89 ef             	mov    %rbp,%rdi
  40184c:	be 10 00 00 00       	mov    $0x10,%esi
  401851:	5d                   	pop    %rbp
  401852:	e9 79 f8 ff ff       	jmpq   4010d0 <operator delete(void*, unsigned long)@plt>
  401857:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  40185e:	00 00 

0000000000401860 <std::chrono::duration<long, std::ratio<1l, 1000000000l> >::duration<long, void>(long const&) [clone .isra.0]>:
  401860:	48 89 37             	mov    %rsi,(%rdi)
  401863:	c3                   	retq   
  401864:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  40186b:	00 00 00 
  40186e:	66 90                	xchg   %ax,%ax

0000000000401870 <std::default_delete<std::thread::_State>::operator()(std::thread::_State*) const [clone .isra.0]>:
  401870:	48 85 ff             	test   %rdi,%rdi
  401873:	74 0b                	je     401880 <std::default_delete<std::thread::_State>::operator()(std::thread::_State*) const [clone .isra.0]+0x10>
  401875:	48 8b 07             	mov    (%rdi),%rax
  401878:	ff 60 08             	jmpq   *0x8(%rax)
  40187b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  401880:	c3                   	retq   
  401881:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  401888:	00 00 00 
  40188b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000401890 <std::chrono::duration_values<long>::zero()>:
  401890:	31 c0                	xor    %eax,%eax
  401892:	c3                   	retq   
  401893:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  40189a:	00 00 00 
  40189d:	0f 1f 00             	nopl   (%rax)

00000000004018a0 <std::__shared_mutex_pthread::try_lock()>:
  4018a0:	48 83 ec 08          	sub    $0x8,%rsp
  4018a4:	e8 27 ff ff ff       	callq  4017d0 <std::__glibcxx_rwlock_trywrlock(pthread_rwlock_t*)>
  4018a9:	83 f8 10             	cmp    $0x10,%eax
  4018ac:	0f 95 c0             	setne  %al
  4018af:	48 83 c4 08          	add    $0x8,%rsp
  4018b3:	c3                   	retq   
  4018b4:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4018bb:	00 00 00 
  4018be:	66 90                	xchg   %ax,%ax

00000000004018c0 <std::__shared_mutex_pthread::unlock()>:
  4018c0:	e9 3b ff ff ff       	jmpq   401800 <std::__glibcxx_rwlock_unlock(pthread_rwlock_t*)>
  4018c5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4018cc:	00 00 00 
  4018cf:	90                   	nop

00000000004018d0 <std::__shared_mutex_pthread::try_lock_shared()>:
  4018d0:	48 83 ec 08          	sub    $0x8,%rsp
  4018d4:	e8 c7 fe ff ff       	callq  4017a0 <std::__glibcxx_rwlock_tryrdlock(pthread_rwlock_t*)>
  4018d9:	89 c2                	mov    %eax,%edx
  4018db:	83 f8 10             	cmp    $0x10,%eax
  4018de:	0f 94 c0             	sete   %al
  4018e1:	83 fa 0b             	cmp    $0xb,%edx
  4018e4:	0f 94 c2             	sete   %dl
  4018e7:	48 83 c4 08          	add    $0x8,%rsp
  4018eb:	09 d0                	or     %edx,%eax
  4018ed:	83 f0 01             	xor    $0x1,%eax
  4018f0:	c3                   	retq   
  4018f1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4018f8:	00 00 00 
  4018fb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000401900 <std::__shared_mutex_pthread::unlock_shared()>:
  401900:	e9 bb ff ff ff       	jmpq   4018c0 <std::__shared_mutex_pthread::unlock()>
  401905:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  40190c:	00 00 00 
  40190f:	90                   	nop

0000000000401910 <std::thread::id::id()>:
  401910:	48 c7 07 00 00 00 00 	movq   $0x0,(%rdi)
  401917:	c3                   	retq   
  401918:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  40191f:	00 

0000000000401920 <std::operator==(std::thread::id, std::thread::id)>:
  401920:	48 39 f7             	cmp    %rsi,%rdi
  401923:	0f 94 c0             	sete   %al
  401926:	c3                   	retq   
  401927:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  40192e:	00 00 

0000000000401930 <std::thread::~thread()>:
  401930:	48 83 ec 08          	sub    $0x8,%rsp
  401934:	e8 87 fc ff ff       	callq  4015c0 <std::thread::joinable() const [clone .isra.0]>
  401939:	84 c0                	test   %al,%al
  40193b:	75 05                	jne    401942 <std::thread::~thread()+0x12>
  40193d:	48 83 c4 08          	add    $0x8,%rsp
  401941:	c3                   	retq   
  401942:	e8 f9 f6 ff ff       	callq  401040 <std::terminate()@plt>
  401947:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  40194e:	00 00 

0000000000401950 <std::this_thread::yield()>:
  401950:	e9 3b fe ff ff       	jmpq   401790 <__gthread_yield()>
  401955:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  40195c:	00 00 00 
  40195f:	90                   	nop

0000000000401960 <std::thread::thread()>:
  401960:	e9 ab ff ff ff       	jmpq   401910 <std::thread::id::id()>
  401965:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  40196c:	00 00 00 
  40196f:	90                   	nop

0000000000401970 <std::__atomic_base<bool>::operator=(bool)>:
  401970:	40 88 37             	mov    %sil,(%rdi)
  401973:	89 f0                	mov    %esi,%eax
  401975:	0f ae f0             	mfence 
  401978:	c3                   	retq   
  401979:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000401980 <std::atomic<bool>::operator=(bool)>:
  401980:	40 0f b6 f6          	movzbl %sil,%esi
  401984:	e9 e7 ff ff ff       	jmpq   401970 <std::__atomic_base<bool>::operator=(bool)>
  401989:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000401990 <std::chrono::duration<long, std::ratio<1l, 1l> >::duration<long, void>(long const&)>:
  401990:	48 8b 06             	mov    (%rsi),%rax
  401993:	48 89 07             	mov    %rax,(%rdi)
  401996:	c3                   	retq   
  401997:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  40199e:	00 00 

00000000004019a0 <std::chrono::duration<long, std::ratio<1l, 1l> >::zero()>:
  4019a0:	48 83 ec 18          	sub    $0x18,%rsp
  4019a4:	e8 e7 fe ff ff       	callq  401890 <std::chrono::duration_values<long>::zero()>
  4019a9:	48 89 e6             	mov    %rsp,%rsi
  4019ac:	48 8d 7c 24 08       	lea    0x8(%rsp),%rdi
  4019b1:	48 89 04 24          	mov    %rax,(%rsp)
  4019b5:	e8 d6 ff ff ff       	callq  401990 <std::chrono::duration<long, std::ratio<1l, 1l> >::duration<long, void>(long const&)>
  4019ba:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  4019bf:	48 83 c4 18          	add    $0x18,%rsp
  4019c3:	c3                   	retq   
  4019c4:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4019cb:	00 00 00 
  4019ce:	66 90                	xchg   %ax,%ax

00000000004019d0 <bool std::chrono::operator< <long, std::ratio<1l, 1l>, long, std::ratio<1l, 1l> >(std::chrono::duration<long, std::ratio<1l, 1l> > const&, std::chrono::duration<long, std::ratio<1l, 1l> > const&)>:
  4019d0:	48 8b 3f             	mov    (%rdi),%rdi
  4019d3:	e8 28 fb ff ff       	callq  401500 <std::chrono::duration<long, std::ratio<1l, 1000000000l> >::count() const [clone .isra.0]>
  4019d8:	48 8b 3e             	mov    (%rsi),%rdi
  4019db:	48 89 c2             	mov    %rax,%rdx
  4019de:	e8 1d fb ff ff       	callq  401500 <std::chrono::duration<long, std::ratio<1l, 1000000000l> >::count() const [clone .isra.0]>
  4019e3:	48 39 c2             	cmp    %rax,%rdx
  4019e6:	0f 9c c0             	setl   %al
  4019e9:	c3                   	retq   
  4019ea:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

00000000004019f0 <bool std::chrono::operator<=<long, std::ratio<1l, 1l>, long, std::ratio<1l, 1l> >(std::chrono::duration<long, std::ratio<1l, 1l> > const&, std::chrono::duration<long, std::ratio<1l, 1l> > const&)>:
  4019f0:	49 89 f8             	mov    %rdi,%r8
  4019f3:	48 83 ec 08          	sub    $0x8,%rsp
  4019f7:	48 89 f7             	mov    %rsi,%rdi
  4019fa:	4c 89 c6             	mov    %r8,%rsi
  4019fd:	e8 ce ff ff ff       	callq  4019d0 <bool std::chrono::operator< <long, std::ratio<1l, 1l>, long, std::ratio<1l, 1l> >(std::chrono::duration<long, std::ratio<1l, 1l> > const&, std::chrono::duration<long, std::ratio<1l, 1l> > const&)>
  401a02:	48 83 c4 08          	add    $0x8,%rsp
  401a06:	83 f0 01             	xor    $0x1,%eax
  401a09:	c3                   	retq   
  401a0a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000401a10 <std::chrono::duration<long, std::ratio<1l, 1l> > std::chrono::__duration_cast_impl<std::chrono::duration<long, std::ratio<1l, 1l> >, std::ratio<1l, 1l>, long, true, true>::__cast<long, std::ratio<1l, 1l> >(std::chrono::duration<long, std::ratio<1l, 1l> > const&)>:
  401a10:	48 83 ec 18          	sub    $0x18,%rsp
  401a14:	48 8b 3f             	mov    (%rdi),%rdi
  401a17:	e8 e4 fa ff ff       	callq  401500 <std::chrono::duration<long, std::ratio<1l, 1000000000l> >::count() const [clone .isra.0]>
  401a1c:	48 89 e6             	mov    %rsp,%rsi
  401a1f:	48 8d 7c 24 08       	lea    0x8(%rsp),%rdi
  401a24:	48 89 04 24          	mov    %rax,(%rsp)
  401a28:	e8 63 ff ff ff       	callq  401990 <std::chrono::duration<long, std::ratio<1l, 1l> >::duration<long, void>(long const&)>
  401a2d:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  401a32:	48 83 c4 18          	add    $0x18,%rsp
  401a36:	c3                   	retq   
  401a37:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  401a3e:	00 00 

0000000000401a40 <std::enable_if<std::chrono::__is_duration<std::chrono::duration<long, std::ratio<1l, 1l> > >::value, std::chrono::duration<long, std::ratio<1l, 1l> > >::type std::chrono::duration_cast<std::chrono::duration<long, std::ratio<1l, 1l> >, long, std::ratio<1l, 1l> >(std::chrono::duration<long, std::ratio<1l, 1l> > const&)>:
  401a40:	e9 cb ff ff ff       	jmpq   401a10 <std::chrono::duration<long, std::ratio<1l, 1l> > std::chrono::__duration_cast_impl<std::chrono::duration<long, std::ratio<1l, 1l> >, std::ratio<1l, 1l>, long, true, true>::__cast<long, std::ratio<1l, 1l> >(std::chrono::duration<long, std::ratio<1l, 1l> > const&)>
  401a45:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  401a4c:	00 00 00 
  401a4f:	90                   	nop

0000000000401a50 <std::common_type<std::chrono::duration<long, std::ratio<1l, 1l> >, std::chrono::duration<long, std::ratio<1l, 1l> > >::type std::chrono::operator-<long, std::ratio<1l, 1l>, long, std::ratio<1l, 1l> >(std::chrono::duration<long, std::ratio<1l, 1l> > const&, std::chrono::duration<long, std::ratio<1l, 1l> > const&)>:
  401a50:	48 83 ec 18          	sub    $0x18,%rsp
  401a54:	48 8b 3f             	mov    (%rdi),%rdi
  401a57:	e8 a4 fa ff ff       	callq  401500 <std::chrono::duration<long, std::ratio<1l, 1000000000l> >::count() const [clone .isra.0]>
  401a5c:	48 8b 3e             	mov    (%rsi),%rdi
  401a5f:	48 89 c2             	mov    %rax,%rdx
  401a62:	e8 99 fa ff ff       	callq  401500 <std::chrono::duration<long, std::ratio<1l, 1000000000l> >::count() const [clone .isra.0]>
  401a67:	48 89 e6             	mov    %rsp,%rsi
  401a6a:	48 8d 7c 24 08       	lea    0x8(%rsp),%rdi
  401a6f:	48 29 c2             	sub    %rax,%rdx
  401a72:	48 89 14 24          	mov    %rdx,(%rsp)
  401a76:	e8 15 ff ff ff       	callq  401990 <std::chrono::duration<long, std::ratio<1l, 1l> >::duration<long, void>(long const&)>
  401a7b:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  401a80:	48 83 c4 18          	add    $0x18,%rsp
  401a84:	c3                   	retq   
  401a85:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  401a8c:	00 00 00 
  401a8f:	90                   	nop

0000000000401a90 <std::remove_reference<std::thread::id&>::type&& std::move<std::thread::id&>(std::thread::id&)>:
  401a90:	48 89 f8             	mov    %rdi,%rax
  401a93:	c3                   	retq   
  401a94:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  401a9b:	00 00 00 
  401a9e:	66 90                	xchg   %ax,%ax

0000000000401aa0 <std::enable_if<std::__and_<std::__not_<std::__is_tuple_like<std::thread::id> >, std::is_move_constructible<std::thread::id>, std::is_move_assignable<std::thread::id> >::value, void>::type std::swap<std::thread::id>(std::thread::id&, std::thread::id&)>:
  401aa0:	55                   	push   %rbp
  401aa1:	53                   	push   %rbx
  401aa2:	48 89 fd             	mov    %rdi,%rbp
  401aa5:	48 89 f3             	mov    %rsi,%rbx
  401aa8:	48 83 ec 18          	sub    $0x18,%rsp
  401aac:	e8 df ff ff ff       	callq  401a90 <std::remove_reference<std::thread::id&>::type&& std::move<std::thread::id&>(std::thread::id&)>
  401ab1:	48 89 df             	mov    %rbx,%rdi
  401ab4:	48 8b 00             	mov    (%rax),%rax
  401ab7:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  401abc:	e8 cf ff ff ff       	callq  401a90 <std::remove_reference<std::thread::id&>::type&& std::move<std::thread::id&>(std::thread::id&)>
  401ac1:	48 8d 7c 24 08       	lea    0x8(%rsp),%rdi
  401ac6:	48 8b 00             	mov    (%rax),%rax
  401ac9:	48 89 45 00          	mov    %rax,0x0(%rbp)
  401acd:	e8 be ff ff ff       	callq  401a90 <std::remove_reference<std::thread::id&>::type&& std::move<std::thread::id&>(std::thread::id&)>
  401ad2:	48 8b 00             	mov    (%rax),%rax
  401ad5:	48 89 03             	mov    %rax,(%rbx)
  401ad8:	48 83 c4 18          	add    $0x18,%rsp
  401adc:	5b                   	pop    %rbx
  401add:	5d                   	pop    %rbp
  401ade:	c3                   	retq   
  401adf:	90                   	nop

0000000000401ae0 <std::thread::swap(std::thread&)>:
  401ae0:	e9 bb ff ff ff       	jmpq   401aa0 <std::enable_if<std::__and_<std::__not_<std::__is_tuple_like<std::thread::id> >, std::is_move_constructible<std::thread::id>, std::is_move_assignable<std::thread::id> >::value, void>::type std::swap<std::thread::id>(std::thread::id&, std::thread::id&)>
  401ae5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  401aec:	00 00 00 
  401aef:	90                   	nop

0000000000401af0 <std::thread::operator=(std::thread&&)>:
  401af0:	41 54                	push   %r12
  401af2:	55                   	push   %rbp
  401af3:	49 89 fc             	mov    %rdi,%r12
  401af6:	48 89 f5             	mov    %rsi,%rbp
  401af9:	48 83 ec 08          	sub    $0x8,%rsp
  401afd:	e8 be fa ff ff       	callq  4015c0 <std::thread::joinable() const [clone .isra.0]>
  401b02:	84 c0                	test   %al,%al
  401b04:	75 16                	jne    401b1c <std::thread::operator=(std::thread&&)+0x2c>
  401b06:	48 89 ee             	mov    %rbp,%rsi
  401b09:	4c 89 e7             	mov    %r12,%rdi
  401b0c:	e8 cf ff ff ff       	callq  401ae0 <std::thread::swap(std::thread&)>
  401b11:	48 83 c4 08          	add    $0x8,%rsp
  401b15:	4c 89 e0             	mov    %r12,%rax
  401b18:	5d                   	pop    %rbp
  401b19:	41 5c                	pop    %r12
  401b1b:	c3                   	retq   
  401b1c:	e8 1f f5 ff ff       	callq  401040 <std::terminate()@plt>
  401b21:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  401b28:	00 00 00 
  401b2b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000401b30 <void (&std::forward<void (&)()>(std::remove_reference<void (&)()>::type&))()>:
  401b30:	48 89 f8             	mov    %rdi,%rax
  401b33:	c3                   	retq   
  401b34:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  401b3b:	00 00 00 
  401b3e:	66 90                	xchg   %ax,%ax

0000000000401b40 <std::_Head_base<0ul, void (*)(), false>::_Head_base(void (* const&)())>:
  401b40:	48 8b 06             	mov    (%rsi),%rax
  401b43:	48 89 07             	mov    %rax,(%rdi)
  401b46:	c3                   	retq   
  401b47:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  401b4e:	00 00 

0000000000401b50 <std::_Tuple_impl<0ul, void (*)()>::_Tuple_impl(void (* const&)())>:
  401b50:	e9 eb ff ff ff       	jmpq   401b40 <std::_Head_base<0ul, void (*)(), false>::_Head_base(void (* const&)())>
  401b55:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  401b5c:	00 00 00 
  401b5f:	90                   	nop

0000000000401b60 <std::tuple<void (*)()>::tuple<void, true>(void (* const&)())>:
  401b60:	e9 eb ff ff ff       	jmpq   401b50 <std::_Tuple_impl<0ul, void (*)()>::_Tuple_impl(void (* const&)())>
  401b65:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  401b6c:	00 00 00 
  401b6f:	90                   	nop

0000000000401b70 <std::thread::_Invoker<std::tuple<std::decay<void (&)()>::type> > std::thread::__make_invoker<void (&)()>(void (&)())>:
  401b70:	41 54                	push   %r12
  401b72:	49 89 fc             	mov    %rdi,%r12
  401b75:	48 89 f7             	mov    %rsi,%rdi
  401b78:	48 83 ec 10          	sub    $0x10,%rsp
  401b7c:	e8 af ff ff ff       	callq  401b30 <void (&std::forward<void (&)()>(std::remove_reference<void (&)()>::type&))()>
  401b81:	48 8d 74 24 08       	lea    0x8(%rsp),%rsi
  401b86:	4c 89 e7             	mov    %r12,%rdi
  401b89:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  401b8e:	e8 cd ff ff ff       	callq  401b60 <std::tuple<void (*)()>::tuple<void, true>(void (* const&)())>
  401b93:	48 83 c4 10          	add    $0x10,%rsp
  401b97:	4c 89 e0             	mov    %r12,%rax
  401b9a:	41 5c                	pop    %r12
  401b9c:	c3                   	retq   
  401b9d:	0f 1f 00             	nopl   (%rax)

0000000000401ba0 <std::chrono::duration<long, std::ratio<1l, 1l> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long, std::ratio<1l, 1l> >, (char)49>()>:
  401ba0:	48 83 ec 18          	sub    $0x18,%rsp
  401ba4:	48 8d 7c 24 08       	lea    0x8(%rsp),%rdi
  401ba9:	48 c7 04 24 01 00 00 	movq   $0x1,(%rsp)
  401bb0:	00 
  401bb1:	48 89 e6             	mov    %rsp,%rsi
  401bb4:	e8 d7 fd ff ff       	callq  401990 <std::chrono::duration<long, std::ratio<1l, 1l> >::duration<long, void>(long const&)>
  401bb9:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  401bbe:	48 83 c4 18          	add    $0x18,%rsp
  401bc2:	c3                   	retq   
  401bc3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  401bca:	00 00 00 
  401bcd:	0f 1f 00             	nopl   (%rax)

0000000000401bd0 <std::chrono::duration<long, std::ratio<1l, 1l> > std::literals::chrono_literals::operator"" s<(char)49>()>:
  401bd0:	e9 cb ff ff ff       	jmpq   401ba0 <std::chrono::duration<long, std::ratio<1l, 1l> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long, std::ratio<1l, 1l> >, (char)49>()>
  401bd5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  401bdc:	00 00 00 
  401bdf:	90                   	nop

0000000000401be0 <std::chrono::duration<long, std::ratio<1l, 1000000000l> > std::chrono::__duration_cast_impl<std::chrono::duration<long, std::ratio<1l, 1000000000l> >, std::ratio<1000000000l, 1l>, long, false, true>::__cast<long, std::ratio<1l, 1l> >(std::chrono::duration<long, std::ratio<1l, 1l> > const&)>:
  401be0:	48 83 ec 10          	sub    $0x10,%rsp
  401be4:	48 8b 3f             	mov    (%rdi),%rdi
  401be7:	e8 14 f9 ff ff       	callq  401500 <std::chrono::duration<long, std::ratio<1l, 1000000000l> >::count() const [clone .isra.0]>
  401bec:	48 8d 7c 24 08       	lea    0x8(%rsp),%rdi
  401bf1:	48 69 f0 00 ca 9a 3b 	imul   $0x3b9aca00,%rax,%rsi
  401bf8:	e8 63 fc ff ff       	callq  401860 <std::chrono::duration<long, std::ratio<1l, 1000000000l> >::duration<long, void>(long const&) [clone .isra.0]>
  401bfd:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  401c02:	48 83 c4 10          	add    $0x10,%rsp
  401c06:	c3                   	retq   
  401c07:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  401c0e:	00 00 

0000000000401c10 <std::enable_if<std::chrono::__is_duration<std::chrono::duration<long, std::ratio<1l, 1000000000l> > >::value, std::chrono::duration<long, std::ratio<1l, 1000000000l> > >::type std::chrono::duration_cast<std::chrono::duration<long, std::ratio<1l, 1000000000l> >, long, std::ratio<1l, 1l> >(std::chrono::duration<long, std::ratio<1l, 1l> > const&)>:
  401c10:	e9 cb ff ff ff       	jmpq   401be0 <std::chrono::duration<long, std::ratio<1l, 1000000000l> > std::chrono::__duration_cast_impl<std::chrono::duration<long, std::ratio<1l, 1000000000l> >, std::ratio<1000000000l, 1l>, long, false, true>::__cast<long, std::ratio<1l, 1l> >(std::chrono::duration<long, std::ratio<1l, 1l> > const&)>
  401c15:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  401c1c:	00 00 00 
  401c1f:	90                   	nop

0000000000401c20 <void std::this_thread::sleep_for<long, std::ratio<1l, 1l> >(std::chrono::duration<long, std::ratio<1l, 1l> > const&)>:
  401c20:	55                   	push   %rbp
  401c21:	48 89 fd             	mov    %rdi,%rbp
  401c24:	48 83 ec 20          	sub    $0x20,%rsp
  401c28:	e8 73 fd ff ff       	callq  4019a0 <std::chrono::duration<long, std::ratio<1l, 1l> >::zero()>
  401c2d:	48 8d 74 24 10       	lea    0x10(%rsp),%rsi
  401c32:	48 89 ef             	mov    %rbp,%rdi
  401c35:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  401c3a:	e8 b1 fd ff ff       	callq  4019f0 <bool std::chrono::operator<=<long, std::ratio<1l, 1l>, long, std::ratio<1l, 1l> >(std::chrono::duration<long, std::ratio<1l, 1l> > const&, std::chrono::duration<long, std::ratio<1l, 1l> > const&)>
  401c3f:	84 c0                	test   %al,%al
  401c41:	74 0d                	je     401c50 <void std::this_thread::sleep_for<long, std::ratio<1l, 1l> >(std::chrono::duration<long, std::ratio<1l, 1l> > const&)+0x30>
  401c43:	48 83 c4 20          	add    $0x20,%rsp
  401c47:	5d                   	pop    %rbp
  401c48:	c3                   	retq   
  401c49:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  401c50:	48 89 ef             	mov    %rbp,%rdi
  401c53:	e8 e8 fd ff ff       	callq  401a40 <std::enable_if<std::chrono::__is_duration<std::chrono::duration<long, std::ratio<1l, 1l> > >::value, std::chrono::duration<long, std::ratio<1l, 1l> > >::type std::chrono::duration_cast<std::chrono::duration<long, std::ratio<1l, 1l> >, long, std::ratio<1l, 1l> >(std::chrono::duration<long, std::ratio<1l, 1l> > const&)>
  401c58:	48 8d 74 24 08       	lea    0x8(%rsp),%rsi
  401c5d:	48 89 ef             	mov    %rbp,%rdi
  401c60:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  401c65:	e8 e6 fd ff ff       	callq  401a50 <std::common_type<std::chrono::duration<long, std::ratio<1l, 1l> >, std::chrono::duration<long, std::ratio<1l, 1l> > >::type std::chrono::operator-<long, std::ratio<1l, 1l>, long, std::ratio<1l, 1l> >(std::chrono::duration<long, std::ratio<1l, 1l> > const&, std::chrono::duration<long, std::ratio<1l, 1l> > const&)>
  401c6a:	48 8d 7c 24 10       	lea    0x10(%rsp),%rdi
  401c6f:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  401c74:	e8 97 ff ff ff       	callq  401c10 <std::enable_if<std::chrono::__is_duration<std::chrono::duration<long, std::ratio<1l, 1000000000l> > >::value, std::chrono::duration<long, std::ratio<1l, 1000000000l> > >::type std::chrono::duration_cast<std::chrono::duration<long, std::ratio<1l, 1000000000l> >, long, std::ratio<1l, 1l> >(std::chrono::duration<long, std::ratio<1l, 1l> > const&)>
  401c79:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  401c7e:	49 89 c0             	mov    %rax,%r8
  401c81:	e8 7a f8 ff ff       	callq  401500 <std::chrono::duration<long, std::ratio<1l, 1000000000l> >::count() const [clone .isra.0]>
  401c86:	4c 89 c7             	mov    %r8,%rdi
  401c89:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  401c8e:	e8 6d f8 ff ff       	callq  401500 <std::chrono::duration<long, std::ratio<1l, 1000000000l> >::count() const [clone .isra.0]>
  401c93:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  401c98:	eb 10                	jmp    401caa <void std::this_thread::sleep_for<long, std::ratio<1l, 1l> >(std::chrono::duration<long, std::ratio<1l, 1l> > const&)+0x8a>
  401c9a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  401ca0:	e8 8b f3 ff ff       	callq  401030 <__errno_location@plt>
  401ca5:	83 38 04             	cmpl   $0x4,(%rax)
  401ca8:	75 99                	jne    401c43 <void std::this_thread::sleep_for<long, std::ratio<1l, 1l> >(std::chrono::duration<long, std::ratio<1l, 1l> > const&)+0x23>
  401caa:	48 8d 74 24 10       	lea    0x10(%rsp),%rsi
  401caf:	48 89 f7             	mov    %rsi,%rdi
  401cb2:	e8 99 f3 ff ff       	callq  401050 <nanosleep@plt>
  401cb7:	83 f8 ff             	cmp    $0xffffffff,%eax
  401cba:	74 e4                	je     401ca0 <void std::this_thread::sleep_for<long, std::ratio<1l, 1l> >(std::chrono::duration<long, std::ratio<1l, 1l> > const&)+0x80>
  401cbc:	48 83 c4 20          	add    $0x20,%rsp
  401cc0:	5d                   	pop    %rbp
  401cc1:	c3                   	retq   
  401cc2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  401cc9:	00 00 00 
  401ccc:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000401cd0 <std::__detail::_Mod<unsigned long, 2147483647ul, 16807ul, 0ul, true, true>::__calc(unsigned long)>:
  401cd0:	48 69 ff a7 41 00 00 	imul   $0x41a7,%rdi,%rdi
  401cd7:	48 ba 05 00 00 00 02 	movabs $0x200000005,%rdx
  401cde:	00 00 00 
  401ce1:	48 89 f8             	mov    %rdi,%rax
  401ce4:	48 f7 e2             	mul    %rdx
  401ce7:	48 89 f8             	mov    %rdi,%rax
  401cea:	48 29 d0             	sub    %rdx,%rax
  401ced:	48 d1 e8             	shr    %rax
  401cf0:	48 01 d0             	add    %rdx,%rax
  401cf3:	48 c1 e8 1e          	shr    $0x1e,%rax
  401cf7:	48 89 c2             	mov    %rax,%rdx
  401cfa:	48 c1 e2 1f          	shl    $0x1f,%rdx
  401cfe:	48 29 c2             	sub    %rax,%rdx
  401d01:	48 89 f8             	mov    %rdi,%rax
  401d04:	48 29 d0             	sub    %rdx,%rax
  401d07:	c3                   	retq   
  401d08:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  401d0f:	00 

0000000000401d10 <unsigned long std::__detail::__mod<unsigned long, 2147483647ul, 16807ul, 0ul>(unsigned long)>:
  401d10:	e9 bb ff ff ff       	jmpq   401cd0 <std::__detail::_Mod<unsigned long, 2147483647ul, 16807ul, 0ul, true, true>::__calc(unsigned long)>
  401d15:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  401d1c:	00 00 00 
  401d1f:	90                   	nop

0000000000401d20 <std::thread::_Invoker<std::tuple<void (*)()> >&& std::forward<std::thread::_Invoker<std::tuple<void (*)()> > >(std::remove_reference<std::thread::_Invoker<std::tuple<void (*)()> > >::type&)>:
  401d20:	48 89 f8             	mov    %rdi,%rax
  401d23:	c3                   	retq   
  401d24:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  401d2b:	00 00 00 
  401d2e:	66 90                	xchg   %ax,%ax

0000000000401d30 <std::thread::_State::_State()>:
  401d30:	48 c7 07 50 5d 40 00 	movq   $0x405d50,(%rdi)
  401d37:	c3                   	retq   
  401d38:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  401d3f:	00 

0000000000401d40 <std::remove_reference<std::thread::_State*&>::type&& std::move<std::thread::_State*&>(std::thread::_State*&)>:
  401d40:	48 89 f8             	mov    %rdi,%rax
  401d43:	c3                   	retq   
  401d44:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  401d4b:	00 00 00 
  401d4e:	66 90                	xchg   %ax,%ax

0000000000401d50 <std::__detail::_Mod<unsigned long, 2147483647ul, 1ul, 0ul, true, true>::__calc(unsigned long)>:
  401d50:	48 89 f8             	mov    %rdi,%rax
  401d53:	48 ba 05 00 00 00 02 	movabs $0x200000005,%rdx
  401d5a:	00 00 00 
  401d5d:	48 f7 e2             	mul    %rdx
  401d60:	48 89 f8             	mov    %rdi,%rax
  401d63:	48 29 d0             	sub    %rdx,%rax
  401d66:	48 d1 e8             	shr    %rax
  401d69:	48 01 d0             	add    %rdx,%rax
  401d6c:	48 c1 e8 1e          	shr    $0x1e,%rax
  401d70:	48 89 c2             	mov    %rax,%rdx
  401d73:	48 c1 e2 1f          	shl    $0x1f,%rdx
  401d77:	48 29 c2             	sub    %rax,%rdx
  401d7a:	48 89 f8             	mov    %rdi,%rax
  401d7d:	48 29 d0             	sub    %rdx,%rax
  401d80:	c3                   	retq   
  401d81:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  401d88:	00 00 00 
  401d8b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000401d90 <unsigned long std::__detail::__mod<unsigned long, 2147483647ul, 1ul, 0ul>(unsigned long)>:
  401d90:	e9 bb ff ff ff       	jmpq   401d50 <std::__detail::_Mod<unsigned long, 2147483647ul, 1ul, 0ul, true, true>::__calc(unsigned long)>
  401d95:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  401d9c:	00 00 00 
  401d9f:	90                   	nop

0000000000401da0 <std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>::seed(unsigned long) [clone .isra.0]>:
  401da0:	41 54                	push   %r12
  401da2:	55                   	push   %rbp
  401da3:	49 89 f4             	mov    %rsi,%r12
  401da6:	53                   	push   %rbx
  401da7:	48 89 fb             	mov    %rdi,%rbx
  401daa:	31 ff                	xor    %edi,%edi
  401dac:	e8 df ff ff ff       	callq  401d90 <unsigned long std::__detail::__mod<unsigned long, 2147483647ul, 1ul, 0ul>(unsigned long)>
  401db1:	4c 89 e7             	mov    %r12,%rdi
  401db4:	48 89 c5             	mov    %rax,%rbp
  401db7:	e8 d4 ff ff ff       	callq  401d90 <unsigned long std::__detail::__mod<unsigned long, 2147483647ul, 1ul, 0ul>(unsigned long)>
  401dbc:	48 85 ed             	test   %rbp,%rbp
  401dbf:	75 0c                	jne    401dcd <std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>::seed(unsigned long) [clone .isra.0]+0x2d>
  401dc1:	48 85 c0             	test   %rax,%rax
  401dc4:	ba 01 00 00 00       	mov    $0x1,%edx
  401dc9:	48 0f 44 c2          	cmove  %rdx,%rax
  401dcd:	48 89 03             	mov    %rax,(%rbx)
  401dd0:	5b                   	pop    %rbx
  401dd1:	5d                   	pop    %rbp
  401dd2:	41 5c                	pop    %r12
  401dd4:	c3                   	retq   
  401dd5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  401ddc:	00 00 00 
  401ddf:	90                   	nop

0000000000401de0 <std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>::linear_congruential_engine(unsigned long)>:
  401de0:	e9 bb ff ff ff       	jmpq   401da0 <std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>::seed(unsigned long) [clone .isra.0]>
  401de5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  401dec:	00 00 00 
  401def:	90                   	nop

0000000000401df0 <std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>::linear_congruential_engine()>:
  401df0:	be 01 00 00 00       	mov    $0x1,%esi
  401df5:	e9 e6 ff ff ff       	jmpq   401de0 <std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>::linear_congruential_engine(unsigned long)>
  401dfa:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000401e00 <void (*&&std::forward<void (*)()>(std::remove_reference<void (*)()>::type&))()>:
  401e00:	48 89 f8             	mov    %rdi,%rax
  401e03:	c3                   	retq   
  401e04:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  401e0b:	00 00 00 
  401e0e:	66 90                	xchg   %ax,%ax

0000000000401e10 <void std::__invoke_impl<void, void (*)()>(std::__invoke_other, void (*&&)()) [clone .isra.0]>:
  401e10:	48 83 ec 08          	sub    $0x8,%rsp
  401e14:	e8 e7 ff ff ff       	callq  401e00 <void (*&&std::forward<void (*)()>(std::remove_reference<void (*)()>::type&))()>
  401e19:	48 8b 00             	mov    (%rax),%rax
  401e1c:	48 83 c4 08          	add    $0x8,%rsp
  401e20:	ff e0                	jmpq   *%rax
  401e22:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  401e29:	00 00 00 
  401e2c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000401e30 <std::_Head_base<0ul, void (*)(), false>::_Head_base<void (*)()>(void (*&&)())>:
  401e30:	53                   	push   %rbx
  401e31:	48 89 fb             	mov    %rdi,%rbx
  401e34:	48 89 f7             	mov    %rsi,%rdi
  401e37:	e8 c4 ff ff ff       	callq  401e00 <void (*&&std::forward<void (*)()>(std::remove_reference<void (*)()>::type&))()>
  401e3c:	48 8b 00             	mov    (%rax),%rax
  401e3f:	48 89 03             	mov    %rax,(%rbx)
  401e42:	5b                   	pop    %rbx
  401e43:	c3                   	retq   
  401e44:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  401e4b:	00 00 00 
  401e4e:	66 90                	xchg   %ax,%ax

0000000000401e50 <std::_Head_base<0ul, void (*)(), false>::_M_head(std::_Head_base<0ul, void (*)(), false>&)>:
  401e50:	48 89 f8             	mov    %rdi,%rax
  401e53:	c3                   	retq   
  401e54:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  401e5b:	00 00 00 
  401e5e:	66 90                	xchg   %ax,%ax

0000000000401e60 <std::_Tuple_impl<0ul, void (*)()>::_M_head(std::_Tuple_impl<0ul, void (*)()>&)>:
  401e60:	e9 eb ff ff ff       	jmpq   401e50 <std::_Head_base<0ul, void (*)(), false>::_M_head(std::_Head_base<0ul, void (*)(), false>&)>
  401e65:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  401e6c:	00 00 00 
  401e6f:	90                   	nop

0000000000401e70 <std::_Tuple_impl<0ul, void (*)()>::_Tuple_impl(std::_Tuple_impl<0ul, void (*)()>&&)>:
  401e70:	55                   	push   %rbp
  401e71:	48 89 fd             	mov    %rdi,%rbp
  401e74:	48 89 f7             	mov    %rsi,%rdi
  401e77:	e8 e4 ff ff ff       	callq  401e60 <std::_Tuple_impl<0ul, void (*)()>::_M_head(std::_Tuple_impl<0ul, void (*)()>&)>
  401e7c:	48 89 c7             	mov    %rax,%rdi
  401e7f:	e8 7c ff ff ff       	callq  401e00 <void (*&&std::forward<void (*)()>(std::remove_reference<void (*)()>::type&))()>
  401e84:	48 89 ef             	mov    %rbp,%rdi
  401e87:	5d                   	pop    %rbp
  401e88:	48 89 c6             	mov    %rax,%rsi
  401e8b:	e9 a0 ff ff ff       	jmpq   401e30 <std::_Head_base<0ul, void (*)(), false>::_Head_base<void (*)()>(void (*&&)())>

0000000000401e90 <std::tuple<void (*)()>::tuple(std::tuple<void (*)()>&&)>:
  401e90:	e9 db ff ff ff       	jmpq   401e70 <std::_Tuple_impl<0ul, void (*)()>::_Tuple_impl(std::_Tuple_impl<0ul, void (*)()>&&)>
  401e95:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  401e9c:	00 00 00 
  401e9f:	90                   	nop

0000000000401ea0 <std::thread::_Invoker<std::tuple<void (*)()> >::_Invoker(std::thread::_Invoker<std::tuple<void (*)()> >&&)>:
  401ea0:	e9 eb ff ff ff       	jmpq   401e90 <std::tuple<void (*)()>::tuple(std::tuple<void (*)()>&&)>
  401ea5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  401eac:	00 00 00 
  401eaf:	90                   	nop

0000000000401eb0 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)()> > >::_State_impl(std::thread::_Invoker<std::tuple<void (*)()> >&&)>:
  401eb0:	55                   	push   %rbp
  401eb1:	53                   	push   %rbx
  401eb2:	48 89 fb             	mov    %rdi,%rbx
  401eb5:	48 89 f5             	mov    %rsi,%rbp
  401eb8:	48 83 ec 08          	sub    $0x8,%rsp
  401ebc:	e8 6f fe ff ff       	callq  401d30 <std::thread::_State::_State()>
  401ec1:	48 c7 03 88 30 40 00 	movq   $0x403088,(%rbx)
  401ec8:	48 89 ef             	mov    %rbp,%rdi
  401ecb:	e8 50 fe ff ff       	callq  401d20 <std::thread::_Invoker<std::tuple<void (*)()> >&& std::forward<std::thread::_Invoker<std::tuple<void (*)()> > >(std::remove_reference<std::thread::_Invoker<std::tuple<void (*)()> > >::type&)>
  401ed0:	48 83 c4 08          	add    $0x8,%rsp
  401ed4:	48 8d 7b 08          	lea    0x8(%rbx),%rdi
  401ed8:	5b                   	pop    %rbx
  401ed9:	48 89 c6             	mov    %rax,%rsi
  401edc:	5d                   	pop    %rbp
  401edd:	e9 be ff ff ff       	jmpq   401ea0 <std::thread::_Invoker<std::tuple<void (*)()> >::_Invoker(std::thread::_Invoker<std::tuple<void (*)()> >&&)>
  401ee2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  401ee9:	00 00 00 
  401eec:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000401ef0 <std::_Head_base<0ul, std::thread::_State*, false>::_Head_base()>:
  401ef0:	48 c7 07 00 00 00 00 	movq   $0x0,(%rdi)
  401ef7:	c3                   	retq   
  401ef8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  401eff:	00 

0000000000401f00 <std::_Tuple_impl<0ul, std::thread::_State*, std::default_delete<std::thread::_State> >::_Tuple_impl()>:
  401f00:	e9 eb ff ff ff       	jmpq   401ef0 <std::_Head_base<0ul, std::thread::_State*, false>::_Head_base()>
  401f05:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  401f0c:	00 00 00 
  401f0f:	90                   	nop

0000000000401f10 <std::tuple<std::thread::_State*, std::default_delete<std::thread::_State> >::tuple<std::thread::_State*, std::default_delete<std::thread::_State>, true>()>:
  401f10:	e9 eb ff ff ff       	jmpq   401f00 <std::_Tuple_impl<0ul, std::thread::_State*, std::default_delete<std::thread::_State> >::_Tuple_impl()>
  401f15:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  401f1c:	00 00 00 
  401f1f:	90                   	nop

0000000000401f20 <std::_Head_base<0ul, std::thread::_State*, false>::_M_head(std::_Head_base<0ul, std::thread::_State*, false>&)>:
  401f20:	48 89 f8             	mov    %rdi,%rax
  401f23:	c3                   	retq   
  401f24:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  401f2b:	00 00 00 
  401f2e:	66 90                	xchg   %ax,%ax

0000000000401f30 <std::_Tuple_impl<0ul, std::thread::_State*, std::default_delete<std::thread::_State> >::_M_head(std::_Tuple_impl<0ul, std::thread::_State*, std::default_delete<std::thread::_State> >&)>:
  401f30:	e9 eb ff ff ff       	jmpq   401f20 <std::_Head_base<0ul, std::thread::_State*, false>::_M_head(std::_Head_base<0ul, std::thread::_State*, false>&)>
  401f35:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  401f3c:	00 00 00 
  401f3f:	90                   	nop

0000000000401f40 <std::thread::_State*& std::__get_helper<0ul, std::thread::_State*, std::default_delete<std::thread::_State> >(std::_Tuple_impl<0ul, std::thread::_State*, std::default_delete<std::thread::_State> >&)>:
  401f40:	e9 eb ff ff ff       	jmpq   401f30 <std::_Tuple_impl<0ul, std::thread::_State*, std::default_delete<std::thread::_State> >::_M_head(std::_Tuple_impl<0ul, std::thread::_State*, std::default_delete<std::thread::_State> >&)>
  401f45:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  401f4c:	00 00 00 
  401f4f:	90                   	nop

0000000000401f50 <std::tuple_element<0ul, std::tuple<std::thread::_State*, std::default_delete<std::thread::_State> > >::type& std::get<0ul, std::thread::_State*, std::default_delete<std::thread::_State> >(std::tuple<std::thread::_State*, std::default_delete<std::thread::_State> >&)>:
  401f50:	e9 eb ff ff ff       	jmpq   401f40 <std::thread::_State*& std::__get_helper<0ul, std::thread::_State*, std::default_delete<std::thread::_State> >(std::_Tuple_impl<0ul, std::thread::_State*, std::default_delete<std::thread::_State> >&)>
  401f55:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  401f5c:	00 00 00 
  401f5f:	90                   	nop

0000000000401f60 <std::__uniq_ptr_impl<std::thread::_State, std::default_delete<std::thread::_State> >::_M_ptr()>:
  401f60:	e9 eb ff ff ff       	jmpq   401f50 <std::tuple_element<0ul, std::tuple<std::thread::_State*, std::default_delete<std::thread::_State> > >::type& std::get<0ul, std::thread::_State*, std::default_delete<std::thread::_State> >(std::tuple<std::thread::_State*, std::default_delete<std::thread::_State> >&)>
  401f65:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  401f6c:	00 00 00 
  401f6f:	90                   	nop

0000000000401f70 <std::__uniq_ptr_impl<std::thread::_State, std::default_delete<std::thread::_State> >::__uniq_ptr_impl(std::thread::_State*)>:
  401f70:	55                   	push   %rbp
  401f71:	53                   	push   %rbx
  401f72:	48 89 fd             	mov    %rdi,%rbp
  401f75:	48 89 f3             	mov    %rsi,%rbx
  401f78:	48 83 ec 08          	sub    $0x8,%rsp
  401f7c:	e8 8f ff ff ff       	callq  401f10 <std::tuple<std::thread::_State*, std::default_delete<std::thread::_State> >::tuple<std::thread::_State*, std::default_delete<std::thread::_State>, true>()>
  401f81:	48 89 ef             	mov    %rbp,%rdi
  401f84:	e8 d7 ff ff ff       	callq  401f60 <std::__uniq_ptr_impl<std::thread::_State, std::default_delete<std::thread::_State> >::_M_ptr()>
  401f89:	48 89 18             	mov    %rbx,(%rax)
  401f8c:	48 83 c4 08          	add    $0x8,%rsp
  401f90:	5b                   	pop    %rbx
  401f91:	5d                   	pop    %rbp
  401f92:	c3                   	retq   
  401f93:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  401f9a:	00 00 00 
  401f9d:	0f 1f 00             	nopl   (%rax)

0000000000401fa0 <std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> >::unique_ptr<std::default_delete<std::thread::_State>, void>(std::thread::_State*)>:
  401fa0:	e9 cb ff ff ff       	jmpq   401f70 <std::__uniq_ptr_impl<std::thread::_State, std::default_delete<std::thread::_State> >::__uniq_ptr_impl(std::thread::_State*)>
  401fa5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  401fac:	00 00 00 
  401faf:	90                   	nop

0000000000401fb0 <std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> > std::thread::_S_make_state<std::thread::_Invoker<std::tuple<void (*)()> > >(std::thread::_Invoker<std::tuple<void (*)()> >&&)>:
  401fb0:	41 55                	push   %r13
  401fb2:	41 54                	push   %r12
  401fb4:	49 89 fc             	mov    %rdi,%r12
  401fb7:	48 89 f7             	mov    %rsi,%rdi
  401fba:	55                   	push   %rbp
  401fbb:	e8 60 fd ff ff       	callq  401d20 <std::thread::_Invoker<std::tuple<void (*)()> >&& std::forward<std::thread::_Invoker<std::tuple<void (*)()> > >(std::remove_reference<std::thread::_Invoker<std::tuple<void (*)()> > >::type&)>
  401fc0:	bf 10 00 00 00       	mov    $0x10,%edi
  401fc5:	49 89 c5             	mov    %rax,%r13
  401fc8:	e8 f3 f0 ff ff       	callq  4010c0 <operator new(unsigned long)@plt>
  401fcd:	4c 89 ee             	mov    %r13,%rsi
  401fd0:	48 89 c5             	mov    %rax,%rbp
  401fd3:	48 89 c7             	mov    %rax,%rdi
  401fd6:	e8 d5 fe ff ff       	callq  401eb0 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)()> > >::_State_impl(std::thread::_Invoker<std::tuple<void (*)()> >&&)>
  401fdb:	48 89 ee             	mov    %rbp,%rsi
  401fde:	4c 89 e7             	mov    %r12,%rdi
  401fe1:	e8 ba ff ff ff       	callq  401fa0 <std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> >::unique_ptr<std::default_delete<std::thread::_State>, void>(std::thread::_State*)>
  401fe6:	4c 89 e0             	mov    %r12,%rax
  401fe9:	5d                   	pop    %rbp
  401fea:	41 5c                	pop    %r12
  401fec:	41 5d                	pop    %r13
  401fee:	c3                   	retq   
  401fef:	90                   	nop

0000000000401ff0 <std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> >::~unique_ptr()>:
  401ff0:	53                   	push   %rbx
  401ff1:	e8 6a ff ff ff       	callq  401f60 <std::__uniq_ptr_impl<std::thread::_State, std::default_delete<std::thread::_State> >::_M_ptr()>
  401ff6:	48 83 38 00          	cmpq   $0x0,(%rax)
  401ffa:	48 89 c3             	mov    %rax,%rbx
  401ffd:	74 10                	je     40200f <std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> >::~unique_ptr()+0x1f>
  401fff:	48 89 c7             	mov    %rax,%rdi
  402002:	e8 39 fd ff ff       	callq  401d40 <std::remove_reference<std::thread::_State*&>::type&& std::move<std::thread::_State*&>(std::thread::_State*&)>
  402007:	48 8b 38             	mov    (%rax),%rdi
  40200a:	e8 61 f8 ff ff       	callq  401870 <std::default_delete<std::thread::_State>::operator()(std::thread::_State*) const [clone .isra.0]>
  40200f:	48 c7 03 00 00 00 00 	movq   $0x0,(%rbx)
  402016:	5b                   	pop    %rbx
  402017:	c3                   	retq   
  402018:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  40201f:	00 

0000000000402020 <std::remove_reference<std::tuple<void (*)()>&>::type&& std::move<std::tuple<void (*)()>&>(std::tuple<void (*)()>&)>:
  402020:	48 89 f8             	mov    %rdi,%rax
  402023:	c3                   	retq   
  402024:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  40202b:	00 00 00 
  40202e:	66 90                	xchg   %ax,%ax

0000000000402030 <std::__invoke_result<void (*)()>::type std::__invoke<void (*)()>(void (*&&)())>:
  402030:	48 83 ec 08          	sub    $0x8,%rsp
  402034:	e8 c7 fd ff ff       	callq  401e00 <void (*&&std::forward<void (*)()>(std::remove_reference<void (*)()>::type&))()>
  402039:	48 83 c4 08          	add    $0x8,%rsp
  40203d:	48 89 c7             	mov    %rax,%rdi
  402040:	e9 cb fd ff ff       	jmpq   401e10 <void std::__invoke_impl<void, void (*)()>(std::__invoke_other, void (*&&)()) [clone .isra.0]>
  402045:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  40204c:	00 00 00 
  40204f:	90                   	nop

0000000000402050 <void (*&&std::forward<void (*&&)()>(std::remove_reference<void (*&&)()>::type&))()>:
  402050:	48 89 f8             	mov    %rdi,%rax
  402053:	c3                   	retq   
  402054:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  40205b:	00 00 00 
  40205e:	66 90                	xchg   %ax,%ax

0000000000402060 <void (*&std::__get_helper<0ul, void (*)()>(std::_Tuple_impl<0ul, void (*)()>&))()>:
  402060:	e9 fb fd ff ff       	jmpq   401e60 <std::_Tuple_impl<0ul, void (*)()>::_M_head(std::_Tuple_impl<0ul, void (*)()>&)>
  402065:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  40206c:	00 00 00 
  40206f:	90                   	nop

0000000000402070 <std::tuple_element<0ul, std::tuple<void (*)()> >::type& std::get<0ul, void (*)()>(std::tuple<void (*)()>&)>:
  402070:	e9 eb ff ff ff       	jmpq   402060 <void (*&std::__get_helper<0ul, void (*)()>(std::_Tuple_impl<0ul, void (*)()>&))()>
  402075:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  40207c:	00 00 00 
  40207f:	90                   	nop

0000000000402080 <std::tuple_element<0ul, std::tuple<void (*)()> >::type&& std::get<0ul, void (*)()>(std::tuple<void (*)()>&&)>:
  402080:	48 83 ec 08          	sub    $0x8,%rsp
  402084:	e8 e7 ff ff ff       	callq  402070 <std::tuple_element<0ul, std::tuple<void (*)()> >::type& std::get<0ul, void (*)()>(std::tuple<void (*)()>&)>
  402089:	48 83 c4 08          	add    $0x8,%rsp
  40208d:	48 89 c7             	mov    %rax,%rdi
  402090:	e9 bb ff ff ff       	jmpq   402050 <void (*&&std::forward<void (*&&)()>(std::remove_reference<void (*&&)()>::type&))()>
  402095:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  40209c:	00 00 00 
  40209f:	90                   	nop

00000000004020a0 <void std::thread::_Invoker<std::tuple<void (*)()> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) [clone .isra.0]>:
  4020a0:	48 83 ec 08          	sub    $0x8,%rsp
  4020a4:	e8 77 ff ff ff       	callq  402020 <std::remove_reference<std::tuple<void (*)()>&>::type&& std::move<std::tuple<void (*)()>&>(std::tuple<void (*)()>&)>
  4020a9:	48 89 c7             	mov    %rax,%rdi
  4020ac:	e8 cf ff ff ff       	callq  402080 <std::tuple_element<0ul, std::tuple<void (*)()> >::type&& std::get<0ul, void (*)()>(std::tuple<void (*)()>&&)>
  4020b1:	48 83 c4 08          	add    $0x8,%rsp
  4020b5:	48 89 c7             	mov    %rax,%rdi
  4020b8:	e9 73 ff ff ff       	jmpq   402030 <std::__invoke_result<void (*)()>::type std::__invoke<void (*)()>(void (*&&)())>
  4020bd:	0f 1f 00             	nopl   (%rax)

00000000004020c0 <std::thread::_Invoker<std::tuple<void (*)()> >::operator()()>:
  4020c0:	e9 db ff ff ff       	jmpq   4020a0 <void std::thread::_Invoker<std::tuple<void (*)()> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) [clone .isra.0]>
  4020c5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4020cc:	00 00 00 
  4020cf:	90                   	nop

00000000004020d0 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)()> > >::_M_run()>:
  4020d0:	48 83 c7 08          	add    $0x8,%rdi
  4020d4:	e9 e7 ff ff ff       	jmpq   4020c0 <std::thread::_Invoker<std::tuple<void (*)()> >::operator()()>
  4020d9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

00000000004020e0 <__libc_csu_init>:
  4020e0:	f3 0f 1e fa          	endbr64 
  4020e4:	41 57                	push   %r15
  4020e6:	4c 8d 3d 1b 3c 00 00 	lea    0x3c1b(%rip),%r15        # 405d08 <__frame_dummy_init_array_entry>
  4020ed:	41 56                	push   %r14
  4020ef:	49 89 d6             	mov    %rdx,%r14
  4020f2:	41 55                	push   %r13
  4020f4:	49 89 f5             	mov    %rsi,%r13
  4020f7:	41 54                	push   %r12
  4020f9:	41 89 fc             	mov    %edi,%r12d
  4020fc:	55                   	push   %rbp
  4020fd:	48 8d 2d 14 3c 00 00 	lea    0x3c14(%rip),%rbp        # 405d18 <__init_array_end>
  402104:	53                   	push   %rbx
  402105:	4c 29 fd             	sub    %r15,%rbp
  402108:	48 83 ec 08          	sub    $0x8,%rsp
  40210c:	e8 ef ee ff ff       	callq  401000 <_init>
  402111:	48 c1 fd 03          	sar    $0x3,%rbp
  402115:	74 1f                	je     402136 <__libc_csu_init+0x56>
  402117:	31 db                	xor    %ebx,%ebx
  402119:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  402120:	4c 89 f2             	mov    %r14,%rdx
  402123:	4c 89 ee             	mov    %r13,%rsi
  402126:	44 89 e7             	mov    %r12d,%edi
  402129:	41 ff 14 df          	callq  *(%r15,%rbx,8)
  40212d:	48 83 c3 01          	add    $0x1,%rbx
  402131:	48 39 dd             	cmp    %rbx,%rbp
  402134:	75 ea                	jne    402120 <__libc_csu_init+0x40>
  402136:	48 83 c4 08          	add    $0x8,%rsp
  40213a:	5b                   	pop    %rbx
  40213b:	5d                   	pop    %rbp
  40213c:	41 5c                	pop    %r12
  40213e:	41 5d                	pop    %r13
  402140:	41 5e                	pop    %r14
  402142:	41 5f                	pop    %r15
  402144:	c3                   	retq   
  402145:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
  40214c:	00 00 00 00 

0000000000402150 <__libc_csu_fini>:
  402150:	f3 0f 1e fa          	endbr64 
  402154:	c3                   	retq   

Desensamblado de la sección .fini:

0000000000402158 <_fini>:
  402158:	f3 0f 1e fa          	endbr64 
  40215c:	48 83 ec 08          	sub    $0x8,%rsp
  402160:	48 83 c4 08          	add    $0x8,%rsp
  402164:	c3                   	retq   
