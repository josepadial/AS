
ballhausen:     formato del fichero elf64-x86-64


Desensamblado de la sección .init:

0000000000401000 <_init>:
  401000:	f3 0f 1e fa          	endbr64 
  401004:	48 83 ec 08          	sub    $0x8,%rsp
  401008:	48 8b 05 d9 4f 00 00 	mov    0x4fd9(%rip),%rax        # 405fe8 <__gmon_start__>
  40100f:	48 85 c0             	test   %rax,%rax
  401012:	74 02                	je     401016 <_init+0x16>
  401014:	ff d0                	callq  *%rax
  401016:	48 83 c4 08          	add    $0x8,%rsp
  40101a:	c3                   	retq   

Desensamblado de la sección .plt:

0000000000401020 <.plt>:
  401020:	ff 35 e2 4f 00 00    	pushq  0x4fe2(%rip)        # 406008 <_GLOBAL_OFFSET_TABLE_+0x8>
  401026:	ff 25 e4 4f 00 00    	jmpq   *0x4fe4(%rip)        # 406010 <_GLOBAL_OFFSET_TABLE_+0x10>
  40102c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000401030 <__errno_location@plt>:
  401030:	ff 25 e2 4f 00 00    	jmpq   *0x4fe2(%rip)        # 406018 <__errno_location@GLIBC_2.2.5>
  401036:	68 00 00 00 00       	pushq  $0x0
  40103b:	e9 e0 ff ff ff       	jmpq   401020 <.plt>

0000000000401040 <std::terminate()@plt>:
  401040:	ff 25 da 4f 00 00    	jmpq   *0x4fda(%rip)        # 406020 <std::terminate()@GLIBCXX_3.4>
  401046:	68 01 00 00 00       	pushq  $0x1
  40104b:	e9 d0 ff ff ff       	jmpq   401020 <.plt>

0000000000401050 <nanosleep@plt>:
  401050:	ff 25 d2 4f 00 00    	jmpq   *0x4fd2(%rip)        # 406028 <nanosleep@GLIBC_2.2.5>
  401056:	68 02 00 00 00       	pushq  $0x2
  40105b:	e9 c0 ff ff ff       	jmpq   401020 <.plt>

0000000000401060 <std::thread::_State::~_State()@plt>:
  401060:	ff 25 ca 4f 00 00    	jmpq   *0x4fca(%rip)        # 406030 <std::thread::_State::~_State()@GLIBCXX_3.4.22>
  401066:	68 03 00 00 00       	pushq  $0x3
  40106b:	e9 b0 ff ff ff       	jmpq   401020 <.plt>

0000000000401070 <std::basic_ostream<char, std::char_traits<char> >& std::endl<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&)@plt>:
  401070:	ff 25 c2 4f 00 00    	jmpq   *0x4fc2(%rip)        # 406038 <std::basic_ostream<char, std::char_traits<char> >& std::endl<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&)@GLIBCXX_3.4>
  401076:	68 04 00 00 00       	pushq  $0x4
  40107b:	e9 a0 ff ff ff       	jmpq   401020 <.plt>

0000000000401080 <pthread_create@plt>:
  401080:	ff 25 ba 4f 00 00    	jmpq   *0x4fba(%rip)        # 406040 <pthread_create@GLIBC_2.2.5>
  401086:	68 05 00 00 00       	pushq  $0x5
  40108b:	e9 90 ff ff ff       	jmpq   401020 <.plt>

0000000000401090 <std::__throw_system_error(int)@plt>:
  401090:	ff 25 b2 4f 00 00    	jmpq   *0x4fb2(%rip)        # 406048 <std::__throw_system_error(int)@GLIBCXX_3.4.11>
  401096:	68 06 00 00 00       	pushq  $0x6
  40109b:	e9 80 ff ff ff       	jmpq   401020 <.plt>

00000000004010a0 <pthread_mutex_unlock@plt>:
  4010a0:	ff 25 aa 4f 00 00    	jmpq   *0x4faa(%rip)        # 406050 <pthread_mutex_unlock@GLIBC_2.2.5>
  4010a6:	68 07 00 00 00       	pushq  $0x7
  4010ab:	e9 70 ff ff ff       	jmpq   401020 <.plt>

00000000004010b0 <sem_post@plt>:
  4010b0:	ff 25 a2 4f 00 00    	jmpq   *0x4fa2(%rip)        # 406058 <sem_post@GLIBC_2.2.5>
  4010b6:	68 08 00 00 00       	pushq  $0x8
  4010bb:	e9 60 ff ff ff       	jmpq   401020 <.plt>

00000000004010c0 <__cxa_atexit@plt>:
  4010c0:	ff 25 9a 4f 00 00    	jmpq   *0x4f9a(%rip)        # 406060 <__cxa_atexit@GLIBC_2.2.5>
  4010c6:	68 09 00 00 00       	pushq  $0x9
  4010cb:	e9 50 ff ff ff       	jmpq   401020 <.plt>

00000000004010d0 <std::thread::_M_start_thread(std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> >, void (*)())@plt>:
  4010d0:	ff 25 92 4f 00 00    	jmpq   *0x4f92(%rip)        # 406068 <std::thread::_M_start_thread(std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> >, void (*)())@GLIBCXX_3.4.22>
  4010d6:	68 0a 00 00 00       	pushq  $0xa
  4010db:	e9 40 ff ff ff       	jmpq   401020 <.plt>

00000000004010e0 <operator new(unsigned long)@plt>:
  4010e0:	ff 25 8a 4f 00 00    	jmpq   *0x4f8a(%rip)        # 406070 <operator new(unsigned long)@GLIBCXX_3.4>
  4010e6:	68 0b 00 00 00       	pushq  $0xb
  4010eb:	e9 30 ff ff ff       	jmpq   401020 <.plt>

00000000004010f0 <operator delete(void*, unsigned long)@plt>:
  4010f0:	ff 25 82 4f 00 00    	jmpq   *0x4f82(%rip)        # 406078 <operator delete(void*, unsigned long)@CXXABI_1.3.9>
  4010f6:	68 0c 00 00 00       	pushq  $0xc
  4010fb:	e9 20 ff ff ff       	jmpq   401020 <.plt>

0000000000401100 <std::ostream::operator<<(std::ostream& (*)(std::ostream&))@plt>:
  401100:	ff 25 7a 4f 00 00    	jmpq   *0x4f7a(%rip)        # 406080 <std::ostream::operator<<(std::ostream& (*)(std::ostream&))@GLIBCXX_3.4>
  401106:	68 0d 00 00 00       	pushq  $0xd
  40110b:	e9 10 ff ff ff       	jmpq   401020 <.plt>

0000000000401110 <sem_wait@plt>:
  401110:	ff 25 72 4f 00 00    	jmpq   *0x4f72(%rip)        # 406088 <sem_wait@GLIBC_2.2.5>
  401116:	68 0e 00 00 00       	pushq  $0xe
  40111b:	e9 00 ff ff ff       	jmpq   401020 <.plt>

0000000000401120 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char)@plt>:
  401120:	ff 25 6a 4f 00 00    	jmpq   *0x4f6a(%rip)        # 406090 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char)@GLIBCXX_3.4>
  401126:	68 0f 00 00 00       	pushq  $0xf
  40112b:	e9 f0 fe ff ff       	jmpq   401020 <.plt>

0000000000401130 <pthread_mutex_lock@plt>:
  401130:	ff 25 62 4f 00 00    	jmpq   *0x4f62(%rip)        # 406098 <pthread_mutex_lock@GLIBC_2.2.5>
  401136:	68 10 00 00 00       	pushq  $0x10
  40113b:	e9 e0 fe ff ff       	jmpq   401020 <.plt>

0000000000401140 <std::ios_base::Init::Init()@plt>:
  401140:	ff 25 5a 4f 00 00    	jmpq   *0x4f5a(%rip)        # 4060a0 <std::ios_base::Init::Init()@GLIBCXX_3.4>
  401146:	68 11 00 00 00       	pushq  $0x11
  40114b:	e9 d0 fe ff ff       	jmpq   401020 <.plt>

0000000000401150 <__gxx_personality_v0@plt>:
  401150:	ff 25 52 4f 00 00    	jmpq   *0x4f52(%rip)        # 4060a8 <__gxx_personality_v0@CXXABI_1.3>
  401156:	68 12 00 00 00       	pushq  $0x12
  40115b:	e9 c0 fe ff ff       	jmpq   401020 <.plt>

0000000000401160 <__pthread_key_create@plt>:
  401160:	ff 25 4a 4f 00 00    	jmpq   *0x4f4a(%rip)        # 4060b0 <__pthread_key_create@GLIBC_2.2.5>
  401166:	68 13 00 00 00       	pushq  $0x13
  40116b:	e9 b0 fe ff ff       	jmpq   401020 <.plt>

0000000000401170 <std::thread::join()@plt>:
  401170:	ff 25 42 4f 00 00    	jmpq   *0x4f42(%rip)        # 4060b8 <std::thread::join()@GLIBCXX_3.4.11>
  401176:	68 14 00 00 00       	pushq  $0x14
  40117b:	e9 a0 fe ff ff       	jmpq   401020 <.plt>

0000000000401180 <sem_init@plt>:
  401180:	ff 25 3a 4f 00 00    	jmpq   *0x4f3a(%rip)        # 4060c0 <sem_init@GLIBC_2.2.5>
  401186:	68 15 00 00 00       	pushq  $0x15
  40118b:	e9 90 fe ff ff       	jmpq   401020 <.plt>

0000000000401190 <_Unwind_Resume@plt>:
  401190:	ff 25 32 4f 00 00    	jmpq   *0x4f32(%rip)        # 4060c8 <_Unwind_Resume@GCC_3.0>
  401196:	68 16 00 00 00       	pushq  $0x16
  40119b:	e9 80 fe ff ff       	jmpq   401020 <.plt>

00000000004011a0 <std::ios_base::Init::~Init()@plt>:
  4011a0:	ff 25 2a 4f 00 00    	jmpq   *0x4f2a(%rip)        # 4060d0 <std::ios_base::Init::~Init()@GLIBCXX_3.4>
  4011a6:	68 17 00 00 00       	pushq  $0x17
  4011ab:	e9 70 fe ff ff       	jmpq   401020 <.plt>

Desensamblado de la sección .text:

00000000004011b0 <std::thread::thread<void (&)(), , void>(void (&)()) [clone .constprop.0] [clone .cold]>:
  4011b0:	48 8d 7c 24 08       	lea    0x8(%rsp),%rdi
  4011b5:	c5 f8 77             	vzeroupper 
  4011b8:	e8 93 0d 00 00       	callq  401f50 <std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> >::~unique_ptr()>
  4011bd:	48 89 ef             	mov    %rbp,%rdi
  4011c0:	e8 cb ff ff ff       	callq  401190 <_Unwind_Resume@plt>
  4011c5:	90                   	nop

00000000004011c6 <std::thread::thread<void (&)(), , void>(void (&)()) [clone .constprop.1] [clone .cold]>:
  4011c6:	48 8d 7c 24 08       	lea    0x8(%rsp),%rdi
  4011cb:	c5 f8 77             	vzeroupper 
  4011ce:	e8 7d 0d 00 00       	callq  401f50 <std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> >::~unique_ptr()>
  4011d3:	48 89 ef             	mov    %rbp,%rdi
  4011d6:	e8 b5 ff ff ff       	callq  401190 <_Unwind_Resume@plt>

00000000004011db <main.cold>:
  4011db:	48 8d 9c 24 b0 00 00 	lea    0xb0(%rsp),%rbx
  4011e2:	00 
  4011e3:	c5 f8 77             	vzeroupper 
  4011e6:	48 83 eb 08          	sub    $0x8,%rbx
  4011ea:	48 89 df             	mov    %rbx,%rdi
  4011ed:	e8 ae 06 00 00       	callq  4018a0 <std::thread::~thread()>
  4011f2:	4c 39 e3             	cmp    %r12,%rbx
  4011f5:	75 ef                	jne    4011e6 <main.cold+0xb>
  4011f7:	48 83 eb 08          	sub    $0x8,%rbx
  4011fb:	48 89 df             	mov    %rbx,%rdi
  4011fe:	e8 9d 06 00 00       	callq  4018a0 <std::thread::~thread()>
  401203:	48 39 eb             	cmp    %rbp,%rbx
  401206:	75 ef                	jne    4011f7 <main.cold+0x1c>
  401208:	4c 89 ef             	mov    %r13,%rdi
  40120b:	e8 80 ff ff ff       	callq  401190 <_Unwind_Resume@plt>

0000000000401210 <__static_initialization_and_destruction_0(int, int) [clone .constprop.0]>:
  401210:	48 83 ec 08          	sub    $0x8,%rsp
  401214:	bf 48 62 40 00       	mov    $0x406248,%edi
  401219:	e8 22 ff ff ff       	callq  401140 <std::ios_base::Init::Init()@plt>
  40121e:	ba 08 30 40 00       	mov    $0x403008,%edx
  401223:	be 48 62 40 00       	mov    $0x406248,%esi
  401228:	bf a0 11 40 00       	mov    $0x4011a0,%edi
  40122d:	48 83 c4 08          	add    $0x8,%rsp
  401231:	e9 8a fe ff ff       	jmpq   4010c0 <__cxa_atexit@plt>
  401236:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  40123d:	00 00 00 

0000000000401240 <main>:
  401240:	41 56                	push   %r14
  401242:	41 55                	push   %r13
  401244:	41 54                	push   %r12
  401246:	55                   	push   %rbp
  401247:	53                   	push   %rbx
  401248:	48 81 ec b0 00 00 00 	sub    $0xb0,%rsp
  40124f:	48 8d 6c 24 30       	lea    0x30(%rsp),%rbp
  401254:	4c 8d 64 24 70       	lea    0x70(%rsp),%r12
  401259:	48 89 eb             	mov    %rbp,%rbx
  40125c:	0f 1f 40 00          	nopl   0x0(%rax)
  401260:	48 89 df             	mov    %rbx,%rdi
  401263:	48 83 c3 08          	add    $0x8,%rbx
  401267:	e8 54 06 00 00       	callq  4018c0 <std::thread::thread()>
  40126c:	4c 39 e3             	cmp    %r12,%rbx
  40126f:	75 ef                	jne    401260 <main+0x20>
  401271:	4c 8d ac 24 b0 00 00 	lea    0xb0(%rsp),%r13
  401278:	00 
  401279:	4c 89 e3             	mov    %r12,%rbx
  40127c:	0f 1f 40 00          	nopl   0x0(%rax)
  401280:	48 89 df             	mov    %rbx,%rdi
  401283:	48 83 c3 08          	add    $0x8,%rbx
  401287:	e8 34 06 00 00       	callq  4018c0 <std::thread::thread()>
  40128c:	4c 39 eb             	cmp    %r13,%rbx
  40128f:	75 ef                	jne    401280 <main+0x40>
  401291:	48 8d 7c 24 08       	lea    0x8(%rsp),%rdi
  401296:	49 89 ee             	mov    %rbp,%r14
  401299:	4c 89 e3             	mov    %r12,%rbx
  40129c:	e8 af 0a 00 00       	callq  401d50 <std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>::linear_congruential_engine()>
  4012a1:	ba 08 00 00 00       	mov    $0x8,%edx
  4012a6:	31 f6                	xor    %esi,%esi
  4012a8:	bf 00 62 40 00       	mov    $0x406200,%edi
  4012ad:	e8 ce fe ff ff       	callq  401180 <sem_init@plt>
  4012b2:	eb 53                	jmp    401307 <main+0xc7>
  4012b4:	0f 1f 40 00          	nopl   0x0(%rax)
  4012b8:	48 8d 7c 24 10       	lea    0x10(%rsp),%rdi
  4012bd:	e8 e6 04 00 00       	callq  4017a8 <std::thread::thread<void (&)(), , void>(void (&)()) [clone .constprop.1]>
  4012c2:	48 8d 74 24 10       	lea    0x10(%rsp),%rsi
  4012c7:	4c 89 f7             	mov    %r14,%rdi
  4012ca:	e8 81 07 00 00       	callq  401a50 <std::thread::operator=(std::thread&&)>
  4012cf:	48 8d 7c 24 10       	lea    0x10(%rsp),%rdi
  4012d4:	e8 c7 05 00 00       	callq  4018a0 <std::thread::~thread()>
  4012d9:	48 8d 7c 24 18       	lea    0x18(%rsp),%rdi
  4012de:	e8 65 04 00 00       	callq  401748 <std::thread::thread<void (&)(), , void>(void (&)()) [clone .constprop.0]>
  4012e3:	48 89 df             	mov    %rbx,%rdi
  4012e6:	48 8d 74 24 18       	lea    0x18(%rsp),%rsi
  4012eb:	48 83 c3 08          	add    $0x8,%rbx
  4012ef:	e8 5c 07 00 00       	callq  401a50 <std::thread::operator=(std::thread&&)>
  4012f4:	48 8d 7c 24 18       	lea    0x18(%rsp),%rdi
  4012f9:	49 83 c6 08          	add    $0x8,%r14
  4012fd:	e8 9e 05 00 00       	callq  4018a0 <std::thread::~thread()>
  401302:	4c 39 eb             	cmp    %r13,%rbx
  401305:	74 5d                	je     401364 <main+0x124>
  401307:	48 8d 7c 24 08       	lea    0x8(%rsp),%rdi
  40130c:	e8 1f 04 00 00       	callq  401730 <std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>::operator()() [clone .isra.0]>
  401311:	a8 01                	test   $0x1,%al
  401313:	75 a3                	jne    4012b8 <main+0x78>
  401315:	48 8d 7c 24 20       	lea    0x20(%rsp),%rdi
  40131a:	e8 29 04 00 00       	callq  401748 <std::thread::thread<void (&)(), , void>(void (&)()) [clone .constprop.0]>
  40131f:	48 8d 74 24 20       	lea    0x20(%rsp),%rsi
  401324:	48 89 df             	mov    %rbx,%rdi
  401327:	e8 24 07 00 00       	callq  401a50 <std::thread::operator=(std::thread&&)>
  40132c:	48 8d 7c 24 20       	lea    0x20(%rsp),%rdi
  401331:	e8 6a 05 00 00       	callq  4018a0 <std::thread::~thread()>
  401336:	48 8d 7c 24 28       	lea    0x28(%rsp),%rdi
  40133b:	e8 68 04 00 00       	callq  4017a8 <std::thread::thread<void (&)(), , void>(void (&)()) [clone .constprop.1]>
  401340:	4c 89 f7             	mov    %r14,%rdi
  401343:	48 8d 74 24 28       	lea    0x28(%rsp),%rsi
  401348:	48 83 c3 08          	add    $0x8,%rbx
  40134c:	e8 ff 06 00 00       	callq  401a50 <std::thread::operator=(std::thread&&)>
  401351:	48 8d 7c 24 28       	lea    0x28(%rsp),%rdi
  401356:	49 83 c6 08          	add    $0x8,%r14
  40135a:	e8 41 05 00 00       	callq  4018a0 <std::thread::~thread()>
  40135f:	4c 39 eb             	cmp    %r13,%rbx
  401362:	75 a3                	jne    401307 <main+0xc7>
  401364:	e8 c7 07 00 00       	callq  401b30 <std::chrono::duration<long, std::ratio<1l, 1l> > std::literals::chrono_literals::operator"" s<(char)49>()>
  401369:	48 8d 7c 24 28       	lea    0x28(%rsp),%rdi
  40136e:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  401373:	e8 08 08 00 00       	callq  401b80 <void std::this_thread::sleep_for<long, std::ratio<1l, 1l> >(std::chrono::duration<long, std::ratio<1l, 1l> > const&)>
  401378:	31 f6                	xor    %esi,%esi
  40137a:	bf dc 60 40 00       	mov    $0x4060dc,%edi
  40137f:	48 89 eb             	mov    %rbp,%rbx
  401382:	e8 59 05 00 00       	callq  4018e0 <std::atomic<bool>::operator=(bool)>
  401387:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  40138e:	00 00 
  401390:	48 89 df             	mov    %rbx,%rdi
  401393:	e8 d8 fd ff ff       	callq  401170 <std::thread::join()@plt>
  401398:	48 83 c3 08          	add    $0x8,%rbx
  40139c:	4c 39 e3             	cmp    %r12,%rbx
  40139f:	75 ef                	jne    401390 <main+0x150>
  4013a1:	4c 89 e3             	mov    %r12,%rbx
  4013a4:	0f 1f 40 00          	nopl   0x0(%rax)
  4013a8:	48 89 df             	mov    %rbx,%rdi
  4013ab:	e8 c0 fd ff ff       	callq  401170 <std::thread::join()@plt>
  4013b0:	48 83 c3 08          	add    $0x8,%rbx
  4013b4:	4c 39 eb             	cmp    %r13,%rbx
  4013b7:	75 ef                	jne    4013a8 <main+0x168>
  4013b9:	48 8d 9c 24 a8 00 00 	lea    0xa8(%rsp),%rbx
  4013c0:	00 
  4013c1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  4013c8:	48 89 df             	mov    %rbx,%rdi
  4013cb:	e8 d0 04 00 00       	callq  4018a0 <std::thread::~thread()>
  4013d0:	48 89 d8             	mov    %rbx,%rax
  4013d3:	48 83 eb 08          	sub    $0x8,%rbx
  4013d7:	4c 39 e0             	cmp    %r12,%rax
  4013da:	75 ec                	jne    4013c8 <main+0x188>
  4013dc:	48 8d 5c 24 68       	lea    0x68(%rsp),%rbx
  4013e1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  4013e8:	48 89 df             	mov    %rbx,%rdi
  4013eb:	e8 b0 04 00 00       	callq  4018a0 <std::thread::~thread()>
  4013f0:	48 89 d8             	mov    %rbx,%rax
  4013f3:	48 83 eb 08          	sub    $0x8,%rbx
  4013f7:	48 39 e8             	cmp    %rbp,%rax
  4013fa:	75 ec                	jne    4013e8 <main+0x1a8>
  4013fc:	48 81 c4 b0 00 00 00 	add    $0xb0,%rsp
  401403:	31 c0                	xor    %eax,%eax
  401405:	5b                   	pop    %rbx
  401406:	5d                   	pop    %rbp
  401407:	41 5c                	pop    %r12
  401409:	41 5d                	pop    %r13
  40140b:	41 5e                	pop    %r14
  40140d:	c3                   	retq   
  40140e:	49 89 c5             	mov    %rax,%r13
  401411:	e9 c5 fd ff ff       	jmpq   4011db <main.cold>
  401416:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  40141d:	00 00 00 

0000000000401420 <_GLOBAL__sub_I_run>:
  401420:	e9 eb fd ff ff       	jmpq   401210 <__static_initialization_and_destruction_0(int, int) [clone .constprop.0]>

0000000000401425 <.annobin_init.c.hot>:
  401425:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  40142c:	00 00 00 
  40142f:	90                   	nop

0000000000401430 <_start>:
  401430:	f3 0f 1e fa          	endbr64 
  401434:	31 ed                	xor    %ebp,%ebp
  401436:	49 89 d1             	mov    %rdx,%r9
  401439:	5e                   	pop    %rsi
  40143a:	48 89 e2             	mov    %rsp,%rdx
  40143d:	48 83 e4 f0          	and    $0xfffffffffffffff0,%rsp
  401441:	50                   	push   %rax
  401442:	54                   	push   %rsp
  401443:	49 c7 c0 b0 20 40 00 	mov    $0x4020b0,%r8
  40144a:	48 c7 c1 40 20 40 00 	mov    $0x402040,%rcx
  401451:	48 c7 c7 40 12 40 00 	mov    $0x401240,%rdi
  401458:	ff 15 82 4b 00 00    	callq  *0x4b82(%rip)        # 405fe0 <__libc_start_main@GLIBC_2.2.5>
  40145e:	f4                   	hlt    

000000000040145f <.annobin_init.c>:
  40145f:	90                   	nop

0000000000401460 <_dl_relocate_static_pie>:
  401460:	f3 0f 1e fa          	endbr64 
  401464:	c3                   	retq   

0000000000401465 <.annobin_static_reloc.c_end>:
  401465:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  40146c:	00 00 00 
  40146f:	90                   	nop

0000000000401470 <deregister_tm_clones>:
  401470:	b8 e0 60 40 00       	mov    $0x4060e0,%eax
  401475:	48 3d e0 60 40 00    	cmp    $0x4060e0,%rax
  40147b:	74 13                	je     401490 <deregister_tm_clones+0x20>
  40147d:	b8 00 00 00 00       	mov    $0x0,%eax
  401482:	48 85 c0             	test   %rax,%rax
  401485:	74 09                	je     401490 <deregister_tm_clones+0x20>
  401487:	bf e0 60 40 00       	mov    $0x4060e0,%edi
  40148c:	ff e0                	jmpq   *%rax
  40148e:	66 90                	xchg   %ax,%ax
  401490:	c3                   	retq   
  401491:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
  401498:	00 00 00 00 
  40149c:	0f 1f 40 00          	nopl   0x0(%rax)

00000000004014a0 <register_tm_clones>:
  4014a0:	be e0 60 40 00       	mov    $0x4060e0,%esi
  4014a5:	48 81 ee e0 60 40 00 	sub    $0x4060e0,%rsi
  4014ac:	48 89 f0             	mov    %rsi,%rax
  4014af:	48 c1 ee 3f          	shr    $0x3f,%rsi
  4014b3:	48 c1 f8 03          	sar    $0x3,%rax
  4014b7:	48 01 c6             	add    %rax,%rsi
  4014ba:	48 d1 fe             	sar    %rsi
  4014bd:	74 11                	je     4014d0 <register_tm_clones+0x30>
  4014bf:	b8 00 00 00 00       	mov    $0x0,%eax
  4014c4:	48 85 c0             	test   %rax,%rax
  4014c7:	74 07                	je     4014d0 <register_tm_clones+0x30>
  4014c9:	bf e0 60 40 00       	mov    $0x4060e0,%edi
  4014ce:	ff e0                	jmpq   *%rax
  4014d0:	c3                   	retq   
  4014d1:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
  4014d8:	00 00 00 00 
  4014dc:	0f 1f 40 00          	nopl   0x0(%rax)

00000000004014e0 <__do_global_dtors_aux>:
  4014e0:	f3 0f 1e fa          	endbr64 
  4014e4:	80 3d 05 4d 00 00 00 	cmpb   $0x0,0x4d05(%rip)        # 4061f0 <completed.7383>
  4014eb:	75 13                	jne    401500 <__do_global_dtors_aux+0x20>
  4014ed:	55                   	push   %rbp
  4014ee:	48 89 e5             	mov    %rsp,%rbp
  4014f1:	e8 7a ff ff ff       	callq  401470 <deregister_tm_clones>
  4014f6:	c6 05 f3 4c 00 00 01 	movb   $0x1,0x4cf3(%rip)        # 4061f0 <completed.7383>
  4014fd:	5d                   	pop    %rbp
  4014fe:	c3                   	retq   
  4014ff:	90                   	nop
  401500:	c3                   	retq   
  401501:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
  401508:	00 00 00 00 
  40150c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000401510 <frame_dummy>:
  401510:	f3 0f 1e fa          	endbr64 
  401514:	eb 8a                	jmp    4014a0 <register_tm_clones>
  401516:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  40151d:	00 00 00 

0000000000401520 <__gthread_active_p()>:
  401520:	b8 60 11 40 00       	mov    $0x401160,%eax
  401525:	48 85 c0             	test   %rax,%rax
  401528:	0f 95 c0             	setne  %al
  40152b:	0f b6 c0             	movzbl %al,%eax
  40152e:	c3                   	retq   
  40152f:	90                   	nop

0000000000401530 <__gthread_mutex_lock(pthread_mutex_t*)>:
  401530:	48 83 ec 08          	sub    $0x8,%rsp
  401534:	e8 e7 ff ff ff       	callq  401520 <__gthread_active_p()>
  401539:	85 c0                	test   %eax,%eax
  40153b:	75 0b                	jne    401548 <__gthread_mutex_lock(pthread_mutex_t*)+0x18>
  40153d:	31 c0                	xor    %eax,%eax
  40153f:	48 83 c4 08          	add    $0x8,%rsp
  401543:	c3                   	retq   
  401544:	0f 1f 40 00          	nopl   0x0(%rax)
  401548:	48 83 c4 08          	add    $0x8,%rsp
  40154c:	e9 df fb ff ff       	jmpq   401130 <pthread_mutex_lock@plt>
  401551:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000401558 <__gthread_mutex_unlock(pthread_mutex_t*)>:
  401558:	48 83 ec 08          	sub    $0x8,%rsp
  40155c:	e8 bf ff ff ff       	callq  401520 <__gthread_active_p()>
  401561:	85 c0                	test   %eax,%eax
  401563:	75 0b                	jne    401570 <__gthread_mutex_unlock(pthread_mutex_t*)+0x18>
  401565:	31 c0                	xor    %eax,%eax
  401567:	48 83 c4 08          	add    $0x8,%rsp
  40156b:	c3                   	retq   
  40156c:	0f 1f 40 00          	nopl   0x0(%rax)
  401570:	48 83 c4 08          	add    $0x8,%rsp
  401574:	e9 27 fb ff ff       	jmpq   4010a0 <pthread_mutex_unlock@plt>
  401579:	90                   	nop
  40157a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000401580 <std::chrono::duration<long, std::ratio<1l, 1000000000l> >::count() const [clone .isra.0]>:
  401580:	48 89 f8             	mov    %rdi,%rax
  401583:	c3                   	retq   
  401584:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000401588 <seccion_critica(char) [clone .constprop.0]>:
  401588:	53                   	push   %rbx
  401589:	bb 30 00 00 00       	mov    $0x30,%ebx
  40158e:	66 90                	xchg   %ax,%ax
  401590:	89 de                	mov    %ebx,%esi
  401592:	bf e0 60 40 00       	mov    $0x4060e0,%edi
  401597:	ff c3                	inc    %ebx
  401599:	e8 82 fb ff ff       	callq  401120 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char)@plt>
  40159e:	83 fb 3a             	cmp    $0x3a,%ebx
  4015a1:	75 ed                	jne    401590 <seccion_critica(char) [clone .constprop.0]+0x8>
  4015a3:	be 70 10 40 00       	mov    $0x401070,%esi
  4015a8:	bf e0 60 40 00       	mov    $0x4060e0,%edi
  4015ad:	5b                   	pop    %rbx
  4015ae:	e9 4d fb ff ff       	jmpq   401100 <std::ostream::operator<<(std::ostream& (*)(std::ostream&))@plt>
  4015b3:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000004015b8 <seccion_critica(char) [clone .constprop.1]>:
  4015b8:	53                   	push   %rbx
  4015b9:	bb 61 00 00 00       	mov    $0x61,%ebx
  4015be:	66 90                	xchg   %ax,%ax
  4015c0:	89 de                	mov    %ebx,%esi
  4015c2:	bf e0 60 40 00       	mov    $0x4060e0,%edi
  4015c7:	ff c3                	inc    %ebx
  4015c9:	e8 52 fb ff ff       	callq  401120 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char)@plt>
  4015ce:	83 fb 6b             	cmp    $0x6b,%ebx
  4015d1:	75 ed                	jne    4015c0 <seccion_critica(char) [clone .constprop.1]+0x8>
  4015d3:	be 70 10 40 00       	mov    $0x401070,%esi
  4015d8:	bf e0 60 40 00       	mov    $0x4060e0,%edi
  4015dd:	5b                   	pop    %rbx
  4015de:	e9 1d fb ff ff       	jmpq   401100 <std::ostream::operator<<(std::ostream& (*)(std::ostream&))@plt>
  4015e3:	90                   	nop
  4015e4:	0f 1f 40 00          	nopl   0x0(%rax)

00000000004015e8 <std::mutex::unlock() [clone .constprop.0]>:
  4015e8:	bf 20 62 40 00       	mov    $0x406220,%edi
  4015ed:	e9 66 ff ff ff       	jmpq   401558 <__gthread_mutex_unlock(pthread_mutex_t*)>
  4015f2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

00000000004015f8 <std::mutex::lock() [clone .constprop.0]>:
  4015f8:	48 83 ec 08          	sub    $0x8,%rsp
  4015fc:	bf 20 62 40 00       	mov    $0x406220,%edi
  401601:	e8 2a ff ff ff       	callq  401530 <__gthread_mutex_lock(pthread_mutex_t*)>
  401606:	85 c0                	test   %eax,%eax
  401608:	75 05                	jne    40160f <std::mutex::lock() [clone .constprop.0]+0x17>
  40160a:	48 83 c4 08          	add    $0x8,%rsp
  40160e:	c3                   	retq   
  40160f:	89 c7                	mov    %eax,%edi
  401611:	e8 7a fa ff ff       	callq  401090 <std::__throw_system_error(int)@plt>
  401616:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  40161d:	00 00 00 

0000000000401620 <std::atomic<bool>::operator bool() const [clone .constprop.0]>:
  401620:	0f b6 05 b5 4a 00 00 	movzbl 0x4ab5(%rip),%eax        # 4060dc <run>
  401627:	84 c0                	test   %al,%al
  401629:	0f 95 c0             	setne  %al
  40162c:	c3                   	retq   
  40162d:	0f 1f 00             	nopl   (%rax)

0000000000401630 <lector()>:
  401630:	48 83 ec 08          	sub    $0x8,%rsp
  401634:	eb 1b                	jmp    401651 <lector()+0x21>
  401636:	66 90                	xchg   %ax,%ax
  401638:	bf 00 62 40 00       	mov    $0x406200,%edi
  40163d:	e8 ce fa ff ff       	callq  401110 <sem_wait@plt>
  401642:	e8 41 ff ff ff       	callq  401588 <seccion_critica(char) [clone .constprop.0]>
  401647:	bf 00 62 40 00       	mov    $0x406200,%edi
  40164c:	e8 5f fa ff ff       	callq  4010b0 <sem_post@plt>
  401651:	e8 ca ff ff ff       	callq  401620 <std::atomic<bool>::operator bool() const [clone .constprop.0]>
  401656:	84 c0                	test   %al,%al
  401658:	75 de                	jne    401638 <lector()+0x8>
  40165a:	48 83 c4 08          	add    $0x8,%rsp
  40165e:	c3                   	retq   
  40165f:	90                   	nop

0000000000401660 <escritor()>:
  401660:	53                   	push   %rbx
  401661:	e8 ba ff ff ff       	callq  401620 <std::atomic<bool>::operator bool() const [clone .constprop.0]>
  401666:	84 c0                	test   %al,%al
  401668:	74 4d                	je     4016b7 <escritor()+0x57>
  40166a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  401670:	e8 83 ff ff ff       	callq  4015f8 <std::mutex::lock() [clone .constprop.0]>
  401675:	bb 08 00 00 00       	mov    $0x8,%ebx
  40167a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  401680:	bf 00 62 40 00       	mov    $0x406200,%edi
  401685:	e8 86 fa ff ff       	callq  401110 <sem_wait@plt>
  40168a:	ff cb                	dec    %ebx
  40168c:	75 f2                	jne    401680 <escritor()+0x20>
  40168e:	e8 55 ff ff ff       	callq  4015e8 <std::mutex::unlock() [clone .constprop.0]>
  401693:	e8 20 ff ff ff       	callq  4015b8 <seccion_critica(char) [clone .constprop.1]>
  401698:	bb 08 00 00 00       	mov    $0x8,%ebx
  40169d:	0f 1f 00             	nopl   (%rax)
  4016a0:	bf 00 62 40 00       	mov    $0x406200,%edi
  4016a5:	e8 06 fa ff ff       	callq  4010b0 <sem_post@plt>
  4016aa:	ff cb                	dec    %ebx
  4016ac:	75 f2                	jne    4016a0 <escritor()+0x40>
  4016ae:	e8 6d ff ff ff       	callq  401620 <std::atomic<bool>::operator bool() const [clone .constprop.0]>
  4016b3:	84 c0                	test   %al,%al
  4016b5:	75 b9                	jne    401670 <escritor()+0x10>
  4016b7:	5b                   	pop    %rbx
  4016b8:	c3                   	retq   
  4016b9:	90                   	nop
  4016ba:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

00000000004016c0 <std::thread::joinable() const [clone .isra.0]>:
  4016c0:	53                   	push   %rbx
  4016c1:	48 89 fb             	mov    %rdi,%rbx
  4016c4:	48 83 ec 10          	sub    $0x10,%rsp
  4016c8:	48 8d 7c 24 08       	lea    0x8(%rsp),%rdi
  4016cd:	e8 ae 01 00 00       	callq  401880 <std::thread::id::id()>
  4016d2:	48 8b 3b             	mov    (%rbx),%rdi
  4016d5:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
  4016da:	e8 b1 01 00 00       	callq  401890 <std::operator==(std::thread::id, std::thread::id)>
  4016df:	48 83 c4 10          	add    $0x10,%rsp
  4016e3:	5b                   	pop    %rbx
  4016e4:	83 f0 01             	xor    $0x1,%eax
  4016e7:	c3                   	retq   
  4016e8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  4016ef:	00 

00000000004016f0 <seccion_critica(char)>:
  4016f0:	41 54                	push   %r12
  4016f2:	55                   	push   %rbp
  4016f3:	89 fd                	mov    %edi,%ebp
  4016f5:	83 c7 0a             	add    $0xa,%edi
  4016f8:	53                   	push   %rbx
  4016f9:	44 0f b6 e7          	movzbl %dil,%r12d
  4016fd:	0f 1f 00             	nopl   (%rax)
  401700:	8d 5d 01             	lea    0x1(%rbp),%ebx
  401703:	40 0f be f5          	movsbl %bpl,%esi
  401707:	bf e0 60 40 00       	mov    $0x4060e0,%edi
  40170c:	89 dd                	mov    %ebx,%ebp
  40170e:	0f b6 db             	movzbl %bl,%ebx
  401711:	e8 0a fa ff ff       	callq  401120 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char)@plt>
  401716:	66 41 39 dc          	cmp    %bx,%r12w
  40171a:	75 e4                	jne    401700 <seccion_critica(char)+0x10>
  40171c:	5b                   	pop    %rbx
  40171d:	be 70 10 40 00       	mov    $0x401070,%esi
  401722:	bf e0 60 40 00       	mov    $0x4060e0,%edi
  401727:	5d                   	pop    %rbp
  401728:	41 5c                	pop    %r12
  40172a:	e9 d1 f9 ff ff       	jmpq   401100 <std::ostream::operator<<(std::ostream& (*)(std::ostream&))@plt>
  40172f:	90                   	nop

0000000000401730 <std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>::operator()() [clone .isra.0]>:
  401730:	53                   	push   %rbx
  401731:	48 89 fb             	mov    %rdi,%rbx
  401734:	48 8b 3f             	mov    (%rdi),%rdi
  401737:	e8 34 05 00 00       	callq  401c70 <unsigned long std::__detail::__mod<unsigned long, 2147483647ul, 16807ul, 0ul>(unsigned long)>
  40173c:	48 89 03             	mov    %rax,(%rbx)
  40173f:	5b                   	pop    %rbx
  401740:	c3                   	retq   
  401741:	90                   	nop
  401742:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000401748 <std::thread::thread<void (&)(), , void>(void (&)()) [clone .constprop.0]>:
  401748:	55                   	push   %rbp
  401749:	48 89 fd             	mov    %rdi,%rbp
  40174c:	48 83 ec 10          	sub    $0x10,%rsp
  401750:	e8 2b 01 00 00       	callq  401880 <std::thread::id::id()>
  401755:	bf 60 16 40 00       	mov    $0x401660,%edi
  40175a:	e8 31 03 00 00       	callq  401a90 <void (&std::forward<void (&)()>(std::remove_reference<void (&)()>::type&))()>
  40175f:	48 89 e7             	mov    %rsp,%rdi
  401762:	48 89 c6             	mov    %rax,%rsi
  401765:	e8 66 03 00 00       	callq  401ad0 <std::thread::_Invoker<std::tuple<std::decay<void (&)()>::type> > std::thread::__make_invoker<void (&)()>(void (&)())>
  40176a:	48 89 e6             	mov    %rsp,%rsi
  40176d:	48 8d 7c 24 08       	lea    0x8(%rsp),%rdi
  401772:	e8 99 07 00 00       	callq  401f10 <std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> > std::thread::_S_make_state<std::thread::_Invoker<std::tuple<void (*)()> > >(std::thread::_Invoker<std::tuple<void (*)()> >&&)>
  401777:	ba 80 10 40 00       	mov    $0x401080,%edx
  40177c:	48 8d 74 24 08       	lea    0x8(%rsp),%rsi
  401781:	48 89 ef             	mov    %rbp,%rdi
  401784:	e8 47 f9 ff ff       	callq  4010d0 <std::thread::_M_start_thread(std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> >, void (*)())@plt>
  401789:	48 8d 7c 24 08       	lea    0x8(%rsp),%rdi
  40178e:	e8 bd 07 00 00       	callq  401f50 <std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> >::~unique_ptr()>
  401793:	48 83 c4 10          	add    $0x10,%rsp
  401797:	5d                   	pop    %rbp
  401798:	c3                   	retq   
  401799:	48 89 c5             	mov    %rax,%rbp
  40179c:	e9 0f fa ff ff       	jmpq   4011b0 <std::thread::thread<void (&)(), , void>(void (&)()) [clone .constprop.0] [clone .cold]>
  4017a1:	90                   	nop
  4017a2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

00000000004017a8 <std::thread::thread<void (&)(), , void>(void (&)()) [clone .constprop.1]>:
  4017a8:	55                   	push   %rbp
  4017a9:	48 89 fd             	mov    %rdi,%rbp
  4017ac:	48 83 ec 10          	sub    $0x10,%rsp
  4017b0:	e8 cb 00 00 00       	callq  401880 <std::thread::id::id()>
  4017b5:	bf 30 16 40 00       	mov    $0x401630,%edi
  4017ba:	e8 d1 02 00 00       	callq  401a90 <void (&std::forward<void (&)()>(std::remove_reference<void (&)()>::type&))()>
  4017bf:	48 89 e7             	mov    %rsp,%rdi
  4017c2:	48 89 c6             	mov    %rax,%rsi
  4017c5:	e8 06 03 00 00       	callq  401ad0 <std::thread::_Invoker<std::tuple<std::decay<void (&)()>::type> > std::thread::__make_invoker<void (&)()>(void (&)())>
  4017ca:	48 89 e6             	mov    %rsp,%rsi
  4017cd:	48 8d 7c 24 08       	lea    0x8(%rsp),%rdi
  4017d2:	e8 39 07 00 00       	callq  401f10 <std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> > std::thread::_S_make_state<std::thread::_Invoker<std::tuple<void (*)()> > >(std::thread::_Invoker<std::tuple<void (*)()> >&&)>
  4017d7:	ba 80 10 40 00       	mov    $0x401080,%edx
  4017dc:	48 8d 74 24 08       	lea    0x8(%rsp),%rsi
  4017e1:	48 89 ef             	mov    %rbp,%rdi
  4017e4:	e8 e7 f8 ff ff       	callq  4010d0 <std::thread::_M_start_thread(std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> >, void (*)())@plt>
  4017e9:	48 8d 7c 24 08       	lea    0x8(%rsp),%rdi
  4017ee:	e8 5d 07 00 00       	callq  401f50 <std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> >::~unique_ptr()>
  4017f3:	48 83 c4 10          	add    $0x10,%rsp
  4017f7:	5d                   	pop    %rbp
  4017f8:	c3                   	retq   
  4017f9:	48 89 c5             	mov    %rax,%rbp
  4017fc:	e9 c5 f9 ff ff       	jmpq   4011c6 <std::thread::thread<void (&)(), , void>(void (&)()) [clone .constprop.1] [clone .cold]>
  401801:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  401808:	00 00 00 
  40180b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000401810 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)()> > >::~_State_impl()>:
  401810:	48 c7 07 88 30 40 00 	movq   $0x403088,(%rdi)
  401817:	e9 44 f8 ff ff       	jmpq   401060 <std::thread::_State::~_State()@plt>
  40181c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000401820 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)()> > >::~_State_impl()>:
  401820:	55                   	push   %rbp
  401821:	48 89 fd             	mov    %rdi,%rbp
  401824:	e8 e7 ff ff ff       	callq  401810 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)()> > >::~_State_impl()>
  401829:	48 89 ef             	mov    %rbp,%rdi
  40182c:	be 10 00 00 00       	mov    $0x10,%esi
  401831:	5d                   	pop    %rbp
  401832:	e9 b9 f8 ff ff       	jmpq   4010f0 <operator delete(void*, unsigned long)@plt>
  401837:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  40183e:	00 00 

0000000000401840 <std::chrono::duration<long, std::ratio<1l, 1000000000l> >::duration<long, void>(long const&) [clone .isra.0]>:
  401840:	48 89 37             	mov    %rsi,(%rdi)
  401843:	c3                   	retq   
  401844:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  40184b:	00 00 00 
  40184e:	66 90                	xchg   %ax,%ax

0000000000401850 <std::default_delete<std::thread::_State>::operator()(std::thread::_State*) const [clone .isra.0]>:
  401850:	48 85 ff             	test   %rdi,%rdi
  401853:	74 0b                	je     401860 <std::default_delete<std::thread::_State>::operator()(std::thread::_State*) const [clone .isra.0]+0x10>
  401855:	48 8b 07             	mov    (%rdi),%rax
  401858:	ff 60 08             	jmpq   *0x8(%rax)
  40185b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  401860:	c3                   	retq   
  401861:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  401868:	00 00 00 
  40186b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000401870 <std::chrono::duration_values<long>::zero()>:
  401870:	31 c0                	xor    %eax,%eax
  401872:	c3                   	retq   
  401873:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  40187a:	00 00 00 
  40187d:	0f 1f 00             	nopl   (%rax)

0000000000401880 <std::thread::id::id()>:
  401880:	48 c7 07 00 00 00 00 	movq   $0x0,(%rdi)
  401887:	c3                   	retq   
  401888:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  40188f:	00 

0000000000401890 <std::operator==(std::thread::id, std::thread::id)>:
  401890:	48 39 f7             	cmp    %rsi,%rdi
  401893:	0f 94 c0             	sete   %al
  401896:	c3                   	retq   
  401897:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  40189e:	00 00 

00000000004018a0 <std::thread::~thread()>:
  4018a0:	48 83 ec 08          	sub    $0x8,%rsp
  4018a4:	e8 17 fe ff ff       	callq  4016c0 <std::thread::joinable() const [clone .isra.0]>
  4018a9:	84 c0                	test   %al,%al
  4018ab:	75 05                	jne    4018b2 <std::thread::~thread()+0x12>
  4018ad:	48 83 c4 08          	add    $0x8,%rsp
  4018b1:	c3                   	retq   
  4018b2:	e8 89 f7 ff ff       	callq  401040 <std::terminate()@plt>
  4018b7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  4018be:	00 00 

00000000004018c0 <std::thread::thread()>:
  4018c0:	e9 bb ff ff ff       	jmpq   401880 <std::thread::id::id()>
  4018c5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4018cc:	00 00 00 
  4018cf:	90                   	nop

00000000004018d0 <std::__atomic_base<bool>::operator=(bool)>:
  4018d0:	40 88 37             	mov    %sil,(%rdi)
  4018d3:	89 f0                	mov    %esi,%eax
  4018d5:	0f ae f0             	mfence 
  4018d8:	c3                   	retq   
  4018d9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

00000000004018e0 <std::atomic<bool>::operator=(bool)>:
  4018e0:	40 0f b6 f6          	movzbl %sil,%esi
  4018e4:	e9 e7 ff ff ff       	jmpq   4018d0 <std::__atomic_base<bool>::operator=(bool)>
  4018e9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

00000000004018f0 <std::chrono::duration<long, std::ratio<1l, 1l> >::duration<long, void>(long const&)>:
  4018f0:	48 8b 06             	mov    (%rsi),%rax
  4018f3:	48 89 07             	mov    %rax,(%rdi)
  4018f6:	c3                   	retq   
  4018f7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  4018fe:	00 00 

0000000000401900 <std::chrono::duration<long, std::ratio<1l, 1l> >::zero()>:
  401900:	48 83 ec 18          	sub    $0x18,%rsp
  401904:	e8 67 ff ff ff       	callq  401870 <std::chrono::duration_values<long>::zero()>
  401909:	48 89 e6             	mov    %rsp,%rsi
  40190c:	48 8d 7c 24 08       	lea    0x8(%rsp),%rdi
  401911:	48 89 04 24          	mov    %rax,(%rsp)
  401915:	e8 d6 ff ff ff       	callq  4018f0 <std::chrono::duration<long, std::ratio<1l, 1l> >::duration<long, void>(long const&)>
  40191a:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  40191f:	48 83 c4 18          	add    $0x18,%rsp
  401923:	c3                   	retq   
  401924:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  40192b:	00 00 00 
  40192e:	66 90                	xchg   %ax,%ax

0000000000401930 <bool std::chrono::operator< <long, std::ratio<1l, 1l>, long, std::ratio<1l, 1l> >(std::chrono::duration<long, std::ratio<1l, 1l> > const&, std::chrono::duration<long, std::ratio<1l, 1l> > const&)>:
  401930:	48 8b 3f             	mov    (%rdi),%rdi
  401933:	e8 48 fc ff ff       	callq  401580 <std::chrono::duration<long, std::ratio<1l, 1000000000l> >::count() const [clone .isra.0]>
  401938:	48 8b 3e             	mov    (%rsi),%rdi
  40193b:	48 89 c2             	mov    %rax,%rdx
  40193e:	e8 3d fc ff ff       	callq  401580 <std::chrono::duration<long, std::ratio<1l, 1000000000l> >::count() const [clone .isra.0]>
  401943:	48 39 c2             	cmp    %rax,%rdx
  401946:	0f 9c c0             	setl   %al
  401949:	c3                   	retq   
  40194a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000401950 <bool std::chrono::operator<=<long, std::ratio<1l, 1l>, long, std::ratio<1l, 1l> >(std::chrono::duration<long, std::ratio<1l, 1l> > const&, std::chrono::duration<long, std::ratio<1l, 1l> > const&)>:
  401950:	49 89 f8             	mov    %rdi,%r8
  401953:	48 83 ec 08          	sub    $0x8,%rsp
  401957:	48 89 f7             	mov    %rsi,%rdi
  40195a:	4c 89 c6             	mov    %r8,%rsi
  40195d:	e8 ce ff ff ff       	callq  401930 <bool std::chrono::operator< <long, std::ratio<1l, 1l>, long, std::ratio<1l, 1l> >(std::chrono::duration<long, std::ratio<1l, 1l> > const&, std::chrono::duration<long, std::ratio<1l, 1l> > const&)>
  401962:	48 83 c4 08          	add    $0x8,%rsp
  401966:	83 f0 01             	xor    $0x1,%eax
  401969:	c3                   	retq   
  40196a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000401970 <std::chrono::duration<long, std::ratio<1l, 1l> > std::chrono::__duration_cast_impl<std::chrono::duration<long, std::ratio<1l, 1l> >, std::ratio<1l, 1l>, long, true, true>::__cast<long, std::ratio<1l, 1l> >(std::chrono::duration<long, std::ratio<1l, 1l> > const&)>:
  401970:	48 83 ec 18          	sub    $0x18,%rsp
  401974:	48 8b 3f             	mov    (%rdi),%rdi
  401977:	e8 04 fc ff ff       	callq  401580 <std::chrono::duration<long, std::ratio<1l, 1000000000l> >::count() const [clone .isra.0]>
  40197c:	48 89 e6             	mov    %rsp,%rsi
  40197f:	48 8d 7c 24 08       	lea    0x8(%rsp),%rdi
  401984:	48 89 04 24          	mov    %rax,(%rsp)
  401988:	e8 63 ff ff ff       	callq  4018f0 <std::chrono::duration<long, std::ratio<1l, 1l> >::duration<long, void>(long const&)>
  40198d:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  401992:	48 83 c4 18          	add    $0x18,%rsp
  401996:	c3                   	retq   
  401997:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  40199e:	00 00 

00000000004019a0 <std::enable_if<std::chrono::__is_duration<std::chrono::duration<long, std::ratio<1l, 1l> > >::value, std::chrono::duration<long, std::ratio<1l, 1l> > >::type std::chrono::duration_cast<std::chrono::duration<long, std::ratio<1l, 1l> >, long, std::ratio<1l, 1l> >(std::chrono::duration<long, std::ratio<1l, 1l> > const&)>:
  4019a0:	e9 cb ff ff ff       	jmpq   401970 <std::chrono::duration<long, std::ratio<1l, 1l> > std::chrono::__duration_cast_impl<std::chrono::duration<long, std::ratio<1l, 1l> >, std::ratio<1l, 1l>, long, true, true>::__cast<long, std::ratio<1l, 1l> >(std::chrono::duration<long, std::ratio<1l, 1l> > const&)>
  4019a5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4019ac:	00 00 00 
  4019af:	90                   	nop

00000000004019b0 <std::common_type<std::chrono::duration<long, std::ratio<1l, 1l> >, std::chrono::duration<long, std::ratio<1l, 1l> > >::type std::chrono::operator-<long, std::ratio<1l, 1l>, long, std::ratio<1l, 1l> >(std::chrono::duration<long, std::ratio<1l, 1l> > const&, std::chrono::duration<long, std::ratio<1l, 1l> > const&)>:
  4019b0:	48 83 ec 18          	sub    $0x18,%rsp
  4019b4:	48 8b 3f             	mov    (%rdi),%rdi
  4019b7:	e8 c4 fb ff ff       	callq  401580 <std::chrono::duration<long, std::ratio<1l, 1000000000l> >::count() const [clone .isra.0]>
  4019bc:	48 8b 3e             	mov    (%rsi),%rdi
  4019bf:	48 89 c2             	mov    %rax,%rdx
  4019c2:	e8 b9 fb ff ff       	callq  401580 <std::chrono::duration<long, std::ratio<1l, 1000000000l> >::count() const [clone .isra.0]>
  4019c7:	48 89 e6             	mov    %rsp,%rsi
  4019ca:	48 8d 7c 24 08       	lea    0x8(%rsp),%rdi
  4019cf:	48 29 c2             	sub    %rax,%rdx
  4019d2:	48 89 14 24          	mov    %rdx,(%rsp)
  4019d6:	e8 15 ff ff ff       	callq  4018f0 <std::chrono::duration<long, std::ratio<1l, 1l> >::duration<long, void>(long const&)>
  4019db:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  4019e0:	48 83 c4 18          	add    $0x18,%rsp
  4019e4:	c3                   	retq   
  4019e5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4019ec:	00 00 00 
  4019ef:	90                   	nop

00000000004019f0 <std::remove_reference<std::thread::id&>::type&& std::move<std::thread::id&>(std::thread::id&)>:
  4019f0:	48 89 f8             	mov    %rdi,%rax
  4019f3:	c3                   	retq   
  4019f4:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4019fb:	00 00 00 
  4019fe:	66 90                	xchg   %ax,%ax

0000000000401a00 <std::enable_if<std::__and_<std::__not_<std::__is_tuple_like<std::thread::id> >, std::is_move_constructible<std::thread::id>, std::is_move_assignable<std::thread::id> >::value, void>::type std::swap<std::thread::id>(std::thread::id&, std::thread::id&)>:
  401a00:	55                   	push   %rbp
  401a01:	53                   	push   %rbx
  401a02:	48 89 fd             	mov    %rdi,%rbp
  401a05:	48 89 f3             	mov    %rsi,%rbx
  401a08:	48 83 ec 18          	sub    $0x18,%rsp
  401a0c:	e8 df ff ff ff       	callq  4019f0 <std::remove_reference<std::thread::id&>::type&& std::move<std::thread::id&>(std::thread::id&)>
  401a11:	48 89 df             	mov    %rbx,%rdi
  401a14:	48 8b 00             	mov    (%rax),%rax
  401a17:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  401a1c:	e8 cf ff ff ff       	callq  4019f0 <std::remove_reference<std::thread::id&>::type&& std::move<std::thread::id&>(std::thread::id&)>
  401a21:	48 8d 7c 24 08       	lea    0x8(%rsp),%rdi
  401a26:	48 8b 00             	mov    (%rax),%rax
  401a29:	48 89 45 00          	mov    %rax,0x0(%rbp)
  401a2d:	e8 be ff ff ff       	callq  4019f0 <std::remove_reference<std::thread::id&>::type&& std::move<std::thread::id&>(std::thread::id&)>
  401a32:	48 8b 00             	mov    (%rax),%rax
  401a35:	48 89 03             	mov    %rax,(%rbx)
  401a38:	48 83 c4 18          	add    $0x18,%rsp
  401a3c:	5b                   	pop    %rbx
  401a3d:	5d                   	pop    %rbp
  401a3e:	c3                   	retq   
  401a3f:	90                   	nop

0000000000401a40 <std::thread::swap(std::thread&)>:
  401a40:	e9 bb ff ff ff       	jmpq   401a00 <std::enable_if<std::__and_<std::__not_<std::__is_tuple_like<std::thread::id> >, std::is_move_constructible<std::thread::id>, std::is_move_assignable<std::thread::id> >::value, void>::type std::swap<std::thread::id>(std::thread::id&, std::thread::id&)>
  401a45:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  401a4c:	00 00 00 
  401a4f:	90                   	nop

0000000000401a50 <std::thread::operator=(std::thread&&)>:
  401a50:	41 54                	push   %r12
  401a52:	55                   	push   %rbp
  401a53:	49 89 fc             	mov    %rdi,%r12
  401a56:	48 89 f5             	mov    %rsi,%rbp
  401a59:	48 83 ec 08          	sub    $0x8,%rsp
  401a5d:	e8 5e fc ff ff       	callq  4016c0 <std::thread::joinable() const [clone .isra.0]>
  401a62:	84 c0                	test   %al,%al
  401a64:	75 16                	jne    401a7c <std::thread::operator=(std::thread&&)+0x2c>
  401a66:	48 89 ee             	mov    %rbp,%rsi
  401a69:	4c 89 e7             	mov    %r12,%rdi
  401a6c:	e8 cf ff ff ff       	callq  401a40 <std::thread::swap(std::thread&)>
  401a71:	48 83 c4 08          	add    $0x8,%rsp
  401a75:	4c 89 e0             	mov    %r12,%rax
  401a78:	5d                   	pop    %rbp
  401a79:	41 5c                	pop    %r12
  401a7b:	c3                   	retq   
  401a7c:	e8 bf f5 ff ff       	callq  401040 <std::terminate()@plt>
  401a81:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  401a88:	00 00 00 
  401a8b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000401a90 <void (&std::forward<void (&)()>(std::remove_reference<void (&)()>::type&))()>:
  401a90:	48 89 f8             	mov    %rdi,%rax
  401a93:	c3                   	retq   
  401a94:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  401a9b:	00 00 00 
  401a9e:	66 90                	xchg   %ax,%ax

0000000000401aa0 <std::_Head_base<0ul, void (*)(), false>::_Head_base(void (* const&)())>:
  401aa0:	48 8b 06             	mov    (%rsi),%rax
  401aa3:	48 89 07             	mov    %rax,(%rdi)
  401aa6:	c3                   	retq   
  401aa7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  401aae:	00 00 

0000000000401ab0 <std::_Tuple_impl<0ul, void (*)()>::_Tuple_impl(void (* const&)())>:
  401ab0:	e9 eb ff ff ff       	jmpq   401aa0 <std::_Head_base<0ul, void (*)(), false>::_Head_base(void (* const&)())>
  401ab5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  401abc:	00 00 00 
  401abf:	90                   	nop

0000000000401ac0 <std::tuple<void (*)()>::tuple<void, true>(void (* const&)())>:
  401ac0:	e9 eb ff ff ff       	jmpq   401ab0 <std::_Tuple_impl<0ul, void (*)()>::_Tuple_impl(void (* const&)())>
  401ac5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  401acc:	00 00 00 
  401acf:	90                   	nop

0000000000401ad0 <std::thread::_Invoker<std::tuple<std::decay<void (&)()>::type> > std::thread::__make_invoker<void (&)()>(void (&)())>:
  401ad0:	41 54                	push   %r12
  401ad2:	49 89 fc             	mov    %rdi,%r12
  401ad5:	48 89 f7             	mov    %rsi,%rdi
  401ad8:	48 83 ec 10          	sub    $0x10,%rsp
  401adc:	e8 af ff ff ff       	callq  401a90 <void (&std::forward<void (&)()>(std::remove_reference<void (&)()>::type&))()>
  401ae1:	48 8d 74 24 08       	lea    0x8(%rsp),%rsi
  401ae6:	4c 89 e7             	mov    %r12,%rdi
  401ae9:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  401aee:	e8 cd ff ff ff       	callq  401ac0 <std::tuple<void (*)()>::tuple<void, true>(void (* const&)())>
  401af3:	48 83 c4 10          	add    $0x10,%rsp
  401af7:	4c 89 e0             	mov    %r12,%rax
  401afa:	41 5c                	pop    %r12
  401afc:	c3                   	retq   
  401afd:	0f 1f 00             	nopl   (%rax)

0000000000401b00 <std::chrono::duration<long, std::ratio<1l, 1l> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long, std::ratio<1l, 1l> >, (char)49>()>:
  401b00:	48 83 ec 18          	sub    $0x18,%rsp
  401b04:	48 8d 7c 24 08       	lea    0x8(%rsp),%rdi
  401b09:	48 c7 04 24 01 00 00 	movq   $0x1,(%rsp)
  401b10:	00 
  401b11:	48 89 e6             	mov    %rsp,%rsi
  401b14:	e8 d7 fd ff ff       	callq  4018f0 <std::chrono::duration<long, std::ratio<1l, 1l> >::duration<long, void>(long const&)>
  401b19:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  401b1e:	48 83 c4 18          	add    $0x18,%rsp
  401b22:	c3                   	retq   
  401b23:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  401b2a:	00 00 00 
  401b2d:	0f 1f 00             	nopl   (%rax)

0000000000401b30 <std::chrono::duration<long, std::ratio<1l, 1l> > std::literals::chrono_literals::operator"" s<(char)49>()>:
  401b30:	e9 cb ff ff ff       	jmpq   401b00 <std::chrono::duration<long, std::ratio<1l, 1l> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long, std::ratio<1l, 1l> >, (char)49>()>
  401b35:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  401b3c:	00 00 00 
  401b3f:	90                   	nop

0000000000401b40 <std::chrono::duration<long, std::ratio<1l, 1000000000l> > std::chrono::__duration_cast_impl<std::chrono::duration<long, std::ratio<1l, 1000000000l> >, std::ratio<1000000000l, 1l>, long, false, true>::__cast<long, std::ratio<1l, 1l> >(std::chrono::duration<long, std::ratio<1l, 1l> > const&)>:
  401b40:	48 83 ec 10          	sub    $0x10,%rsp
  401b44:	48 8b 3f             	mov    (%rdi),%rdi
  401b47:	e8 34 fa ff ff       	callq  401580 <std::chrono::duration<long, std::ratio<1l, 1000000000l> >::count() const [clone .isra.0]>
  401b4c:	48 8d 7c 24 08       	lea    0x8(%rsp),%rdi
  401b51:	48 69 f0 00 ca 9a 3b 	imul   $0x3b9aca00,%rax,%rsi
  401b58:	e8 e3 fc ff ff       	callq  401840 <std::chrono::duration<long, std::ratio<1l, 1000000000l> >::duration<long, void>(long const&) [clone .isra.0]>
  401b5d:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  401b62:	48 83 c4 10          	add    $0x10,%rsp
  401b66:	c3                   	retq   
  401b67:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  401b6e:	00 00 

0000000000401b70 <std::enable_if<std::chrono::__is_duration<std::chrono::duration<long, std::ratio<1l, 1000000000l> > >::value, std::chrono::duration<long, std::ratio<1l, 1000000000l> > >::type std::chrono::duration_cast<std::chrono::duration<long, std::ratio<1l, 1000000000l> >, long, std::ratio<1l, 1l> >(std::chrono::duration<long, std::ratio<1l, 1l> > const&)>:
  401b70:	e9 cb ff ff ff       	jmpq   401b40 <std::chrono::duration<long, std::ratio<1l, 1000000000l> > std::chrono::__duration_cast_impl<std::chrono::duration<long, std::ratio<1l, 1000000000l> >, std::ratio<1000000000l, 1l>, long, false, true>::__cast<long, std::ratio<1l, 1l> >(std::chrono::duration<long, std::ratio<1l, 1l> > const&)>
  401b75:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  401b7c:	00 00 00 
  401b7f:	90                   	nop

0000000000401b80 <void std::this_thread::sleep_for<long, std::ratio<1l, 1l> >(std::chrono::duration<long, std::ratio<1l, 1l> > const&)>:
  401b80:	55                   	push   %rbp
  401b81:	48 89 fd             	mov    %rdi,%rbp
  401b84:	48 83 ec 20          	sub    $0x20,%rsp
  401b88:	e8 73 fd ff ff       	callq  401900 <std::chrono::duration<long, std::ratio<1l, 1l> >::zero()>
  401b8d:	48 8d 74 24 10       	lea    0x10(%rsp),%rsi
  401b92:	48 89 ef             	mov    %rbp,%rdi
  401b95:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  401b9a:	e8 b1 fd ff ff       	callq  401950 <bool std::chrono::operator<=<long, std::ratio<1l, 1l>, long, std::ratio<1l, 1l> >(std::chrono::duration<long, std::ratio<1l, 1l> > const&, std::chrono::duration<long, std::ratio<1l, 1l> > const&)>
  401b9f:	84 c0                	test   %al,%al
  401ba1:	74 0d                	je     401bb0 <void std::this_thread::sleep_for<long, std::ratio<1l, 1l> >(std::chrono::duration<long, std::ratio<1l, 1l> > const&)+0x30>
  401ba3:	48 83 c4 20          	add    $0x20,%rsp
  401ba7:	5d                   	pop    %rbp
  401ba8:	c3                   	retq   
  401ba9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  401bb0:	48 89 ef             	mov    %rbp,%rdi
  401bb3:	e8 e8 fd ff ff       	callq  4019a0 <std::enable_if<std::chrono::__is_duration<std::chrono::duration<long, std::ratio<1l, 1l> > >::value, std::chrono::duration<long, std::ratio<1l, 1l> > >::type std::chrono::duration_cast<std::chrono::duration<long, std::ratio<1l, 1l> >, long, std::ratio<1l, 1l> >(std::chrono::duration<long, std::ratio<1l, 1l> > const&)>
  401bb8:	48 8d 74 24 08       	lea    0x8(%rsp),%rsi
  401bbd:	48 89 ef             	mov    %rbp,%rdi
  401bc0:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  401bc5:	e8 e6 fd ff ff       	callq  4019b0 <std::common_type<std::chrono::duration<long, std::ratio<1l, 1l> >, std::chrono::duration<long, std::ratio<1l, 1l> > >::type std::chrono::operator-<long, std::ratio<1l, 1l>, long, std::ratio<1l, 1l> >(std::chrono::duration<long, std::ratio<1l, 1l> > const&, std::chrono::duration<long, std::ratio<1l, 1l> > const&)>
  401bca:	48 8d 7c 24 10       	lea    0x10(%rsp),%rdi
  401bcf:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  401bd4:	e8 97 ff ff ff       	callq  401b70 <std::enable_if<std::chrono::__is_duration<std::chrono::duration<long, std::ratio<1l, 1000000000l> > >::value, std::chrono::duration<long, std::ratio<1l, 1000000000l> > >::type std::chrono::duration_cast<std::chrono::duration<long, std::ratio<1l, 1000000000l> >, long, std::ratio<1l, 1l> >(std::chrono::duration<long, std::ratio<1l, 1l> > const&)>
  401bd9:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  401bde:	49 89 c0             	mov    %rax,%r8
  401be1:	e8 9a f9 ff ff       	callq  401580 <std::chrono::duration<long, std::ratio<1l, 1000000000l> >::count() const [clone .isra.0]>
  401be6:	4c 89 c7             	mov    %r8,%rdi
  401be9:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  401bee:	e8 8d f9 ff ff       	callq  401580 <std::chrono::duration<long, std::ratio<1l, 1000000000l> >::count() const [clone .isra.0]>
  401bf3:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  401bf8:	eb 10                	jmp    401c0a <void std::this_thread::sleep_for<long, std::ratio<1l, 1l> >(std::chrono::duration<long, std::ratio<1l, 1l> > const&)+0x8a>
  401bfa:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  401c00:	e8 2b f4 ff ff       	callq  401030 <__errno_location@plt>
  401c05:	83 38 04             	cmpl   $0x4,(%rax)
  401c08:	75 99                	jne    401ba3 <void std::this_thread::sleep_for<long, std::ratio<1l, 1l> >(std::chrono::duration<long, std::ratio<1l, 1l> > const&)+0x23>
  401c0a:	48 8d 74 24 10       	lea    0x10(%rsp),%rsi
  401c0f:	48 89 f7             	mov    %rsi,%rdi
  401c12:	e8 39 f4 ff ff       	callq  401050 <nanosleep@plt>
  401c17:	83 f8 ff             	cmp    $0xffffffff,%eax
  401c1a:	74 e4                	je     401c00 <void std::this_thread::sleep_for<long, std::ratio<1l, 1l> >(std::chrono::duration<long, std::ratio<1l, 1l> > const&)+0x80>
  401c1c:	48 83 c4 20          	add    $0x20,%rsp
  401c20:	5d                   	pop    %rbp
  401c21:	c3                   	retq   
  401c22:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  401c29:	00 00 00 
  401c2c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000401c30 <std::__detail::_Mod<unsigned long, 2147483647ul, 16807ul, 0ul, true, true>::__calc(unsigned long)>:
  401c30:	48 69 ff a7 41 00 00 	imul   $0x41a7,%rdi,%rdi
  401c37:	48 ba 05 00 00 00 02 	movabs $0x200000005,%rdx
  401c3e:	00 00 00 
  401c41:	48 89 f8             	mov    %rdi,%rax
  401c44:	48 f7 e2             	mul    %rdx
  401c47:	48 89 f8             	mov    %rdi,%rax
  401c4a:	48 29 d0             	sub    %rdx,%rax
  401c4d:	48 d1 e8             	shr    %rax
  401c50:	48 01 d0             	add    %rdx,%rax
  401c53:	48 c1 e8 1e          	shr    $0x1e,%rax
  401c57:	48 89 c2             	mov    %rax,%rdx
  401c5a:	48 c1 e2 1f          	shl    $0x1f,%rdx
  401c5e:	48 29 c2             	sub    %rax,%rdx
  401c61:	48 89 f8             	mov    %rdi,%rax
  401c64:	48 29 d0             	sub    %rdx,%rax
  401c67:	c3                   	retq   
  401c68:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  401c6f:	00 

0000000000401c70 <unsigned long std::__detail::__mod<unsigned long, 2147483647ul, 16807ul, 0ul>(unsigned long)>:
  401c70:	e9 bb ff ff ff       	jmpq   401c30 <std::__detail::_Mod<unsigned long, 2147483647ul, 16807ul, 0ul, true, true>::__calc(unsigned long)>
  401c75:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  401c7c:	00 00 00 
  401c7f:	90                   	nop

0000000000401c80 <std::thread::_Invoker<std::tuple<void (*)()> >&& std::forward<std::thread::_Invoker<std::tuple<void (*)()> > >(std::remove_reference<std::thread::_Invoker<std::tuple<void (*)()> > >::type&)>:
  401c80:	48 89 f8             	mov    %rdi,%rax
  401c83:	c3                   	retq   
  401c84:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  401c8b:	00 00 00 
  401c8e:	66 90                	xchg   %ax,%ax

0000000000401c90 <std::thread::_State::_State()>:
  401c90:	48 c7 07 50 5d 40 00 	movq   $0x405d50,(%rdi)
  401c97:	c3                   	retq   
  401c98:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  401c9f:	00 

0000000000401ca0 <std::remove_reference<std::thread::_State*&>::type&& std::move<std::thread::_State*&>(std::thread::_State*&)>:
  401ca0:	48 89 f8             	mov    %rdi,%rax
  401ca3:	c3                   	retq   
  401ca4:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  401cab:	00 00 00 
  401cae:	66 90                	xchg   %ax,%ax

0000000000401cb0 <std::__detail::_Mod<unsigned long, 2147483647ul, 1ul, 0ul, true, true>::__calc(unsigned long)>:
  401cb0:	48 89 f8             	mov    %rdi,%rax
  401cb3:	48 ba 05 00 00 00 02 	movabs $0x200000005,%rdx
  401cba:	00 00 00 
  401cbd:	48 f7 e2             	mul    %rdx
  401cc0:	48 89 f8             	mov    %rdi,%rax
  401cc3:	48 29 d0             	sub    %rdx,%rax
  401cc6:	48 d1 e8             	shr    %rax
  401cc9:	48 01 d0             	add    %rdx,%rax
  401ccc:	48 c1 e8 1e          	shr    $0x1e,%rax
  401cd0:	48 89 c2             	mov    %rax,%rdx
  401cd3:	48 c1 e2 1f          	shl    $0x1f,%rdx
  401cd7:	48 29 c2             	sub    %rax,%rdx
  401cda:	48 89 f8             	mov    %rdi,%rax
  401cdd:	48 29 d0             	sub    %rdx,%rax
  401ce0:	c3                   	retq   
  401ce1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  401ce8:	00 00 00 
  401ceb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000401cf0 <unsigned long std::__detail::__mod<unsigned long, 2147483647ul, 1ul, 0ul>(unsigned long)>:
  401cf0:	e9 bb ff ff ff       	jmpq   401cb0 <std::__detail::_Mod<unsigned long, 2147483647ul, 1ul, 0ul, true, true>::__calc(unsigned long)>
  401cf5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  401cfc:	00 00 00 
  401cff:	90                   	nop

0000000000401d00 <std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>::seed(unsigned long) [clone .isra.0]>:
  401d00:	41 54                	push   %r12
  401d02:	55                   	push   %rbp
  401d03:	49 89 f4             	mov    %rsi,%r12
  401d06:	53                   	push   %rbx
  401d07:	48 89 fb             	mov    %rdi,%rbx
  401d0a:	31 ff                	xor    %edi,%edi
  401d0c:	e8 df ff ff ff       	callq  401cf0 <unsigned long std::__detail::__mod<unsigned long, 2147483647ul, 1ul, 0ul>(unsigned long)>
  401d11:	4c 89 e7             	mov    %r12,%rdi
  401d14:	48 89 c5             	mov    %rax,%rbp
  401d17:	e8 d4 ff ff ff       	callq  401cf0 <unsigned long std::__detail::__mod<unsigned long, 2147483647ul, 1ul, 0ul>(unsigned long)>
  401d1c:	48 85 ed             	test   %rbp,%rbp
  401d1f:	75 0c                	jne    401d2d <std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>::seed(unsigned long) [clone .isra.0]+0x2d>
  401d21:	48 85 c0             	test   %rax,%rax
  401d24:	ba 01 00 00 00       	mov    $0x1,%edx
  401d29:	48 0f 44 c2          	cmove  %rdx,%rax
  401d2d:	48 89 03             	mov    %rax,(%rbx)
  401d30:	5b                   	pop    %rbx
  401d31:	5d                   	pop    %rbp
  401d32:	41 5c                	pop    %r12
  401d34:	c3                   	retq   
  401d35:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  401d3c:	00 00 00 
  401d3f:	90                   	nop

0000000000401d40 <std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>::linear_congruential_engine(unsigned long)>:
  401d40:	e9 bb ff ff ff       	jmpq   401d00 <std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>::seed(unsigned long) [clone .isra.0]>
  401d45:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  401d4c:	00 00 00 
  401d4f:	90                   	nop

0000000000401d50 <std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>::linear_congruential_engine()>:
  401d50:	be 01 00 00 00       	mov    $0x1,%esi
  401d55:	e9 e6 ff ff ff       	jmpq   401d40 <std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>::linear_congruential_engine(unsigned long)>
  401d5a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000401d60 <void (*&&std::forward<void (*)()>(std::remove_reference<void (*)()>::type&))()>:
  401d60:	48 89 f8             	mov    %rdi,%rax
  401d63:	c3                   	retq   
  401d64:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  401d6b:	00 00 00 
  401d6e:	66 90                	xchg   %ax,%ax

0000000000401d70 <void std::__invoke_impl<void, void (*)()>(std::__invoke_other, void (*&&)()) [clone .isra.0]>:
  401d70:	48 83 ec 08          	sub    $0x8,%rsp
  401d74:	e8 e7 ff ff ff       	callq  401d60 <void (*&&std::forward<void (*)()>(std::remove_reference<void (*)()>::type&))()>
  401d79:	48 8b 00             	mov    (%rax),%rax
  401d7c:	48 83 c4 08          	add    $0x8,%rsp
  401d80:	ff e0                	jmpq   *%rax
  401d82:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  401d89:	00 00 00 
  401d8c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000401d90 <std::_Head_base<0ul, void (*)(), false>::_Head_base<void (*)()>(void (*&&)())>:
  401d90:	53                   	push   %rbx
  401d91:	48 89 fb             	mov    %rdi,%rbx
  401d94:	48 89 f7             	mov    %rsi,%rdi
  401d97:	e8 c4 ff ff ff       	callq  401d60 <void (*&&std::forward<void (*)()>(std::remove_reference<void (*)()>::type&))()>
  401d9c:	48 8b 00             	mov    (%rax),%rax
  401d9f:	48 89 03             	mov    %rax,(%rbx)
  401da2:	5b                   	pop    %rbx
  401da3:	c3                   	retq   
  401da4:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  401dab:	00 00 00 
  401dae:	66 90                	xchg   %ax,%ax

0000000000401db0 <std::_Head_base<0ul, void (*)(), false>::_M_head(std::_Head_base<0ul, void (*)(), false>&)>:
  401db0:	48 89 f8             	mov    %rdi,%rax
  401db3:	c3                   	retq   
  401db4:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  401dbb:	00 00 00 
  401dbe:	66 90                	xchg   %ax,%ax

0000000000401dc0 <std::_Tuple_impl<0ul, void (*)()>::_M_head(std::_Tuple_impl<0ul, void (*)()>&)>:
  401dc0:	e9 eb ff ff ff       	jmpq   401db0 <std::_Head_base<0ul, void (*)(), false>::_M_head(std::_Head_base<0ul, void (*)(), false>&)>
  401dc5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  401dcc:	00 00 00 
  401dcf:	90                   	nop

0000000000401dd0 <std::_Tuple_impl<0ul, void (*)()>::_Tuple_impl(std::_Tuple_impl<0ul, void (*)()>&&)>:
  401dd0:	55                   	push   %rbp
  401dd1:	48 89 fd             	mov    %rdi,%rbp
  401dd4:	48 89 f7             	mov    %rsi,%rdi
  401dd7:	e8 e4 ff ff ff       	callq  401dc0 <std::_Tuple_impl<0ul, void (*)()>::_M_head(std::_Tuple_impl<0ul, void (*)()>&)>
  401ddc:	48 89 c7             	mov    %rax,%rdi
  401ddf:	e8 7c ff ff ff       	callq  401d60 <void (*&&std::forward<void (*)()>(std::remove_reference<void (*)()>::type&))()>
  401de4:	48 89 ef             	mov    %rbp,%rdi
  401de7:	5d                   	pop    %rbp
  401de8:	48 89 c6             	mov    %rax,%rsi
  401deb:	e9 a0 ff ff ff       	jmpq   401d90 <std::_Head_base<0ul, void (*)(), false>::_Head_base<void (*)()>(void (*&&)())>

0000000000401df0 <std::tuple<void (*)()>::tuple(std::tuple<void (*)()>&&)>:
  401df0:	e9 db ff ff ff       	jmpq   401dd0 <std::_Tuple_impl<0ul, void (*)()>::_Tuple_impl(std::_Tuple_impl<0ul, void (*)()>&&)>
  401df5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  401dfc:	00 00 00 
  401dff:	90                   	nop

0000000000401e00 <std::thread::_Invoker<std::tuple<void (*)()> >::_Invoker(std::thread::_Invoker<std::tuple<void (*)()> >&&)>:
  401e00:	e9 eb ff ff ff       	jmpq   401df0 <std::tuple<void (*)()>::tuple(std::tuple<void (*)()>&&)>
  401e05:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  401e0c:	00 00 00 
  401e0f:	90                   	nop

0000000000401e10 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)()> > >::_State_impl(std::thread::_Invoker<std::tuple<void (*)()> >&&)>:
  401e10:	55                   	push   %rbp
  401e11:	53                   	push   %rbx
  401e12:	48 89 fb             	mov    %rdi,%rbx
  401e15:	48 89 f5             	mov    %rsi,%rbp
  401e18:	48 83 ec 08          	sub    $0x8,%rsp
  401e1c:	e8 6f fe ff ff       	callq  401c90 <std::thread::_State::_State()>
  401e21:	48 c7 03 88 30 40 00 	movq   $0x403088,(%rbx)
  401e28:	48 89 ef             	mov    %rbp,%rdi
  401e2b:	e8 50 fe ff ff       	callq  401c80 <std::thread::_Invoker<std::tuple<void (*)()> >&& std::forward<std::thread::_Invoker<std::tuple<void (*)()> > >(std::remove_reference<std::thread::_Invoker<std::tuple<void (*)()> > >::type&)>
  401e30:	48 83 c4 08          	add    $0x8,%rsp
  401e34:	48 8d 7b 08          	lea    0x8(%rbx),%rdi
  401e38:	5b                   	pop    %rbx
  401e39:	48 89 c6             	mov    %rax,%rsi
  401e3c:	5d                   	pop    %rbp
  401e3d:	e9 be ff ff ff       	jmpq   401e00 <std::thread::_Invoker<std::tuple<void (*)()> >::_Invoker(std::thread::_Invoker<std::tuple<void (*)()> >&&)>
  401e42:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  401e49:	00 00 00 
  401e4c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000401e50 <std::_Head_base<0ul, std::thread::_State*, false>::_Head_base()>:
  401e50:	48 c7 07 00 00 00 00 	movq   $0x0,(%rdi)
  401e57:	c3                   	retq   
  401e58:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  401e5f:	00 

0000000000401e60 <std::_Tuple_impl<0ul, std::thread::_State*, std::default_delete<std::thread::_State> >::_Tuple_impl()>:
  401e60:	e9 eb ff ff ff       	jmpq   401e50 <std::_Head_base<0ul, std::thread::_State*, false>::_Head_base()>
  401e65:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  401e6c:	00 00 00 
  401e6f:	90                   	nop

0000000000401e70 <std::tuple<std::thread::_State*, std::default_delete<std::thread::_State> >::tuple<std::thread::_State*, std::default_delete<std::thread::_State>, true>()>:
  401e70:	e9 eb ff ff ff       	jmpq   401e60 <std::_Tuple_impl<0ul, std::thread::_State*, std::default_delete<std::thread::_State> >::_Tuple_impl()>
  401e75:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  401e7c:	00 00 00 
  401e7f:	90                   	nop

0000000000401e80 <std::_Head_base<0ul, std::thread::_State*, false>::_M_head(std::_Head_base<0ul, std::thread::_State*, false>&)>:
  401e80:	48 89 f8             	mov    %rdi,%rax
  401e83:	c3                   	retq   
  401e84:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  401e8b:	00 00 00 
  401e8e:	66 90                	xchg   %ax,%ax

0000000000401e90 <std::_Tuple_impl<0ul, std::thread::_State*, std::default_delete<std::thread::_State> >::_M_head(std::_Tuple_impl<0ul, std::thread::_State*, std::default_delete<std::thread::_State> >&)>:
  401e90:	e9 eb ff ff ff       	jmpq   401e80 <std::_Head_base<0ul, std::thread::_State*, false>::_M_head(std::_Head_base<0ul, std::thread::_State*, false>&)>
  401e95:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  401e9c:	00 00 00 
  401e9f:	90                   	nop

0000000000401ea0 <std::thread::_State*& std::__get_helper<0ul, std::thread::_State*, std::default_delete<std::thread::_State> >(std::_Tuple_impl<0ul, std::thread::_State*, std::default_delete<std::thread::_State> >&)>:
  401ea0:	e9 eb ff ff ff       	jmpq   401e90 <std::_Tuple_impl<0ul, std::thread::_State*, std::default_delete<std::thread::_State> >::_M_head(std::_Tuple_impl<0ul, std::thread::_State*, std::default_delete<std::thread::_State> >&)>
  401ea5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  401eac:	00 00 00 
  401eaf:	90                   	nop

0000000000401eb0 <std::tuple_element<0ul, std::tuple<std::thread::_State*, std::default_delete<std::thread::_State> > >::type& std::get<0ul, std::thread::_State*, std::default_delete<std::thread::_State> >(std::tuple<std::thread::_State*, std::default_delete<std::thread::_State> >&)>:
  401eb0:	e9 eb ff ff ff       	jmpq   401ea0 <std::thread::_State*& std::__get_helper<0ul, std::thread::_State*, std::default_delete<std::thread::_State> >(std::_Tuple_impl<0ul, std::thread::_State*, std::default_delete<std::thread::_State> >&)>
  401eb5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  401ebc:	00 00 00 
  401ebf:	90                   	nop

0000000000401ec0 <std::__uniq_ptr_impl<std::thread::_State, std::default_delete<std::thread::_State> >::_M_ptr()>:
  401ec0:	e9 eb ff ff ff       	jmpq   401eb0 <std::tuple_element<0ul, std::tuple<std::thread::_State*, std::default_delete<std::thread::_State> > >::type& std::get<0ul, std::thread::_State*, std::default_delete<std::thread::_State> >(std::tuple<std::thread::_State*, std::default_delete<std::thread::_State> >&)>
  401ec5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  401ecc:	00 00 00 
  401ecf:	90                   	nop

0000000000401ed0 <std::__uniq_ptr_impl<std::thread::_State, std::default_delete<std::thread::_State> >::__uniq_ptr_impl(std::thread::_State*)>:
  401ed0:	55                   	push   %rbp
  401ed1:	53                   	push   %rbx
  401ed2:	48 89 fd             	mov    %rdi,%rbp
  401ed5:	48 89 f3             	mov    %rsi,%rbx
  401ed8:	48 83 ec 08          	sub    $0x8,%rsp
  401edc:	e8 8f ff ff ff       	callq  401e70 <std::tuple<std::thread::_State*, std::default_delete<std::thread::_State> >::tuple<std::thread::_State*, std::default_delete<std::thread::_State>, true>()>
  401ee1:	48 89 ef             	mov    %rbp,%rdi
  401ee4:	e8 d7 ff ff ff       	callq  401ec0 <std::__uniq_ptr_impl<std::thread::_State, std::default_delete<std::thread::_State> >::_M_ptr()>
  401ee9:	48 89 18             	mov    %rbx,(%rax)
  401eec:	48 83 c4 08          	add    $0x8,%rsp
  401ef0:	5b                   	pop    %rbx
  401ef1:	5d                   	pop    %rbp
  401ef2:	c3                   	retq   
  401ef3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  401efa:	00 00 00 
  401efd:	0f 1f 00             	nopl   (%rax)

0000000000401f00 <std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> >::unique_ptr<std::default_delete<std::thread::_State>, void>(std::thread::_State*)>:
  401f00:	e9 cb ff ff ff       	jmpq   401ed0 <std::__uniq_ptr_impl<std::thread::_State, std::default_delete<std::thread::_State> >::__uniq_ptr_impl(std::thread::_State*)>
  401f05:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  401f0c:	00 00 00 
  401f0f:	90                   	nop

0000000000401f10 <std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> > std::thread::_S_make_state<std::thread::_Invoker<std::tuple<void (*)()> > >(std::thread::_Invoker<std::tuple<void (*)()> >&&)>:
  401f10:	41 55                	push   %r13
  401f12:	41 54                	push   %r12
  401f14:	49 89 fc             	mov    %rdi,%r12
  401f17:	48 89 f7             	mov    %rsi,%rdi
  401f1a:	55                   	push   %rbp
  401f1b:	e8 60 fd ff ff       	callq  401c80 <std::thread::_Invoker<std::tuple<void (*)()> >&& std::forward<std::thread::_Invoker<std::tuple<void (*)()> > >(std::remove_reference<std::thread::_Invoker<std::tuple<void (*)()> > >::type&)>
  401f20:	bf 10 00 00 00       	mov    $0x10,%edi
  401f25:	49 89 c5             	mov    %rax,%r13
  401f28:	e8 b3 f1 ff ff       	callq  4010e0 <operator new(unsigned long)@plt>
  401f2d:	4c 89 ee             	mov    %r13,%rsi
  401f30:	48 89 c5             	mov    %rax,%rbp
  401f33:	48 89 c7             	mov    %rax,%rdi
  401f36:	e8 d5 fe ff ff       	callq  401e10 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)()> > >::_State_impl(std::thread::_Invoker<std::tuple<void (*)()> >&&)>
  401f3b:	48 89 ee             	mov    %rbp,%rsi
  401f3e:	4c 89 e7             	mov    %r12,%rdi
  401f41:	e8 ba ff ff ff       	callq  401f00 <std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> >::unique_ptr<std::default_delete<std::thread::_State>, void>(std::thread::_State*)>
  401f46:	4c 89 e0             	mov    %r12,%rax
  401f49:	5d                   	pop    %rbp
  401f4a:	41 5c                	pop    %r12
  401f4c:	41 5d                	pop    %r13
  401f4e:	c3                   	retq   
  401f4f:	90                   	nop

0000000000401f50 <std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> >::~unique_ptr()>:
  401f50:	53                   	push   %rbx
  401f51:	e8 6a ff ff ff       	callq  401ec0 <std::__uniq_ptr_impl<std::thread::_State, std::default_delete<std::thread::_State> >::_M_ptr()>
  401f56:	48 83 38 00          	cmpq   $0x0,(%rax)
  401f5a:	48 89 c3             	mov    %rax,%rbx
  401f5d:	74 10                	je     401f6f <std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> >::~unique_ptr()+0x1f>
  401f5f:	48 89 c7             	mov    %rax,%rdi
  401f62:	e8 39 fd ff ff       	callq  401ca0 <std::remove_reference<std::thread::_State*&>::type&& std::move<std::thread::_State*&>(std::thread::_State*&)>
  401f67:	48 8b 38             	mov    (%rax),%rdi
  401f6a:	e8 e1 f8 ff ff       	callq  401850 <std::default_delete<std::thread::_State>::operator()(std::thread::_State*) const [clone .isra.0]>
  401f6f:	48 c7 03 00 00 00 00 	movq   $0x0,(%rbx)
  401f76:	5b                   	pop    %rbx
  401f77:	c3                   	retq   
  401f78:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  401f7f:	00 

0000000000401f80 <std::remove_reference<std::tuple<void (*)()>&>::type&& std::move<std::tuple<void (*)()>&>(std::tuple<void (*)()>&)>:
  401f80:	48 89 f8             	mov    %rdi,%rax
  401f83:	c3                   	retq   
  401f84:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  401f8b:	00 00 00 
  401f8e:	66 90                	xchg   %ax,%ax

0000000000401f90 <std::__invoke_result<void (*)()>::type std::__invoke<void (*)()>(void (*&&)())>:
  401f90:	48 83 ec 08          	sub    $0x8,%rsp
  401f94:	e8 c7 fd ff ff       	callq  401d60 <void (*&&std::forward<void (*)()>(std::remove_reference<void (*)()>::type&))()>
  401f99:	48 83 c4 08          	add    $0x8,%rsp
  401f9d:	48 89 c7             	mov    %rax,%rdi
  401fa0:	e9 cb fd ff ff       	jmpq   401d70 <void std::__invoke_impl<void, void (*)()>(std::__invoke_other, void (*&&)()) [clone .isra.0]>
  401fa5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  401fac:	00 00 00 
  401faf:	90                   	nop

0000000000401fb0 <void (*&&std::forward<void (*&&)()>(std::remove_reference<void (*&&)()>::type&))()>:
  401fb0:	48 89 f8             	mov    %rdi,%rax
  401fb3:	c3                   	retq   
  401fb4:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  401fbb:	00 00 00 
  401fbe:	66 90                	xchg   %ax,%ax

0000000000401fc0 <void (*&std::__get_helper<0ul, void (*)()>(std::_Tuple_impl<0ul, void (*)()>&))()>:
  401fc0:	e9 fb fd ff ff       	jmpq   401dc0 <std::_Tuple_impl<0ul, void (*)()>::_M_head(std::_Tuple_impl<0ul, void (*)()>&)>
  401fc5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  401fcc:	00 00 00 
  401fcf:	90                   	nop

0000000000401fd0 <std::tuple_element<0ul, std::tuple<void (*)()> >::type& std::get<0ul, void (*)()>(std::tuple<void (*)()>&)>:
  401fd0:	e9 eb ff ff ff       	jmpq   401fc0 <void (*&std::__get_helper<0ul, void (*)()>(std::_Tuple_impl<0ul, void (*)()>&))()>
  401fd5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  401fdc:	00 00 00 
  401fdf:	90                   	nop

0000000000401fe0 <std::tuple_element<0ul, std::tuple<void (*)()> >::type&& std::get<0ul, void (*)()>(std::tuple<void (*)()>&&)>:
  401fe0:	48 83 ec 08          	sub    $0x8,%rsp
  401fe4:	e8 e7 ff ff ff       	callq  401fd0 <std::tuple_element<0ul, std::tuple<void (*)()> >::type& std::get<0ul, void (*)()>(std::tuple<void (*)()>&)>
  401fe9:	48 83 c4 08          	add    $0x8,%rsp
  401fed:	48 89 c7             	mov    %rax,%rdi
  401ff0:	e9 bb ff ff ff       	jmpq   401fb0 <void (*&&std::forward<void (*&&)()>(std::remove_reference<void (*&&)()>::type&))()>
  401ff5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  401ffc:	00 00 00 
  401fff:	90                   	nop

0000000000402000 <void std::thread::_Invoker<std::tuple<void (*)()> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) [clone .isra.0]>:
  402000:	48 83 ec 08          	sub    $0x8,%rsp
  402004:	e8 77 ff ff ff       	callq  401f80 <std::remove_reference<std::tuple<void (*)()>&>::type&& std::move<std::tuple<void (*)()>&>(std::tuple<void (*)()>&)>
  402009:	48 89 c7             	mov    %rax,%rdi
  40200c:	e8 cf ff ff ff       	callq  401fe0 <std::tuple_element<0ul, std::tuple<void (*)()> >::type&& std::get<0ul, void (*)()>(std::tuple<void (*)()>&&)>
  402011:	48 83 c4 08          	add    $0x8,%rsp
  402015:	48 89 c7             	mov    %rax,%rdi
  402018:	e9 73 ff ff ff       	jmpq   401f90 <std::__invoke_result<void (*)()>::type std::__invoke<void (*)()>(void (*&&)())>
  40201d:	0f 1f 00             	nopl   (%rax)

0000000000402020 <std::thread::_Invoker<std::tuple<void (*)()> >::operator()()>:
  402020:	e9 db ff ff ff       	jmpq   402000 <void std::thread::_Invoker<std::tuple<void (*)()> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) [clone .isra.0]>
  402025:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  40202c:	00 00 00 
  40202f:	90                   	nop

0000000000402030 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)()> > >::_M_run()>:
  402030:	48 83 c7 08          	add    $0x8,%rdi
  402034:	e9 e7 ff ff ff       	jmpq   402020 <std::thread::_Invoker<std::tuple<void (*)()> >::operator()()>
  402039:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000402040 <__libc_csu_init>:
  402040:	f3 0f 1e fa          	endbr64 
  402044:	41 57                	push   %r15
  402046:	4c 8d 3d bb 3c 00 00 	lea    0x3cbb(%rip),%r15        # 405d08 <__frame_dummy_init_array_entry>
  40204d:	41 56                	push   %r14
  40204f:	49 89 d6             	mov    %rdx,%r14
  402052:	41 55                	push   %r13
  402054:	49 89 f5             	mov    %rsi,%r13
  402057:	41 54                	push   %r12
  402059:	41 89 fc             	mov    %edi,%r12d
  40205c:	55                   	push   %rbp
  40205d:	48 8d 2d b4 3c 00 00 	lea    0x3cb4(%rip),%rbp        # 405d18 <__init_array_end>
  402064:	53                   	push   %rbx
  402065:	4c 29 fd             	sub    %r15,%rbp
  402068:	48 83 ec 08          	sub    $0x8,%rsp
  40206c:	e8 8f ef ff ff       	callq  401000 <_init>
  402071:	48 c1 fd 03          	sar    $0x3,%rbp
  402075:	74 1f                	je     402096 <__libc_csu_init+0x56>
  402077:	31 db                	xor    %ebx,%ebx
  402079:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  402080:	4c 89 f2             	mov    %r14,%rdx
  402083:	4c 89 ee             	mov    %r13,%rsi
  402086:	44 89 e7             	mov    %r12d,%edi
  402089:	41 ff 14 df          	callq  *(%r15,%rbx,8)
  40208d:	48 83 c3 01          	add    $0x1,%rbx
  402091:	48 39 dd             	cmp    %rbx,%rbp
  402094:	75 ea                	jne    402080 <__libc_csu_init+0x40>
  402096:	48 83 c4 08          	add    $0x8,%rsp
  40209a:	5b                   	pop    %rbx
  40209b:	5d                   	pop    %rbp
  40209c:	41 5c                	pop    %r12
  40209e:	41 5d                	pop    %r13
  4020a0:	41 5e                	pop    %r14
  4020a2:	41 5f                	pop    %r15
  4020a4:	c3                   	retq   
  4020a5:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
  4020ac:	00 00 00 00 

00000000004020b0 <__libc_csu_fini>:
  4020b0:	f3 0f 1e fa          	endbr64 
  4020b4:	c3                   	retq   

Desensamblado de la sección .fini:

00000000004020b8 <_fini>:
  4020b8:	f3 0f 1e fa          	endbr64 
  4020bc:	48 83 ec 08          	sub    $0x8,%rsp
  4020c0:	48 83 c4 08          	add    $0x8,%rsp
  4020c4:	c3                   	retq   
